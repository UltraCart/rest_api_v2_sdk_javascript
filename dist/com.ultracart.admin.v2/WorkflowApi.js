"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ErrorResponse = _interopRequireDefault(require("../com.ultracart.admin.v2.models/ErrorResponse"));
var _WorkflowAgentAuthResponse = _interopRequireDefault(require("../com.ultracart.admin.v2.models/WorkflowAgentAuthResponse"));
var _WorkflowAttachmentUploadUrlResponse = _interopRequireDefault(require("../com.ultracart.admin.v2.models/WorkflowAttachmentUploadUrlResponse"));
var _WorkflowGroupsResponse = _interopRequireDefault(require("../com.ultracart.admin.v2.models/WorkflowGroupsResponse"));
var _WorkflowTask = _interopRequireDefault(require("../com.ultracart.admin.v2.models/WorkflowTask"));
var _WorkflowTaskOpenCountResponse = _interopRequireDefault(require("../com.ultracart.admin.v2.models/WorkflowTaskOpenCountResponse"));
var _WorkflowTaskResponse = _interopRequireDefault(require("../com.ultracart.admin.v2.models/WorkflowTaskResponse"));
var _WorkflowTaskTagsResponse = _interopRequireDefault(require("../com.ultracart.admin.v2.models/WorkflowTaskTagsResponse"));
var _WorkflowTasksRequest = _interopRequireDefault(require("../com.ultracart.admin.v2.models/WorkflowTasksRequest"));
var _WorkflowTasksResponse = _interopRequireDefault(require("../com.ultracart.admin.v2.models/WorkflowTasksResponse"));
var _WorkflowUserResponse = _interopRequireDefault(require("../com.ultracart.admin.v2.models/WorkflowUserResponse"));
var _WorkflowUsersResponse = _interopRequireDefault(require("../com.ultracart.admin.v2.models/WorkflowUsersResponse"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Workflow service.
* @module com.ultracart.admin.v2/WorkflowApi
* @version 4.1.20
*/
var WorkflowApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new WorkflowApi. 
  * @alias module:com.ultracart.admin.v2/WorkflowApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function WorkflowApi(apiClient) {
    _classCallCheck(this, WorkflowApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Callback function to receive the result of the getWorkflowAgentWebsocketAuthorization operation.
   * @callback module:com.ultracart.admin.v2/WorkflowApi~getWorkflowAgentWebsocketAuthorizationCallback
   * @param {String} error Error message, if any.
   * @param {module:com.ultracart.admin.v2.models/WorkflowAgentAuthResponse} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * Get agent websocket authorization
   * Retrieve a JWT to authorize an agent to make a websocket connection. 
   * @param {module:com.ultracart.admin.v2/WorkflowApi~getWorkflowAgentWebsocketAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:com.ultracart.admin.v2.models/WorkflowAgentAuthResponse}
   */
  return _createClass(WorkflowApi, [{
    key: "getWorkflowAgentWebsocketAuthorization",
    value: function getWorkflowAgentWebsocketAuthorization(callback) {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _WorkflowAgentAuthResponse["default"];
      return this.apiClient.callApi('/workflow/agent/auth', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getWorkflowAssignmentGroups operation.
     * @callback module:com.ultracart.admin.v2/WorkflowApi~getWorkflowAssignmentGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/WorkflowGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of groups that workflow tasks can be assigned to
     * Retrieve a list of groups that workflow tasks can be assigned to 
     * @param {Object} opts Optional parameters
     * @param {Number} opts._limit The maximum number of records to return on this one API call. (Max 200) (default to 100)
     * @param {Number} opts._offset Pagination of the record set.  Offset is a zero based index. (default to 0)
     * @param {module:com.ultracart.admin.v2/WorkflowApi~getWorkflowAssignmentGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/WorkflowGroupsResponse}
     */
  }, {
    key: "getWorkflowAssignmentGroups",
    value: function getWorkflowAssignmentGroups(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        '_limit': opts['_limit'],
        '_offset': opts['_offset']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _WorkflowGroupsResponse["default"];
      return this.apiClient.callApi('/workflow/assignment_groups', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getWorkflowAssignmentUsers operation.
     * @callback module:com.ultracart.admin.v2/WorkflowApi~getWorkflowAssignmentUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/WorkflowUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of users that workflow tasks can be assigned to
     * Retrieve a list of users that workflow tasks can be assigned to 
     * @param {Object} opts Optional parameters
     * @param {Number} opts._limit The maximum number of records to return on this one API call. (Max 200) (default to 100)
     * @param {Number} opts._offset Pagination of the record set.  Offset is a zero based index. (default to 0)
     * @param {module:com.ultracart.admin.v2/WorkflowApi~getWorkflowAssignmentUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/WorkflowUsersResponse}
     */
  }, {
    key: "getWorkflowAssignmentUsers",
    value: function getWorkflowAssignmentUsers(opts, callback) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        '_limit': opts['_limit'],
        '_offset': opts['_offset']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _WorkflowUsersResponse["default"];
      return this.apiClient.callApi('/workflow/assignment_users', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getWorkflowMe operation.
     * @callback module:com.ultracart.admin.v2/WorkflowApi~getWorkflowMeCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/WorkflowUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a user object for myself
     * Retrieve a user object for myself 
     * @param {module:com.ultracart.admin.v2/WorkflowApi~getWorkflowMeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/WorkflowUserResponse}
     */
  }, {
    key: "getWorkflowMe",
    value: function getWorkflowMe(callback) {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _WorkflowUserResponse["default"];
      return this.apiClient.callApi('/workflow/me', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getWorkflowTask operation.
     * @callback module:com.ultracart.admin.v2/WorkflowApi~getWorkflowTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/WorkflowTaskResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a workflow task
     * Retrieve a workflow task 
     * @param {String} task_uuid 
     * @param {module:com.ultracart.admin.v2/WorkflowApi~getWorkflowTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/WorkflowTaskResponse}
     */
  }, {
    key: "getWorkflowTask",
    value: function getWorkflowTask(task_uuid, callback) {
      var postBody = null;
      // verify the required parameter 'task_uuid' is set
      if (task_uuid === undefined || task_uuid === null) {
        throw new Error("Missing the required parameter 'task_uuid' when calling getWorkflowTask");
      }
      var pathParams = {
        'task_uuid': task_uuid
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _WorkflowTaskResponse["default"];
      return this.apiClient.callApi('/workflow/tasks/{task_uuid}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getWorkflowTaskAttachmentUploadUrl operation.
     * @callback module:com.ultracart.admin.v2/WorkflowApi~getWorkflowTaskAttachmentUploadUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/WorkflowAttachmentUploadUrlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a presigned workflow task attachment upload URL
     * Get a presigned workflow task attachment upload URL 
     * @param {String} extension 
     * @param {module:com.ultracart.admin.v2/WorkflowApi~getWorkflowTaskAttachmentUploadUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/WorkflowAttachmentUploadUrlResponse}
     */
  }, {
    key: "getWorkflowTaskAttachmentUploadUrl",
    value: function getWorkflowTaskAttachmentUploadUrl(extension, callback) {
      var postBody = null;
      // verify the required parameter 'extension' is set
      if (extension === undefined || extension === null) {
        throw new Error("Missing the required parameter 'extension' when calling getWorkflowTaskAttachmentUploadUrl");
      }
      var pathParams = {
        'extension': extension
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _WorkflowAttachmentUploadUrlResponse["default"];
      return this.apiClient.callApi('/workflow/tasks/attachments/{extension}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getWorkflowTaskByObjectType operation.
     * @callback module:com.ultracart.admin.v2/WorkflowApi~getWorkflowTaskByObjectTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/WorkflowTasksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a workflow task by object type and id
     * Retrieve a workflow task by object type and id 
     * @param {String} object_type 
     * @param {String} object_id 
     * @param {module:com.ultracart.admin.v2/WorkflowApi~getWorkflowTaskByObjectTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/WorkflowTasksResponse}
     */
  }, {
    key: "getWorkflowTaskByObjectType",
    value: function getWorkflowTaskByObjectType(object_type, object_id, callback) {
      var postBody = null;
      // verify the required parameter 'object_type' is set
      if (object_type === undefined || object_type === null) {
        throw new Error("Missing the required parameter 'object_type' when calling getWorkflowTaskByObjectType");
      }
      // verify the required parameter 'object_id' is set
      if (object_id === undefined || object_id === null) {
        throw new Error("Missing the required parameter 'object_id' when calling getWorkflowTaskByObjectType");
      }
      var pathParams = {
        'object_type': object_type,
        'object_id': object_id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _WorkflowTasksResponse["default"];
      return this.apiClient.callApi('/workflow/tasks/by/{object_type}/{object_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getWorkflowTaskOpenCount operation.
     * @callback module:com.ultracart.admin.v2/WorkflowApi~getWorkflowTaskOpenCountCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/WorkflowTaskOpenCountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve workflow task open count
     * Retrieve workflow task open count 
     * @param {module:com.ultracart.admin.v2/WorkflowApi~getWorkflowTaskOpenCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/WorkflowTaskOpenCountResponse}
     */
  }, {
    key: "getWorkflowTaskOpenCount",
    value: function getWorkflowTaskOpenCount(callback) {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _WorkflowTaskOpenCountResponse["default"];
      return this.apiClient.callApi('/workflow/tasks/open_count', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getWorkflowTaskTags operation.
     * @callback module:com.ultracart.admin.v2/WorkflowApi~getWorkflowTaskTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/WorkflowTaskTagsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of existing workflow task tags
     * Retrieves a unique list of all the existing workflow task tags. 
     * @param {module:com.ultracart.admin.v2/WorkflowApi~getWorkflowTaskTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/WorkflowTaskTagsResponse}
     */
  }, {
    key: "getWorkflowTaskTags",
    value: function getWorkflowTaskTags(callback) {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _WorkflowTaskTagsResponse["default"];
      return this.apiClient.callApi('/workflow/tasks/tags', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the getWorkflowTasks operation.
     * @callback module:com.ultracart.admin.v2/WorkflowApi~getWorkflowTasksCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/WorkflowTasksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search workflow tasks
     * Retrieves a set of workflow tasks from the account based on a query object. 
     * @param {module:com.ultracart.admin.v2.models/WorkflowTasksRequest} workflow_tasks_query Workflow tasks query
     * @param {Object} opts Optional parameters
     * @param {Number} opts._limit The maximum number of records to return on this one API call. (Default 100, Max 500) (default to 100)
     * @param {Number} opts._offset Pagination of the record set.  Offset is a zero based index. (default to 0)
     * @param {String} opts._sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {module:com.ultracart.admin.v2/WorkflowApi~getWorkflowTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/WorkflowTasksResponse}
     */
  }, {
    key: "getWorkflowTasks",
    value: function getWorkflowTasks(workflow_tasks_query, opts, callback) {
      opts = opts || {};
      var postBody = workflow_tasks_query;
      // verify the required parameter 'workflow_tasks_query' is set
      if (workflow_tasks_query === undefined || workflow_tasks_query === null) {
        throw new Error("Missing the required parameter 'workflow_tasks_query' when calling getWorkflowTasks");
      }
      var pathParams = {};
      var queryParams = {
        '_limit': opts['_limit'],
        '_offset': opts['_offset'],
        '_sort': opts['_sort']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _WorkflowTasksResponse["default"];
      return this.apiClient.callApi('/workflow/tasks/search', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the insertWorkflowTask operation.
     * @callback module:com.ultracart.admin.v2/WorkflowApi~insertWorkflowTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/WorkflowTaskResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a workflow task
     * Insert a workflow task 
     * @param {module:com.ultracart.admin.v2.models/WorkflowTask} workflow_task workflow task
     * @param {module:com.ultracart.admin.v2/WorkflowApi~insertWorkflowTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/WorkflowTaskResponse}
     */
  }, {
    key: "insertWorkflowTask",
    value: function insertWorkflowTask(workflow_task, callback) {
      var postBody = workflow_task;
      // verify the required parameter 'workflow_task' is set
      if (workflow_task === undefined || workflow_task === null) {
        throw new Error("Missing the required parameter 'workflow_task' when calling insertWorkflowTask");
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _WorkflowTaskResponse["default"];
      return this.apiClient.callApi('/workflow/tasks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }

    /**
     * Callback function to receive the result of the updateWorkflowTask operation.
     * @callback module:com.ultracart.admin.v2/WorkflowApi~updateWorkflowTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/WorkflowTaskResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a workflow task
     * Update a workflow task 
     * @param {String} task_uuid 
     * @param {module:com.ultracart.admin.v2.models/WorkflowTask} workflow_task Workflow task
     * @param {module:com.ultracart.admin.v2/WorkflowApi~updateWorkflowTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/WorkflowTaskResponse}
     */
  }, {
    key: "updateWorkflowTask",
    value: function updateWorkflowTask(task_uuid, workflow_task, callback) {
      var postBody = workflow_task;
      // verify the required parameter 'task_uuid' is set
      if (task_uuid === undefined || task_uuid === null) {
        throw new Error("Missing the required parameter 'task_uuid' when calling updateWorkflowTask");
      }
      // verify the required parameter 'workflow_task' is set
      if (workflow_task === undefined || workflow_task === null) {
        throw new Error("Missing the required parameter 'workflow_task' when calling updateWorkflowTask");
      }
      var pathParams = {
        'task_uuid': task_uuid
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _WorkflowTaskResponse["default"];
      return this.apiClient.callApi('/workflow/tasks/{task_uuid}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null, callback);
    }
  }]);
}();