/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.UltraCartRestApiV2);
  }
}(this, function(expect, UltraCartRestApiV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new UltraCartRestApiV2.TransactionEmail();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TransactionEmail', function() {
    it('should create an instance of TransactionEmail', function() {
      // uncomment below and update the code to test TransactionEmail
      //var instane = new UltraCartRestApiV2.TransactionEmail();
      //expect(instance).to.be.a(UltraCartRestApiV2.TransactionEmail);
    });

    it('should have the property content (base name: "content")', function() {
      // uncomment below and update the code to test the property content
      //var instane = new UltraCartRestApiV2.TransactionEmail();
      //expect(instance).to.be();
    });

    it('should have the property fileExists (base name: "file_exists")', function() {
      // uncomment below and update the code to test the property fileExists
      //var instane = new UltraCartRestApiV2.TransactionEmail();
      //expect(instance).to.be();
    });

    it('should have the property fileName (base name: "file_name")', function() {
      // uncomment below and update the code to test the property fileName
      //var instane = new UltraCartRestApiV2.TransactionEmail();
      //expect(instance).to.be();
    });

    it('should have the property group (base name: "group")', function() {
      // uncomment below and update the code to test the property group
      //var instane = new UltraCartRestApiV2.TransactionEmail();
      //expect(instance).to.be();
    });

    it('should have the property invalid (base name: "invalid")', function() {
      // uncomment below and update the code to test the property invalid
      //var instane = new UltraCartRestApiV2.TransactionEmail();
      //expect(instance).to.be();
    });

    it('should have the property lastModified (base name: "last_modified")', function() {
      // uncomment below and update the code to test the property lastModified
      //var instane = new UltraCartRestApiV2.TransactionEmail();
      //expect(instance).to.be();
    });

    it('should have the property options (base name: "options")', function() {
      // uncomment below and update the code to test the property options
      //var instane = new UltraCartRestApiV2.TransactionEmail();
      //expect(instance).to.be();
    });

    it('should have the property path (base name: "path")', function() {
      // uncomment below and update the code to test the property path
      //var instane = new UltraCartRestApiV2.TransactionEmail();
      //expect(instance).to.be();
    });

    it('should have the property size (base name: "size")', function() {
      // uncomment below and update the code to test the property size
      //var instane = new UltraCartRestApiV2.TransactionEmail();
      //expect(instance).to.be();
    });

    it('should have the property storeFrontFsDirectoryOid (base name: "store_front_fs_directory_oid")', function() {
      // uncomment below and update the code to test the property storeFrontFsDirectoryOid
      //var instane = new UltraCartRestApiV2.TransactionEmail();
      //expect(instance).to.be();
    });

    it('should have the property storeFrontFsFileOid (base name: "store_front_fs_file_oid")', function() {
      // uncomment below and update the code to test the property storeFrontFsFileOid
      //var instane = new UltraCartRestApiV2.TransactionEmail();
      //expect(instance).to.be();
    });

    it('should have the property syntaxErrors (base name: "syntax_errors")', function() {
      // uncomment below and update the code to test the property syntaxErrors
      //var instane = new UltraCartRestApiV2.TransactionEmail();
      //expect(instance).to.be();
    });

    it('should have the property templatePathRelativePath (base name: "template_path_relative_path")', function() {
      // uncomment below and update the code to test the property templatePathRelativePath
      //var instane = new UltraCartRestApiV2.TransactionEmail();
      //expect(instance).to.be();
    });

    it('should have the property themeRelativePath (base name: "theme_relative_path")', function() {
      // uncomment below and update the code to test the property themeRelativePath
      //var instane = new UltraCartRestApiV2.TransactionEmail();
      //expect(instance).to.be();
    });

  });

}));
