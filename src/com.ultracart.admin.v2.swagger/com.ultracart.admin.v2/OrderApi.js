/**
 * UltraCart Rest API V2
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['com.ultracart.admin.v2.swagger/ApiClient', 'com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/OrdersResponse', 'com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/ErrorResponse', 'com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/BaseResponse', 'com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/OrderResponse', 'com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/Order'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../com.ultracart.admin.v2.models/OrdersResponse'), require('../com.ultracart.admin.v2.models/ErrorResponse'), require('../com.ultracart.admin.v2.models/BaseResponse'), require('../com.ultracart.admin.v2.models/OrderResponse'), require('../com.ultracart.admin.v2.models/Order'));
  } else {
    // Browser globals (root is window)
    if (!root.UltraCartRestApiV2) {
      root.UltraCartRestApiV2 = {};
    }
    root.UltraCartRestApiV2.OrderApi = factory(root.UltraCartRestApiV2.ApiClient, root.UltraCartRestApiV2.OrdersResponse, root.UltraCartRestApiV2.ErrorResponse, root.UltraCartRestApiV2.BaseResponse, root.UltraCartRestApiV2.OrderResponse, root.UltraCartRestApiV2.Order);
  }
}(this, function(ApiClient, OrdersResponse, ErrorResponse, BaseResponse, OrderResponse, Order) {
  'use strict';

  /**
   * Order service.
   * @module com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/OrderApi
   * @version 2.0.0
   */

  /**
   * Constructs a new OrderApi. 
   * @alias module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/OrderApi
   * @class
   * @param {module:com.ultracart.admin.v2.swagger/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:com.ultracart.admin.v2.swagger/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the orderOrdersGet operation.
     * @callback module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/OrderApi~orderOrdersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/OrdersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve orders
     * Retrieves a group of orders from the account.  If no parameters are specified, the API call will fail with a bad request error.  Always specify some parameters to limit the scope of the orders returned to ones you are truly interested in.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.orderId Order Id
     * @param {String} opts.paymentMethod Payment Method
     * @param {String} opts.company Company
     * @param {String} opts.firstName First Name
     * @param {String} opts.lastName Last Name
     * @param {String} opts.city City
     * @param {String} opts.stateRegion State/Region
     * @param {String} opts.postalCode Postal Code
     * @param {String} opts.countryCode Country Code (ISO-3166 two letter)
     * @param {String} opts.phone Phone
     * @param {String} opts.email Email
     * @param {String} opts.ccEmail CC Email
     * @param {Number} opts.total Total
     * @param {String} opts.screenBrandingThemeCode Screen Branding Theme Code
     * @param {String} opts.storefrontHostName StoreFront Host Name
     * @param {String} opts.creationDateBegin Creation Date Begin
     * @param {String} opts.creationDateEnd Creation Date End
     * @param {String} opts.paymentDateBegin Payment Date Begin
     * @param {String} opts.paymentDateEnd Payment Date End
     * @param {String} opts.shipmentDateBegin Shipment Date Begin
     * @param {String} opts.shipmentDateEnd Shipment Date End
     * @param {String} opts.rma RMA
     * @param {String} opts.purchaseOrderNumber Purchase Order Number
     * @param {String} opts.itemId Item Id
     * @param {String} opts.currentStage Current Stage
     * @param {String} opts.channelPartnerCode Channel Partner Code
     * @param {String} opts.channelPartnerOrderId Channel Partner Order ID
     * @param {Integer} opts.limit The maximum number of records to return on this one API call. (Maximum 200) (default to 100)
     * @param {Integer} opts.offset Pagination of the record set.  Offset is a zero based index. (default to 0)
     * @param {String} opts.sort The sort order of the orders.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {String} opts.expand The object expansion to perform on the result.
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/OrderApi~orderOrdersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/OrdersResponse}
     */
    this.orderOrdersGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'order_id': opts['orderId'],
        'payment_method': opts['paymentMethod'],
        'company': opts['company'],
        'first_name': opts['firstName'],
        'last_name': opts['lastName'],
        'city': opts['city'],
        'state_region': opts['stateRegion'],
        'postal_code': opts['postalCode'],
        'country_code': opts['countryCode'],
        'phone': opts['phone'],
        'email': opts['email'],
        'cc_email': opts['ccEmail'],
        'total': opts['total'],
        'screen_branding_theme_code': opts['screenBrandingThemeCode'],
        'storefront_host_name': opts['storefrontHostName'],
        'creation_date_begin': opts['creationDateBegin'],
        'creation_date_end': opts['creationDateEnd'],
        'payment_date_begin': opts['paymentDateBegin'],
        'payment_date_end': opts['paymentDateEnd'],
        'shipment_date_begin': opts['shipmentDateBegin'],
        'shipment_date_end': opts['shipmentDateEnd'],
        'rma': opts['rma'],
        'purchase_order_number': opts['purchaseOrderNumber'],
        'item_id': opts['itemId'],
        'current_stage': opts['currentStage'],
        'channel_partner_code': opts['channelPartnerCode'],
        'channel_partner_order_id': opts['channelPartnerOrderId'],
        '_limit': opts['limit'],
        '_offset': opts['offset'],
        '_sort': opts['sort'],
        '_expand': opts['expand']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrdersResponse;

      return this.apiClient.callApi(
        '/order/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orderOrdersOrderIdCancelPost operation.
     * @callback module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/OrderApi~orderOrdersOrderIdCancelPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel an order
     * Cancel an order on the UltraCart account.  If the success flag is false, then consult the error message for why it failed. 
     * @param {String} orderId The order id to cancel.
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/OrderApi~orderOrdersOrderIdCancelPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/BaseResponse}
     */
    this.orderOrdersOrderIdCancelPost = function(orderId, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw "Missing the required parameter 'orderId' when calling orderOrdersOrderIdCancelPost";
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponse;

      return this.apiClient.callApi(
        '/order/orders/{order_id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orderOrdersOrderIdDelete operation.
     * @callback module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/OrderApi~orderOrdersOrderIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an order
     * Delete an order on the UltraCart account. 
     * @param {String} orderId The order id to delete.
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/OrderApi~orderOrdersOrderIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.orderOrdersOrderIdDelete = function(orderId, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw "Missing the required parameter 'orderId' when calling orderOrdersOrderIdDelete";
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/order/orders/{order_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orderOrdersOrderIdGet operation.
     * @callback module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/OrderApi~orderOrdersOrderIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/OrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an order
     * Retrieves a single order using the specified order id. 
     * @param {String} orderId The order id to retrieve.
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand The object expansion to perform on the result.  See documentation for examples
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/OrderApi~orderOrdersOrderIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/OrderResponse}
     */
    this.orderOrdersOrderIdGet = function(orderId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw "Missing the required parameter 'orderId' when calling orderOrdersOrderIdGet";
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
        '_expand': opts['expand']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrderResponse;

      return this.apiClient.callApi(
        '/order/orders/{order_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orderOrdersOrderIdPut operation.
     * @callback module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/OrderApi~orderOrdersOrderIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/OrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an order
     * Update a new order on the UltraCart account. 
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/Order} order Order to update
     * @param {String} orderId The order id to update.
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/OrderApi~orderOrdersOrderIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/OrderResponse}
     */
    this.orderOrdersOrderIdPut = function(order, orderId, callback) {
      var postBody = order;

      // verify the required parameter 'order' is set
      if (order == undefined || order == null) {
        throw "Missing the required parameter 'order' when calling orderOrdersOrderIdPut";
      }

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw "Missing the required parameter 'orderId' when calling orderOrdersOrderIdPut";
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json; charset=UTF-8'];
      var accepts = ['application/json'];
      var returnType = OrderResponse;

      return this.apiClient.callApi(
        '/order/orders/{order_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orderOrdersOrderIdResendReceiptPost operation.
     * @callback module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/OrderApi~orderOrdersOrderIdResendReceiptPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resend receipt
     * Resend the receipt for an order on the UltraCart account. 
     * @param {String} orderId The order id to resend the receipt for.
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/OrderApi~orderOrdersOrderIdResendReceiptPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/BaseResponse}
     */
    this.orderOrdersOrderIdResendReceiptPost = function(orderId, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw "Missing the required parameter 'orderId' when calling orderOrdersOrderIdResendReceiptPost";
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponse;

      return this.apiClient.callApi(
        '/order/orders/{order_id}/resend_receipt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the orderOrdersOrderIdResendShipmentConfirmationPost operation.
     * @callback module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/OrderApi~orderOrdersOrderIdResendShipmentConfirmationPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resend shipment confirmation
     * Resend shipment confirmation for an order on the UltraCart account. 
     * @param {String} orderId The order id to resend the shipment notification for.
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/OrderApi~orderOrdersOrderIdResendShipmentConfirmationPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/BaseResponse}
     */
    this.orderOrdersOrderIdResendShipmentConfirmationPost = function(orderId, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw "Missing the required parameter 'orderId' when calling orderOrdersOrderIdResendShipmentConfirmationPost";
      }


      var pathParams = {
        'order_id': orderId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponse;

      return this.apiClient.callApi(
        '/order/orders/{order_id}/resend_shipment_confirmation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
