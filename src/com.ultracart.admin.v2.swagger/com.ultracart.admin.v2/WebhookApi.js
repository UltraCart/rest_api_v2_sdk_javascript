/**
 * UltraCart Rest API V2
 * This is the next generation UltraCart REST API...
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['com.ultracart.admin.v2.swagger/ApiClient', 'com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/WebhooksResponse', 'com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/ErrorResponse', 'com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/Webhook', 'com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/WebhookLogSummariesResponse', 'com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/WebhookLogResponse', 'com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/WebhookSampleRequestResponse', 'com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/WebhookSampleRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../com.ultracart.admin.v2.models/WebhooksResponse'), require('../com.ultracart.admin.v2.models/ErrorResponse'), require('../com.ultracart.admin.v2.models/Webhook'), require('../com.ultracart.admin.v2.models/WebhookLogSummariesResponse'), require('../com.ultracart.admin.v2.models/WebhookLogResponse'), require('../com.ultracart.admin.v2.models/WebhookSampleRequestResponse'), require('../com.ultracart.admin.v2.models/WebhookSampleRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.UltraCartRestApiV2) {
      root.UltraCartRestApiV2 = {};
    }
    root.UltraCartRestApiV2.WebhookApi = factory(root.UltraCartRestApiV2.ApiClient, root.UltraCartRestApiV2.WebhooksResponse, root.UltraCartRestApiV2.ErrorResponse, root.UltraCartRestApiV2.Webhook, root.UltraCartRestApiV2.WebhookLogSummariesResponse, root.UltraCartRestApiV2.WebhookLogResponse, root.UltraCartRestApiV2.WebhookSampleRequestResponse, root.UltraCartRestApiV2.WebhookSampleRequest);
  }
}(this, function(ApiClient, WebhooksResponse, ErrorResponse, Webhook, WebhookLogSummariesResponse, WebhookLogResponse, WebhookSampleRequestResponse, WebhookSampleRequest) {
  'use strict';

  /**
   * Webhook service.
   * @module com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/WebhookApi
   * @version 2.0.0
   */

  /**
   * Constructs a new WebhookApi. 
   * @alias module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/WebhookApi
   * @class
   * @param {module:com.ultracart.admin.v2.swagger/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:com.ultracart.admin.v2.swagger/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the webhookWebhooksGet operation.
     * @callback module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/WebhookApi~webhookWebhooksGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/WebhooksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve webhooks
     * Retrieves the webhooks associated with this application. 
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/WebhookApi~webhookWebhooksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/WebhooksResponse}
     */
    this.webhookWebhooksGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WebhooksResponse;

      return this.apiClient.callApi(
        '/webhook/webhooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webhookWebhooksPost operation.
     * @callback module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/WebhookApi~webhookWebhooksPostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/WebhooksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a webhook
     * Adds a new webhook on the account 
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/Webhook} webhook Webhook to create
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/WebhookApi~webhookWebhooksPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/WebhooksResponse}
     */
    this.webhookWebhooksPost = function(webhook, callback) {
      var postBody = webhook;

      // verify the required parameter 'webhook' is set
      if (webhook == undefined || webhook == null) {
        throw "Missing the required parameter 'webhook' when calling webhookWebhooksPost";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WebhooksResponse;

      return this.apiClient.callApi(
        '/webhook/webhooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webhookWebhooksWebhookOidDelete operation.
     * @callback module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/WebhookApi~webhookWebhooksWebhookOidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a webhook
     * Delete a webhook on the UltraCart account. 
     * @param {Integer} webhookOid The webhook oid to delete.
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/WebhookApi~webhookWebhooksWebhookOidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.webhookWebhooksWebhookOidDelete = function(webhookOid, callback) {
      var postBody = null;

      // verify the required parameter 'webhookOid' is set
      if (webhookOid == undefined || webhookOid == null) {
        throw "Missing the required parameter 'webhookOid' when calling webhookWebhooksWebhookOidDelete";
      }


      var pathParams = {
        'webhookOid': webhookOid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/webhook/webhooks/{webhookOid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webhookWebhooksWebhookOidLogsGet operation.
     * @callback module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/WebhookApi~webhookWebhooksWebhookOidLogsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/WebhookLogSummariesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the log summaries
     * Retrieves the log summary information for a given webhook.  This is useful for displaying all the various logs that can be viewed. 
     * @param {Integer} webhookOid The webhook oid to retrieve log summaries for.
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/WebhookApi~webhookWebhooksWebhookOidLogsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/WebhookLogSummariesResponse}
     */
    this.webhookWebhooksWebhookOidLogsGet = function(webhookOid, callback) {
      var postBody = null;

      // verify the required parameter 'webhookOid' is set
      if (webhookOid == undefined || webhookOid == null) {
        throw "Missing the required parameter 'webhookOid' when calling webhookWebhooksWebhookOidLogsGet";
      }


      var pathParams = {
        'webhookOid': webhookOid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WebhookLogSummariesResponse;

      return this.apiClient.callApi(
        '/webhook/webhooks/{webhookOid}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webhookWebhooksWebhookOidLogsRequestIdGet operation.
     * @callback module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/WebhookApi~webhookWebhooksWebhookOidLogsRequestIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/WebhookLogResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an individual log
     * Retrieves an individual log for a webhook given the webhook oid the request id. 
     * @param {Integer} webhookOid The webhook oid that owns the log.
     * @param {String} requestId The request id associated with the log to view.
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/WebhookApi~webhookWebhooksWebhookOidLogsRequestIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/WebhookLogResponse}
     */
    this.webhookWebhooksWebhookOidLogsRequestIdGet = function(webhookOid, requestId, callback) {
      var postBody = null;

      // verify the required parameter 'webhookOid' is set
      if (webhookOid == undefined || webhookOid == null) {
        throw "Missing the required parameter 'webhookOid' when calling webhookWebhooksWebhookOidLogsRequestIdGet";
      }

      // verify the required parameter 'requestId' is set
      if (requestId == undefined || requestId == null) {
        throw "Missing the required parameter 'requestId' when calling webhookWebhooksWebhookOidLogsRequestIdGet";
      }


      var pathParams = {
        'webhookOid': webhookOid,
        'requestId': requestId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WebhookLogResponse;

      return this.apiClient.callApi(
        '/webhook/webhooks/{webhookOid}/logs/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webhookWebhooksWebhookOidPut operation.
     * @callback module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/WebhookApi~webhookWebhooksWebhookOidPutCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/WebhooksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a webhook
     * Update a webhook on the account 
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/Webhook} webhook Webhook to update
     * @param {Integer} webhookOid The webhook oid to update.
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/WebhookApi~webhookWebhooksWebhookOidPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/WebhooksResponse}
     */
    this.webhookWebhooksWebhookOidPut = function(webhook, webhookOid, callback) {
      var postBody = webhook;

      // verify the required parameter 'webhook' is set
      if (webhook == undefined || webhook == null) {
        throw "Missing the required parameter 'webhook' when calling webhookWebhooksWebhookOidPut";
      }

      // verify the required parameter 'webhookOid' is set
      if (webhookOid == undefined || webhookOid == null) {
        throw "Missing the required parameter 'webhookOid' when calling webhookWebhooksWebhookOidPut";
      }


      var pathParams = {
        'webhookOid': webhookOid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WebhooksResponse;

      return this.apiClient.callApi(
        '/webhook/webhooks/{webhookOid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webhookWebhooksWebhookOidReflowEventNamePost operation.
     * @callback module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/WebhookApi~webhookWebhooksWebhookOidReflowEventNamePostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/WebhookSampleRequestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resend events to the webhook endpoint.
     * This method will resend events to the webhook endpoint.  This method can be used for example to send all the existing items on an account to a webhook. 
     * @param {Integer} webhookOid The webhook oid that is receiving the reflowed events.
     * @param {String} eventName The event to reflow.
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/WebhookApi~webhookWebhooksWebhookOidReflowEventNamePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/WebhookSampleRequestResponse}
     */
    this.webhookWebhooksWebhookOidReflowEventNamePost = function(webhookOid, eventName, callback) {
      var postBody = null;

      // verify the required parameter 'webhookOid' is set
      if (webhookOid == undefined || webhookOid == null) {
        throw "Missing the required parameter 'webhookOid' when calling webhookWebhooksWebhookOidReflowEventNamePost";
      }

      // verify the required parameter 'eventName' is set
      if (eventName == undefined || eventName == null) {
        throw "Missing the required parameter 'eventName' when calling webhookWebhooksWebhookOidReflowEventNamePost";
      }


      var pathParams = {
        'webhookOid': webhookOid,
        'eventName': eventName
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WebhookSampleRequestResponse;

      return this.apiClient.callApi(
        '/webhook/webhooks/{webhookOid}/reflow/{eventName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webhookWebhooksWebhookOidSamplesGet operation.
     * @callback module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/WebhookApi~webhookWebhooksWebhookOidSamplesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/WebhookSampleRequestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a sample notification.
     * Retrieves a sample notification for the webhook.  This provides as example of what the notifications that can be delivered will look like. 
     * @param {Integer} webhookOid The webhook oid to retrieve samples for.
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/WebhookApi~webhookWebhooksWebhookOidSamplesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/WebhookSampleRequestResponse}
     */
    this.webhookWebhooksWebhookOidSamplesGet = function(webhookOid, callback) {
      var postBody = null;

      // verify the required parameter 'webhookOid' is set
      if (webhookOid == undefined || webhookOid == null) {
        throw "Missing the required parameter 'webhookOid' when calling webhookWebhooksWebhookOidSamplesGet";
      }


      var pathParams = {
        'webhookOid': webhookOid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WebhookSampleRequestResponse;

      return this.apiClient.callApi(
        '/webhook/webhooks/{webhookOid}/samples', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the webhookWebhooksWebhookOidValidatePost operation.
     * @callback module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/WebhookApi~webhookWebhooksWebhookOidValidatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/WebhookLogResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send test message to an endpoint.
     * Performs a test of the webhook endpoint given the specified sample request and returns the log associated with the response. 
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/WebhookSampleRequest} samples Samples to send in the test
     * @param {Integer} webhookOid The webhook oid that is being tested.
     * @param {module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2/WebhookApi~webhookWebhooksWebhookOidValidatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.swagger/com.ultracart.admin.v2.models/WebhookLogResponse}
     */
    this.webhookWebhooksWebhookOidValidatePost = function(samples, webhookOid, callback) {
      var postBody = samples;

      // verify the required parameter 'samples' is set
      if (samples == undefined || samples == null) {
        throw "Missing the required parameter 'samples' when calling webhookWebhooksWebhookOidValidatePost";
      }

      // verify the required parameter 'webhookOid' is set
      if (webhookOid == undefined || webhookOid == null) {
        throw "Missing the required parameter 'webhookOid' when calling webhookWebhooksWebhookOidValidatePost";
      }


      var pathParams = {
        'webhookOid': webhookOid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WebhookLogResponse;

      return this.apiClient.callApi(
        '/webhook/webhooks/{webhookOid}/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
