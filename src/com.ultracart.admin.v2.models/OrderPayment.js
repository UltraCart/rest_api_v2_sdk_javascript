/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'com.ultracart.admin.v2.models/Currency', 'com.ultracart.admin.v2.models/OrderPaymentCheck', 'com.ultracart.admin.v2.models/OrderPaymentCreditCard', 'com.ultracart.admin.v2.models/OrderPaymentECheck', 'com.ultracart.admin.v2.models/OrderPaymentPurchaseOrder', 'com.ultracart.admin.v2.models/OrderPaymentTransaction'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Currency'), require('./OrderPaymentCheck'), require('./OrderPaymentCreditCard'), require('./OrderPaymentECheck'), require('./OrderPaymentPurchaseOrder'), require('./OrderPaymentTransaction'));
  } else {
    // Browser globals (root is window)
    if (!root.UltraCartRestApiV2) {
      root.UltraCartRestApiV2 = {};
    }
    root.UltraCartRestApiV2.OrderPayment = factory(root.UltraCartRestApiV2.ApiClient, root.UltraCartRestApiV2.Currency, root.UltraCartRestApiV2.OrderPaymentCheck, root.UltraCartRestApiV2.OrderPaymentCreditCard, root.UltraCartRestApiV2.OrderPaymentECheck, root.UltraCartRestApiV2.OrderPaymentPurchaseOrder, root.UltraCartRestApiV2.OrderPaymentTransaction);
  }
}(this, function(ApiClient, Currency, OrderPaymentCheck, OrderPaymentCreditCard, OrderPaymentECheck, OrderPaymentPurchaseOrder, OrderPaymentTransaction) {
  'use strict';

  /**
   * The OrderPayment model module.
   * @module com.ultracart.admin.v2.models/OrderPayment
   * @version 2.0.0
   */

  /**
   * Constructs a new <code>OrderPayment</code>.
   * @alias module:com.ultracart.admin.v2.models/OrderPayment
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>OrderPayment</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.ultracart.admin.v2.models/OrderPayment} obj Optional instance to populate.
   * @return {module:com.ultracart.admin.v2.models/OrderPayment} The populated <code>OrderPayment</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('check'))
        obj.check = OrderPaymentCheck.constructFromObject(data['check']);
      if (data.hasOwnProperty('credit_card'))
        obj.creditCard = OrderPaymentCreditCard.constructFromObject(data['credit_card']);
      if (data.hasOwnProperty('echeck'))
        obj.echeck = OrderPaymentECheck.constructFromObject(data['echeck']);
      if (data.hasOwnProperty('hold_for_fraud_review'))
        obj.holdForFraudReview = ApiClient.convertToType(data['hold_for_fraud_review'], 'Boolean');
      if (data.hasOwnProperty('payment_dts'))
        obj.paymentDts = ApiClient.convertToType(data['payment_dts'], 'String');
      if (data.hasOwnProperty('payment_method'))
        obj.paymentMethod = ApiClient.convertToType(data['payment_method'], 'String');
      if (data.hasOwnProperty('payment_method_accounting_code'))
        obj.paymentMethodAccountingCode = ApiClient.convertToType(data['payment_method_accounting_code'], 'String');
      if (data.hasOwnProperty('payment_method_deposit_to_account'))
        obj.paymentMethodDepositToAccount = ApiClient.convertToType(data['payment_method_deposit_to_account'], 'String');
      if (data.hasOwnProperty('payment_status'))
        obj.paymentStatus = ApiClient.convertToType(data['payment_status'], 'String');
      if (data.hasOwnProperty('purchase_order'))
        obj.purchaseOrder = OrderPaymentPurchaseOrder.constructFromObject(data['purchase_order']);
      if (data.hasOwnProperty('rotating_transaction_gateway_code'))
        obj.rotatingTransactionGatewayCode = ApiClient.convertToType(data['rotating_transaction_gateway_code'], 'String');
      if (data.hasOwnProperty('surcharge'))
        obj.surcharge = Currency.constructFromObject(data['surcharge']);
      if (data.hasOwnProperty('surcharge_accounting_code'))
        obj.surchargeAccountingCode = ApiClient.convertToType(data['surcharge_accounting_code'], 'String');
      if (data.hasOwnProperty('surcharge_transaction_fee'))
        obj.surchargeTransactionFee = ApiClient.convertToType(data['surcharge_transaction_fee'], 'Number');
      if (data.hasOwnProperty('surcharge_transaction_percentage'))
        obj.surchargeTransactionPercentage = ApiClient.convertToType(data['surcharge_transaction_percentage'], 'Number');
      if (data.hasOwnProperty('test_order'))
        obj.testOrder = ApiClient.convertToType(data['test_order'], 'Boolean');
      if (data.hasOwnProperty('transactions'))
        obj.transactions = ApiClient.convertToType(data['transactions'], [OrderPaymentTransaction]);
    }
    return obj;
  }

  /**
   * @member {module:com.ultracart.admin.v2.models/OrderPaymentCheck} check
   */
  exports.prototype.check = undefined;

  /**
   * @member {module:com.ultracart.admin.v2.models/OrderPaymentCreditCard} creditCard
   */
  exports.prototype.creditCard = undefined;

  /**
   * @member {module:com.ultracart.admin.v2.models/OrderPaymentECheck} echeck
   */
  exports.prototype.echeck = undefined;

  /**
   * True if order has been held for fraud review
   * @member {Boolean} holdForFraudReview
   */
  exports.prototype.holdForFraudReview = undefined;

  /**
   * Date/time that the payment was successfully processed, for new orders, this field is only considered if channel_partner.skip_payment_processing is true
   * @member {String} paymentDts
   */
  exports.prototype.paymentDts = undefined;

  /**
   * Payment method
   * @member {module:com.ultracart.admin.v2.models/OrderPayment.PaymentMethodEnum} paymentMethod
   */
  exports.prototype.paymentMethod = undefined;

  /**
   * Payment method QuickBooks code
   * @member {String} paymentMethodAccountingCode
   */
  exports.prototype.paymentMethodAccountingCode = undefined;

  /**
   * Payment method QuickBooks deposit account
   * @member {String} paymentMethodDepositToAccount
   */
  exports.prototype.paymentMethodDepositToAccount = undefined;

  /**
   * Payment status
   * @member {module:com.ultracart.admin.v2.models/OrderPayment.PaymentStatusEnum} paymentStatus
   */
  exports.prototype.paymentStatus = undefined;

  /**
   * @member {module:com.ultracart.admin.v2.models/OrderPaymentPurchaseOrder} purchaseOrder
   */
  exports.prototype.purchaseOrder = undefined;

  /**
   * Rotating transaction gateway code used to process this order
   * @member {String} rotatingTransactionGatewayCode
   */
  exports.prototype.rotatingTransactionGatewayCode = undefined;

  /**
   * @member {module:com.ultracart.admin.v2.models/Currency} surcharge
   */
  exports.prototype.surcharge = undefined;

  /**
   * Surcharge accounting code
   * @member {String} surchargeAccountingCode
   */
  exports.prototype.surchargeAccountingCode = undefined;

  /**
   * Surcharge transaction fee
   * @member {Number} surchargeTransactionFee
   */
  exports.prototype.surchargeTransactionFee = undefined;

  /**
   * Surcharge transaction percentage
   * @member {Number} surchargeTransactionPercentage
   */
  exports.prototype.surchargeTransactionPercentage = undefined;

  /**
   * True if this is a test order
   * @member {Boolean} testOrder
   */
  exports.prototype.testOrder = undefined;

  /**
   * Transactions associated with processing this payment
   * @member {Array.<module:com.ultracart.admin.v2.models/OrderPaymentTransaction>} transactions
   */
  exports.prototype.transactions = undefined;


  /**
   * Allowed values for the <code>paymentMethod</code> property.
   * @enum {String}
   * @readonly
   */
  exports.PaymentMethodEnum = {
    /**
     * value: "Affirm"
     * @const
     */
    affirm: "Affirm",

    /**
     * value: "Amazon"
     * @const
     */
    amazon: "Amazon",

    /**
     * value: "Amazon SC"
     * @const
     */
    amazonSC: "Amazon SC",

    /**
     * value: "Cash"
     * @const
     */
    cash: "Cash",

    /**
     * value: "Check"
     * @const
     */
    check: "Check",

    /**
     * value: "COD"
     * @const
     */
    COD: "COD",

    /**
     * value: "Credit Card"
     * @const
     */
    creditCard: "Credit Card",

    /**
     * value: "eBay"
     * @const
     */
    eBay: "eBay",

    /**
     * value: "eCheck"
     * @const
     */
    eCheck: "eCheck",

    /**
     * value: "LoanHero"
     * @const
     */
    loanHero: "LoanHero",

    /**
     * value: "Money Order"
     * @const
     */
    moneyOrder: "Money Order",

    /**
     * value: "PayPal"
     * @const
     */
    payPal: "PayPal",

    /**
     * value: "Purchase Order"
     * @const
     */
    purchaseOrder: "Purchase Order",

    /**
     * value: "Quote Request"
     * @const
     */
    quoteRequest: "Quote Request",

    /**
     * value: "Unknown"
     * @const
     */
    unknown: "Unknown",

    /**
     * value: "Wire Transfer"
     * @const
     */
    wireTransfer: "Wire Transfer",

    /**
     * value: "Walmart"
     * @const
     */
    walmart: "Walmart"
  };


  /**
   * Allowed values for the <code>paymentStatus</code> property.
   * @enum {String}
   * @readonly
   */
  exports.PaymentStatusEnum = {
    /**
     * value: "Unprocessed"
     * @const
     */
    unprocessed: "Unprocessed",

    /**
     * value: "Authorized"
     * @const
     */
    authorized: "Authorized",

    /**
     * value: "Capture Failed"
     * @const
     */
    captureFailed: "Capture Failed",

    /**
     * value: "Processed"
     * @const
     */
    processed: "Processed",

    /**
     * value: "Declined"
     * @const
     */
    declined: "Declined",

    /**
     * value: "Voided"
     * @const
     */
    voided: "Voided",

    /**
     * value: "Refunded"
     * @const
     */
    refunded: "Refunded",

    /**
     * value: "Skipped"
     * @const
     */
    skipped: "Skipped"
  };

  return exports;

}));
