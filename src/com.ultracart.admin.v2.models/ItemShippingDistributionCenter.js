/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.UltraCartRestApiV2) {
      root.UltraCartRestApiV2 = {};
    }
    root.UltraCartRestApiV2.ItemShippingDistributionCenter = factory(root.UltraCartRestApiV2.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The ItemShippingDistributionCenter model module.
   * @module com.ultracart.admin.v2.models/ItemShippingDistributionCenter
   * @version 2.0.0
   */

  /**
   * Constructs a new <code>ItemShippingDistributionCenter</code>.
   * @alias module:com.ultracart.admin.v2.models/ItemShippingDistributionCenter
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>ItemShippingDistributionCenter</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.ultracart.admin.v2.models/ItemShippingDistributionCenter} obj Optional instance to populate.
   * @return {module:com.ultracart.admin.v2.models/ItemShippingDistributionCenter} The populated <code>ItemShippingDistributionCenter</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('allocated_to_placed_orders'))
        obj.allocatedToPlacedOrders = ApiClient.convertToType(data['allocated_to_placed_orders'], 'Number');
      if (data.hasOwnProperty('allocated_to_shopping_carts'))
        obj.allocatedToShoppingCarts = ApiClient.convertToType(data['allocated_to_shopping_carts'], 'Number');
      if (data.hasOwnProperty('available_to_allocate'))
        obj.availableToAllocate = ApiClient.convertToType(data['available_to_allocate'], 'Number');
      if (data.hasOwnProperty('desired_inventory_level'))
        obj.desiredInventoryLevel = ApiClient.convertToType(data['desired_inventory_level'], 'Number');
      if (data.hasOwnProperty('distribution_center_code'))
        obj.distributionCenterCode = ApiClient.convertToType(data['distribution_center_code'], 'String');
      if (data.hasOwnProperty('distribution_center_oid'))
        obj.distributionCenterOid = ApiClient.convertToType(data['distribution_center_oid'], 'Number');
      if (data.hasOwnProperty('eta'))
        obj.eta = ApiClient.convertToType(data['eta'], 'String');
      if (data.hasOwnProperty('handles'))
        obj.handles = ApiClient.convertToType(data['handles'], 'Boolean');
      if (data.hasOwnProperty('inventory_level'))
        obj.inventoryLevel = ApiClient.convertToType(data['inventory_level'], 'Number');
      if (data.hasOwnProperty('maximum_backorder'))
        obj.maximumBackorder = ApiClient.convertToType(data['maximum_backorder'], 'Number');
      if (data.hasOwnProperty('reorder_inventory_level'))
        obj.reorderInventoryLevel = ApiClient.convertToType(data['reorder_inventory_level'], 'Number');
      if (data.hasOwnProperty('sku'))
        obj.sku = ApiClient.convertToType(data['sku'], 'String');
      if (data.hasOwnProperty('stock_picking_location'))
        obj.stockPickingLocation = ApiClient.convertToType(data['stock_picking_location'], 'String');
    }
    return obj;
  }

  /**
   * Allocated to placed orders
   * @member {Number} allocatedToPlacedOrders
   */
  exports.prototype.allocatedToPlacedOrders = undefined;

  /**
   * Allocated to shopping carts
   * @member {Number} allocatedToShoppingCarts
   */
  exports.prototype.allocatedToShoppingCarts = undefined;

  /**
   * Available to allocate
   * @member {Number} availableToAllocate
   */
  exports.prototype.availableToAllocate = undefined;

  /**
   * Desired inventory level
   * @member {Number} desiredInventoryLevel
   */
  exports.prototype.desiredInventoryLevel = undefined;

  /**
   * Distribution center code
   * @member {String} distributionCenterCode
   */
  exports.prototype.distributionCenterCode = undefined;

  /**
   * Distribution center object identifier
   * @member {Number} distributionCenterOid
   */
  exports.prototype.distributionCenterOid = undefined;

  /**
   * Estimated time of arrival
   * @member {String} eta
   */
  exports.prototype.eta = undefined;

  /**
   * True if this distribution center handles this item
   * @member {Boolean} handles
   */
  exports.prototype.handles = undefined;

  /**
   * Inventory level
   * @member {Number} inventoryLevel
   */
  exports.prototype.inventoryLevel = undefined;

  /**
   * Maximum back-order
   * @member {Number} maximumBackorder
   */
  exports.prototype.maximumBackorder = undefined;

  /**
   * Reorder inventory level (triggers notification)
   * @member {Number} reorderInventoryLevel
   */
  exports.prototype.reorderInventoryLevel = undefined;

  /**
   * SKU
   * @member {String} sku
   */
  exports.prototype.sku = undefined;

  /**
   * Stock picking location
   * @member {String} stockPickingLocation
   */
  exports.prototype.stockPickingLocation = undefined;

  return exports;

}));
