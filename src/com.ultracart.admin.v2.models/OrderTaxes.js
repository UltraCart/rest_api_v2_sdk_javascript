/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.UltraCartRestApiV2) {
      root.UltraCartRestApiV2 = {};
    }
    root.UltraCartRestApiV2.OrderTaxes = factory(root.UltraCartRestApiV2.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The OrderTaxes model module.
   * @module com.ultracart.admin.v2.models/OrderTaxes
   * @version 2.0.0
   */

  /**
   * Constructs a new <code>OrderTaxes</code>.
   * @alias module:com.ultracart.admin.v2.models/OrderTaxes
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>OrderTaxes</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:com.ultracart.admin.v2.models/OrderTaxes} obj Optional instance to populate.
   * @return {module:com.ultracart.admin.v2.models/OrderTaxes} The populated <code>OrderTaxes</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('arbitrary_tax'))
        obj.arbitraryTax = ApiClient.convertToType(data['arbitrary_tax'], 'Number');
      if (data.hasOwnProperty('arbitrary_tax_rate'))
        obj.arbitraryTaxRate = ApiClient.convertToType(data['arbitrary_tax_rate'], 'Number');
      if (data.hasOwnProperty('arbitrary_taxable_subtotal'))
        obj.arbitraryTaxableSubtotal = ApiClient.convertToType(data['arbitrary_taxable_subtotal'], 'Number');
      if (data.hasOwnProperty('tax_city_accounting_code'))
        obj.taxCityAccountingCode = ApiClient.convertToType(data['tax_city_accounting_code'], 'String');
      if (data.hasOwnProperty('tax_country_accounting_code'))
        obj.taxCountryAccountingCode = ApiClient.convertToType(data['tax_country_accounting_code'], 'String');
      if (data.hasOwnProperty('tax_county'))
        obj.taxCounty = ApiClient.convertToType(data['tax_county'], 'String');
      if (data.hasOwnProperty('tax_county_accounting_code'))
        obj.taxCountyAccountingCode = ApiClient.convertToType(data['tax_county_accounting_code'], 'String');
      if (data.hasOwnProperty('tax_gift_charge'))
        obj.taxGiftCharge = ApiClient.convertToType(data['tax_gift_charge'], 'Boolean');
      if (data.hasOwnProperty('tax_postal_code_accounting_code'))
        obj.taxPostalCodeAccountingCode = ApiClient.convertToType(data['tax_postal_code_accounting_code'], 'String');
      if (data.hasOwnProperty('tax_rate'))
        obj.taxRate = ApiClient.convertToType(data['tax_rate'], 'Number');
      if (data.hasOwnProperty('tax_rate_city'))
        obj.taxRateCity = ApiClient.convertToType(data['tax_rate_city'], 'Number');
      if (data.hasOwnProperty('tax_rate_country'))
        obj.taxRateCountry = ApiClient.convertToType(data['tax_rate_country'], 'Number');
      if (data.hasOwnProperty('tax_rate_county'))
        obj.taxRateCounty = ApiClient.convertToType(data['tax_rate_county'], 'Number');
      if (data.hasOwnProperty('tax_rate_postal_code'))
        obj.taxRatePostalCode = ApiClient.convertToType(data['tax_rate_postal_code'], 'Number');
      if (data.hasOwnProperty('tax_rate_state'))
        obj.taxRateState = ApiClient.convertToType(data['tax_rate_state'], 'Number');
      if (data.hasOwnProperty('tax_shipping'))
        obj.taxShipping = ApiClient.convertToType(data['tax_shipping'], 'Boolean');
      if (data.hasOwnProperty('tax_state_accounting_code'))
        obj.taxStateAccountingCode = ApiClient.convertToType(data['tax_state_accounting_code'], 'String');
    }
    return obj;
  }

  /**
   * Arbitrary Tax, this is meaningless for updating an order.  For inserting a new order, this will override any internal tax calculations and should only be used for orders completed outside the system.
   * @member {Number} arbitraryTax
   */
  exports.prototype.arbitraryTax = undefined;

  /**
   * Arbitrary tax rate, this is meaningless for updating an order.  For inserting a new order, this will override any internal tax calculations and should only be used for orders completed outside the system.
   * @member {Number} arbitraryTaxRate
   */
  exports.prototype.arbitraryTaxRate = undefined;

  /**
   * Arbitrary taxable subtotal, this is meaningless for updating an order.  For inserting a new order, this will override any internal tax calculations and should only be used for orders completed outside the system.
   * @member {Number} arbitraryTaxableSubtotal
   */
  exports.prototype.arbitraryTaxableSubtotal = undefined;

  /**
   * QuickBooks tax city code
   * @member {String} taxCityAccountingCode
   */
  exports.prototype.taxCityAccountingCode = undefined;

  /**
   * QuickBooks tax country code
   * @member {String} taxCountryAccountingCode
   */
  exports.prototype.taxCountryAccountingCode = undefined;

  /**
   * County used for tax calculation purposes (only in the United States)
   * @member {String} taxCounty
   */
  exports.prototype.taxCounty = undefined;

  /**
   * QuickBooks tax county code
   * @member {String} taxCountyAccountingCode
   */
  exports.prototype.taxCountyAccountingCode = undefined;

  /**
   * True if gift charge is taxed
   * @member {Boolean} taxGiftCharge
   */
  exports.prototype.taxGiftCharge = undefined;

  /**
   * QuickBooks tax postal code code
   * @member {String} taxPostalCodeAccountingCode
   */
  exports.prototype.taxPostalCodeAccountingCode = undefined;

  /**
   * Tax rate, this is meaningless for updating an order.  For inserting a new order, if you need to override internal tax calculations, use the arbitrary fields.
   * @member {Number} taxRate
   */
  exports.prototype.taxRate = undefined;

  /**
   * Tax rate at the city level
   * @member {Number} taxRateCity
   */
  exports.prototype.taxRateCity = undefined;

  /**
   * Tax rate at the country level
   * @member {Number} taxRateCountry
   */
  exports.prototype.taxRateCountry = undefined;

  /**
   * Tax rate at the county level
   * @member {Number} taxRateCounty
   */
  exports.prototype.taxRateCounty = undefined;

  /**
   * Tax rate at the postal code level
   * @member {Number} taxRatePostalCode
   */
  exports.prototype.taxRatePostalCode = undefined;

  /**
   * Tax rate at the state level
   * @member {Number} taxRateState
   */
  exports.prototype.taxRateState = undefined;

  /**
   * True if shipping is taxed
   * @member {Boolean} taxShipping
   */
  exports.prototype.taxShipping = undefined;

  /**
   * QuickBooks tax state code
   * @member {String} taxStateAccountingCode
   */
  exports.prototype.taxStateAccountingCode = undefined;

  return exports;

}));
