/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'com.ultracart.admin.v2.models/CustomDashboard', 'com.ultracart.admin.v2.models/CustomDashboardResponse', 'com.ultracart.admin.v2.models/CustomDashboardSchedule', 'com.ultracart.admin.v2.models/CustomDashboardScheduleResponse', 'com.ultracart.admin.v2.models/CustomDashboardSchedulesResponse', 'com.ultracart.admin.v2.models/CustomDashboardsResponse', 'com.ultracart.admin.v2.models/CustomReport', 'com.ultracart.admin.v2.models/CustomReportAccountConfig', 'com.ultracart.admin.v2.models/CustomReportAccountConfigResponse', 'com.ultracart.admin.v2.models/CustomReportAnalysisRequest', 'com.ultracart.admin.v2.models/CustomReportAnalysisResponse', 'com.ultracart.admin.v2.models/CustomReportChartPngUploadResponse', 'com.ultracart.admin.v2.models/CustomReportExecutionRequest', 'com.ultracart.admin.v2.models/CustomReportExecutionResponse', 'com.ultracart.admin.v2.models/CustomReportResponse', 'com.ultracart.admin.v2.models/CustomReportsExecutionRequest', 'com.ultracart.admin.v2.models/CustomReportsExecutionResponse', 'com.ultracart.admin.v2.models/CustomReportsResponse', 'com.ultracart.admin.v2.models/ErrorResponse', 'com.ultracart.admin.v2.models/Report', 'com.ultracart.admin.v2.models/ReportAuthResponse', 'com.ultracart.admin.v2.models/ReportDataSetPageResponse', 'com.ultracart.admin.v2.models/ReportDataSetResponse', 'com.ultracart.admin.v2.models/ReportDryRunQueriesRequest', 'com.ultracart.admin.v2.models/ReportDryRunQueriesResponse', 'com.ultracart.admin.v2.models/ReportExecuteQueriesRequest', 'com.ultracart.admin.v2.models/ReportResponse', 'com.ultracart.admin.v2.models/ReportsResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../com.ultracart.admin.v2.models/CustomDashboard'), require('../com.ultracart.admin.v2.models/CustomDashboardResponse'), require('../com.ultracart.admin.v2.models/CustomDashboardSchedule'), require('../com.ultracart.admin.v2.models/CustomDashboardScheduleResponse'), require('../com.ultracart.admin.v2.models/CustomDashboardSchedulesResponse'), require('../com.ultracart.admin.v2.models/CustomDashboardsResponse'), require('../com.ultracart.admin.v2.models/CustomReport'), require('../com.ultracart.admin.v2.models/CustomReportAccountConfig'), require('../com.ultracart.admin.v2.models/CustomReportAccountConfigResponse'), require('../com.ultracart.admin.v2.models/CustomReportAnalysisRequest'), require('../com.ultracart.admin.v2.models/CustomReportAnalysisResponse'), require('../com.ultracart.admin.v2.models/CustomReportChartPngUploadResponse'), require('../com.ultracart.admin.v2.models/CustomReportExecutionRequest'), require('../com.ultracart.admin.v2.models/CustomReportExecutionResponse'), require('../com.ultracart.admin.v2.models/CustomReportResponse'), require('../com.ultracart.admin.v2.models/CustomReportsExecutionRequest'), require('../com.ultracart.admin.v2.models/CustomReportsExecutionResponse'), require('../com.ultracart.admin.v2.models/CustomReportsResponse'), require('../com.ultracart.admin.v2.models/ErrorResponse'), require('../com.ultracart.admin.v2.models/Report'), require('../com.ultracart.admin.v2.models/ReportAuthResponse'), require('../com.ultracart.admin.v2.models/ReportDataSetPageResponse'), require('../com.ultracart.admin.v2.models/ReportDataSetResponse'), require('../com.ultracart.admin.v2.models/ReportDryRunQueriesRequest'), require('../com.ultracart.admin.v2.models/ReportDryRunQueriesResponse'), require('../com.ultracart.admin.v2.models/ReportExecuteQueriesRequest'), require('../com.ultracart.admin.v2.models/ReportResponse'), require('../com.ultracart.admin.v2.models/ReportsResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.UltraCartRestApiV2) {
      root.UltraCartRestApiV2 = {};
    }
    root.UltraCartRestApiV2.DatawarehouseApi = factory(root.UltraCartRestApiV2.ApiClient, root.UltraCartRestApiV2.CustomDashboard, root.UltraCartRestApiV2.CustomDashboardResponse, root.UltraCartRestApiV2.CustomDashboardSchedule, root.UltraCartRestApiV2.CustomDashboardScheduleResponse, root.UltraCartRestApiV2.CustomDashboardSchedulesResponse, root.UltraCartRestApiV2.CustomDashboardsResponse, root.UltraCartRestApiV2.CustomReport, root.UltraCartRestApiV2.CustomReportAccountConfig, root.UltraCartRestApiV2.CustomReportAccountConfigResponse, root.UltraCartRestApiV2.CustomReportAnalysisRequest, root.UltraCartRestApiV2.CustomReportAnalysisResponse, root.UltraCartRestApiV2.CustomReportChartPngUploadResponse, root.UltraCartRestApiV2.CustomReportExecutionRequest, root.UltraCartRestApiV2.CustomReportExecutionResponse, root.UltraCartRestApiV2.CustomReportResponse, root.UltraCartRestApiV2.CustomReportsExecutionRequest, root.UltraCartRestApiV2.CustomReportsExecutionResponse, root.UltraCartRestApiV2.CustomReportsResponse, root.UltraCartRestApiV2.ErrorResponse, root.UltraCartRestApiV2.Report, root.UltraCartRestApiV2.ReportAuthResponse, root.UltraCartRestApiV2.ReportDataSetPageResponse, root.UltraCartRestApiV2.ReportDataSetResponse, root.UltraCartRestApiV2.ReportDryRunQueriesRequest, root.UltraCartRestApiV2.ReportDryRunQueriesResponse, root.UltraCartRestApiV2.ReportExecuteQueriesRequest, root.UltraCartRestApiV2.ReportResponse, root.UltraCartRestApiV2.ReportsResponse);
  }
}(this, function(ApiClient, CustomDashboard, CustomDashboardResponse, CustomDashboardSchedule, CustomDashboardScheduleResponse, CustomDashboardSchedulesResponse, CustomDashboardsResponse, CustomReport, CustomReportAccountConfig, CustomReportAccountConfigResponse, CustomReportAnalysisRequest, CustomReportAnalysisResponse, CustomReportChartPngUploadResponse, CustomReportExecutionRequest, CustomReportExecutionResponse, CustomReportResponse, CustomReportsExecutionRequest, CustomReportsExecutionResponse, CustomReportsResponse, ErrorResponse, Report, ReportAuthResponse, ReportDataSetPageResponse, ReportDataSetResponse, ReportDryRunQueriesRequest, ReportDryRunQueriesResponse, ReportExecuteQueriesRequest, ReportResponse, ReportsResponse) {
  'use strict';

  /**
   * Datawarehouse service.
   * @module com.ultracart.admin.v2/DatawarehouseApi
   * @version 3.11.24
   */

  /**
   * Constructs a new DatawarehouseApi. 
   * @alias module:com.ultracart.admin.v2/DatawarehouseApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the analyzeCustomReport operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~analyzeCustomReportCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomReportAnalysisResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Analyze a custom report
     * Analyze a custom report on the UltraCart account. 
     * @param {module:com.ultracart.admin.v2.models/CustomReportAnalysisRequest} analyze_request Request to analyze custom report
     * @param {Number} custom_report_oid The report oid to analyze.
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~analyzeCustomReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomReportAnalysisResponse}
     */
    this.analyzeCustomReport = function(analyze_request, custom_report_oid, callback) {
      var postBody = analyze_request;

      // verify the required parameter 'analyze_request' is set
      if (analyze_request === undefined || analyze_request === null) {
        throw new Error("Missing the required parameter 'analyze_request' when calling analyzeCustomReport");
      }

      // verify the required parameter 'custom_report_oid' is set
      if (custom_report_oid === undefined || custom_report_oid === null) {
        throw new Error("Missing the required parameter 'custom_report_oid' when calling analyzeCustomReport");
      }


      var pathParams = {
        'custom_report_oid': custom_report_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json; charset=UTF-8'];
      var accepts = ['application/json'];
      var returnType = CustomReportAnalysisResponse;

      return this.apiClient.callApi(
        '/datawarehouse/custom_reports/{custom_report_oid}/analysis', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomDashboard operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~deleteCustomDashboardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a custom dashboard
     * Delete a custom dashboard on the UltraCart account. 
     * @param {Number} custom_dashboard_oid The dashboard oid to delete.
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~deleteCustomDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCustomDashboard = function(custom_dashboard_oid, callback) {
      var postBody = null;

      // verify the required parameter 'custom_dashboard_oid' is set
      if (custom_dashboard_oid === undefined || custom_dashboard_oid === null) {
        throw new Error("Missing the required parameter 'custom_dashboard_oid' when calling deleteCustomDashboard");
      }


      var pathParams = {
        'custom_dashboard_oid': custom_dashboard_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/datawarehouse/custom_dashboards/{custom_dashboard_oid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomDashboardSchedule operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~deleteCustomDashboardScheduleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a custom dashboard schedule
     * delete a custom dashboard schedule on the UltraCart account. 
     * @param {Number} custom_dashboard_schedule_oid The dashboard schedule oid to delete.
     * @param {Number} custom_dashboard_oid The dashboard oid that owns the schedule.
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~deleteCustomDashboardScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCustomDashboardSchedule = function(custom_dashboard_schedule_oid, custom_dashboard_oid, callback) {
      var postBody = null;

      // verify the required parameter 'custom_dashboard_schedule_oid' is set
      if (custom_dashboard_schedule_oid === undefined || custom_dashboard_schedule_oid === null) {
        throw new Error("Missing the required parameter 'custom_dashboard_schedule_oid' when calling deleteCustomDashboardSchedule");
      }

      // verify the required parameter 'custom_dashboard_oid' is set
      if (custom_dashboard_oid === undefined || custom_dashboard_oid === null) {
        throw new Error("Missing the required parameter 'custom_dashboard_oid' when calling deleteCustomDashboardSchedule");
      }


      var pathParams = {
        'custom_dashboard_schedule_oid': custom_dashboard_schedule_oid,
        'custom_dashboard_oid': custom_dashboard_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json; charset=UTF-8'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/datawarehouse/custom_dashboards/{custom_dashboard_oid}/schedules/{custom_dashboard_schedule_oid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomReport operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~deleteCustomReportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a custom report
     * Delete a custom report on the UltraCart account. 
     * @param {Number} custom_report_oid The report oid to delete.
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~deleteCustomReportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCustomReport = function(custom_report_oid, callback) {
      var postBody = null;

      // verify the required parameter 'custom_report_oid' is set
      if (custom_report_oid === undefined || custom_report_oid === null) {
        throw new Error("Missing the required parameter 'custom_report_oid' when calling deleteCustomReport");
      }


      var pathParams = {
        'custom_report_oid': custom_report_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/datawarehouse/custom_reports/{custom_report_oid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReport operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~deleteReportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a report
     * Delete a report on the UltraCart account. 
     * @param {Number} report_oid The report oid to delete.
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~deleteReportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteReport = function(report_oid, callback) {
      var postBody = null;

      // verify the required parameter 'report_oid' is set
      if (report_oid === undefined || report_oid === null) {
        throw new Error("Missing the required parameter 'report_oid' when calling deleteReport");
      }


      var pathParams = {
        'report_oid': report_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/datawarehouse/reports/{report_oid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dryRunReportQueries operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~dryRunReportQueriesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ReportDryRunQueriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dry run the report queries
     * Dry run the report queries 
     * @param {module:com.ultracart.admin.v2.models/ReportDryRunQueriesRequest} query_request Dry run request
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~dryRunReportQueriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ReportDryRunQueriesResponse}
     */
    this.dryRunReportQueries = function(query_request, callback) {
      var postBody = query_request;

      // verify the required parameter 'query_request' is set
      if (query_request === undefined || query_request === null) {
        throw new Error("Missing the required parameter 'query_request' when calling dryRunReportQueries");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReportDryRunQueriesResponse;

      return this.apiClient.callApi(
        '/datawarehouse/reports/dryrun', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the executeCustomReport operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~executeCustomReportCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomReportExecutionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute a custom report
     * Execute a custom report on the UltraCart account. 
     * @param {module:com.ultracart.admin.v2.models/CustomReportExecutionRequest} execution_request Request to execute custom report
     * @param {Number} custom_report_oid The report oid to execute.
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~executeCustomReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomReportExecutionResponse}
     */
    this.executeCustomReport = function(execution_request, custom_report_oid, callback) {
      var postBody = execution_request;

      // verify the required parameter 'execution_request' is set
      if (execution_request === undefined || execution_request === null) {
        throw new Error("Missing the required parameter 'execution_request' when calling executeCustomReport");
      }

      // verify the required parameter 'custom_report_oid' is set
      if (custom_report_oid === undefined || custom_report_oid === null) {
        throw new Error("Missing the required parameter 'custom_report_oid' when calling executeCustomReport");
      }


      var pathParams = {
        'custom_report_oid': custom_report_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json; charset=UTF-8'];
      var accepts = ['application/json'];
      var returnType = CustomReportExecutionResponse;

      return this.apiClient.callApi(
        '/datawarehouse/custom_reports/{custom_report_oid}/execute', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the executeCustomReports operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~executeCustomReportsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomReportsExecutionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute a custom reports
     * Execute a custom reports on the UltraCart account. 
     * @param {module:com.ultracart.admin.v2.models/CustomReportsExecutionRequest} execution_request Request to execute custom reports
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~executeCustomReportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomReportsExecutionResponse}
     */
    this.executeCustomReports = function(execution_request, callback) {
      var postBody = execution_request;

      // verify the required parameter 'execution_request' is set
      if (execution_request === undefined || execution_request === null) {
        throw new Error("Missing the required parameter 'execution_request' when calling executeCustomReports");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json; charset=UTF-8'];
      var accepts = ['application/json'];
      var returnType = CustomReportsExecutionResponse;

      return this.apiClient.callApi(
        '/datawarehouse/custom_reports/execute', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the executeReportQueries operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~executeReportQueriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute the report queries
     * Execute the report queries 
     * @param {module:com.ultracart.admin.v2.models/ReportExecuteQueriesRequest} query_request Query request
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~executeReportQueriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.executeReportQueries = function(query_request, callback) {
      var postBody = query_request;

      // verify the required parameter 'query_request' is set
      if (query_request === undefined || query_request === null) {
        throw new Error("Missing the required parameter 'query_request' when calling executeReportQueries");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/datawarehouse/reports/execute', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomDashboard operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~getCustomDashboardCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomDashboardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a custom dashboard
     * Retrieve a custom dashboard 
     * @param {Number} custom_dashboard_oid 
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~getCustomDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomDashboardResponse}
     */
    this.getCustomDashboard = function(custom_dashboard_oid, callback) {
      var postBody = null;

      // verify the required parameter 'custom_dashboard_oid' is set
      if (custom_dashboard_oid === undefined || custom_dashboard_oid === null) {
        throw new Error("Missing the required parameter 'custom_dashboard_oid' when calling getCustomDashboard");
      }


      var pathParams = {
        'custom_dashboard_oid': custom_dashboard_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomDashboardResponse;

      return this.apiClient.callApi(
        '/datawarehouse/custom_dashboards/{custom_dashboard_oid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomDashboardSchedules operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~getCustomDashboardSchedulesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomDashboardSchedulesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get custom dashboards
     * Retrieve a custom dashboards 
     * @param {Number} custom_dashboard_oid 
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~getCustomDashboardSchedulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomDashboardSchedulesResponse}
     */
    this.getCustomDashboardSchedules = function(custom_dashboard_oid, callback) {
      var postBody = null;

      // verify the required parameter 'custom_dashboard_oid' is set
      if (custom_dashboard_oid === undefined || custom_dashboard_oid === null) {
        throw new Error("Missing the required parameter 'custom_dashboard_oid' when calling getCustomDashboardSchedules");
      }


      var pathParams = {
        'custom_dashboard_oid': custom_dashboard_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomDashboardSchedulesResponse;

      return this.apiClient.callApi(
        '/datawarehouse/custom_dashboards/{custom_dashboard_oid}/schedules', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomDashboards operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~getCustomDashboardsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomDashboardsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get custom dashboards
     * Retrieve a custom dashboards 
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~getCustomDashboardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomDashboardsResponse}
     */
    this.getCustomDashboards = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomDashboardsResponse;

      return this.apiClient.callApi(
        '/datawarehouse/custom_dashboards', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomReport operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~getCustomReportCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a custom report
     * Retrieve a custom report 
     * @param {Number} custom_report_oid 
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~getCustomReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomReportResponse}
     */
    this.getCustomReport = function(custom_report_oid, callback) {
      var postBody = null;

      // verify the required parameter 'custom_report_oid' is set
      if (custom_report_oid === undefined || custom_report_oid === null) {
        throw new Error("Missing the required parameter 'custom_report_oid' when calling getCustomReport");
      }


      var pathParams = {
        'custom_report_oid': custom_report_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomReportResponse;

      return this.apiClient.callApi(
        '/datawarehouse/custom_reports/{custom_report_oid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomReportAccountConfig operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~getCustomReportAccountConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomReportAccountConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get custom report account configuration
     * Retrieve a custom report account configuration 
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~getCustomReportAccountConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomReportAccountConfigResponse}
     */
    this.getCustomReportAccountConfig = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomReportAccountConfigResponse;

      return this.apiClient.callApi(
        '/datawarehouse/custom_reports/account_config', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomReportChartPngUploadUrl operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~getCustomReportChartPngUploadUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomReportChartPngUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a PNG of a custom report chart
     * Upload a PNG of a custom report chart 
     * @param {Number} custom_report_oid The report oid to upload a chart PNG for.
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~getCustomReportChartPngUploadUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomReportChartPngUploadResponse}
     */
    this.getCustomReportChartPngUploadUrl = function(custom_report_oid, callback) {
      var postBody = null;

      // verify the required parameter 'custom_report_oid' is set
      if (custom_report_oid === undefined || custom_report_oid === null) {
        throw new Error("Missing the required parameter 'custom_report_oid' when calling getCustomReportChartPngUploadUrl");
      }


      var pathParams = {
        'custom_report_oid': custom_report_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json; charset=UTF-8'];
      var accepts = ['application/json'];
      var returnType = CustomReportChartPngUploadResponse;

      return this.apiClient.callApi(
        '/datawarehouse/custom_reports/{custom_report_oid}/chart_png', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomReports operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~getCustomReportsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomReportsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get custom reports
     * Retrieve a custom reports 
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~getCustomReportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomReportsResponse}
     */
    this.getCustomReports = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CustomReportsResponse;

      return this.apiClient.callApi(
        '/datawarehouse/custom_reports', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReport operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~getReportCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a report
     * Retrieve a report 
     * @param {Number} report_oid 
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~getReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ReportResponse}
     */
    this.getReport = function(report_oid, callback) {
      var postBody = null;

      // verify the required parameter 'report_oid' is set
      if (report_oid === undefined || report_oid === null) {
        throw new Error("Missing the required parameter 'report_oid' when calling getReport");
      }


      var pathParams = {
        'report_oid': report_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReportResponse;

      return this.apiClient.callApi(
        '/datawarehouse/reports/{report_oid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportDataSet operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~getReportDataSetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ReportDataSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a report data set
     * Retrieve a report data set 
     * @param {String} dataset_uuid 
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~getReportDataSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ReportDataSetResponse}
     */
    this.getReportDataSet = function(dataset_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'dataset_uuid' is set
      if (dataset_uuid === undefined || dataset_uuid === null) {
        throw new Error("Missing the required parameter 'dataset_uuid' when calling getReportDataSet");
      }


      var pathParams = {
        'dataset_uuid': dataset_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReportDataSetResponse;

      return this.apiClient.callApi(
        '/datawarehouse/reports/dataset/{dataset_uuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportDataSetPage operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~getReportDataSetPageCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ReportDataSetPageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a report data set page
     * Retrieve a report data set page 
     * @param {String} dataset_uuid 
     * @param {Number} page_number 
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~getReportDataSetPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ReportDataSetPageResponse}
     */
    this.getReportDataSetPage = function(dataset_uuid, page_number, callback) {
      var postBody = null;

      // verify the required parameter 'dataset_uuid' is set
      if (dataset_uuid === undefined || dataset_uuid === null) {
        throw new Error("Missing the required parameter 'dataset_uuid' when calling getReportDataSetPage");
      }

      // verify the required parameter 'page_number' is set
      if (page_number === undefined || page_number === null) {
        throw new Error("Missing the required parameter 'page_number' when calling getReportDataSetPage");
      }


      var pathParams = {
        'dataset_uuid': dataset_uuid,
        'page_number': page_number
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReportDataSetPageResponse;

      return this.apiClient.callApi(
        '/datawarehouse/reports/dataset/{dataset_uuid}/pages/{page_number}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportWebsocketAuthorization operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~getReportWebsocketAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ReportAuthResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get report websocket authorization
     * Retrieve a JWT to authorize a report to make a websocket connection. 
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~getReportWebsocketAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ReportAuthResponse}
     */
    this.getReportWebsocketAuthorization = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReportAuthResponse;

      return this.apiClient.callApi(
        '/datawarehouse/reports/auth', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getReports operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~getReportsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ReportsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of reports available
     * Retrieve a list of reports available 
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~getReportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ReportsResponse}
     */
    this.getReports = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ReportsResponse;

      return this.apiClient.callApi(
        '/datawarehouse/reports', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertCustomDashboard operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~insertCustomDashboardCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomDashboardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a custom dashboard
     * Create a new custom dashboard on the UltraCart account. 
     * @param {module:com.ultracart.admin.v2.models/CustomDashboard} dashboard Dashboard to create
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~insertCustomDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomDashboardResponse}
     */
    this.insertCustomDashboard = function(dashboard, callback) {
      var postBody = dashboard;

      // verify the required parameter 'dashboard' is set
      if (dashboard === undefined || dashboard === null) {
        throw new Error("Missing the required parameter 'dashboard' when calling insertCustomDashboard");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json; charset=UTF-8'];
      var accepts = ['application/json'];
      var returnType = CustomDashboardResponse;

      return this.apiClient.callApi(
        '/datawarehouse/custom_dashboards', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertCustomDashboardSchedule operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~insertCustomDashboardScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomDashboardScheduleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a custom dashboard schedule
     * Create a new custom dashboard schedule on the UltraCart account. 
     * @param {Number} custom_dashboard_oid 
     * @param {module:com.ultracart.admin.v2.models/CustomDashboardSchedule} dashboard_schedule Dashboard schedule to create
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~insertCustomDashboardScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomDashboardScheduleResponse}
     */
    this.insertCustomDashboardSchedule = function(custom_dashboard_oid, dashboard_schedule, callback) {
      var postBody = dashboard_schedule;

      // verify the required parameter 'custom_dashboard_oid' is set
      if (custom_dashboard_oid === undefined || custom_dashboard_oid === null) {
        throw new Error("Missing the required parameter 'custom_dashboard_oid' when calling insertCustomDashboardSchedule");
      }

      // verify the required parameter 'dashboard_schedule' is set
      if (dashboard_schedule === undefined || dashboard_schedule === null) {
        throw new Error("Missing the required parameter 'dashboard_schedule' when calling insertCustomDashboardSchedule");
      }


      var pathParams = {
        'custom_dashboard_oid': custom_dashboard_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json; charset=UTF-8'];
      var accepts = ['application/json'];
      var returnType = CustomDashboardScheduleResponse;

      return this.apiClient.callApi(
        '/datawarehouse/custom_dashboards/{custom_dashboard_oid}/schedules', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertCustomReport operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~insertCustomReportCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a custom report
     * Create a new custom report on the UltraCart account. 
     * @param {module:com.ultracart.admin.v2.models/CustomReport} report Report to create
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~insertCustomReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomReportResponse}
     */
    this.insertCustomReport = function(report, callback) {
      var postBody = report;

      // verify the required parameter 'report' is set
      if (report === undefined || report === null) {
        throw new Error("Missing the required parameter 'report' when calling insertCustomReport");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json; charset=UTF-8'];
      var accepts = ['application/json'];
      var returnType = CustomReportResponse;

      return this.apiClient.callApi(
        '/datawarehouse/custom_reports', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertReport operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~insertReportCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a report
     * Create a new report on the UltraCart account. 
     * @param {module:com.ultracart.admin.v2.models/Report} report Report to create
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~insertReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ReportResponse}
     */
    this.insertReport = function(report, callback) {
      var postBody = report;

      // verify the required parameter 'report' is set
      if (report === undefined || report === null) {
        throw new Error("Missing the required parameter 'report' when calling insertReport");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json; charset=UTF-8'];
      var accepts = ['application/json'];
      var returnType = ReportResponse;

      return this.apiClient.callApi(
        '/datawarehouse/reports', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomDashboard operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~updateCustomDashboardCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomDashboardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a custom dashboard
     * Update a custom dashboard on the UltraCart account. 
     * @param {module:com.ultracart.admin.v2.models/CustomDashboard} dashboard Dashboard to custom update
     * @param {Number} custom_dashboard_oid The dashboard oid to custom update.
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~updateCustomDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomDashboardResponse}
     */
    this.updateCustomDashboard = function(dashboard, custom_dashboard_oid, callback) {
      var postBody = dashboard;

      // verify the required parameter 'dashboard' is set
      if (dashboard === undefined || dashboard === null) {
        throw new Error("Missing the required parameter 'dashboard' when calling updateCustomDashboard");
      }

      // verify the required parameter 'custom_dashboard_oid' is set
      if (custom_dashboard_oid === undefined || custom_dashboard_oid === null) {
        throw new Error("Missing the required parameter 'custom_dashboard_oid' when calling updateCustomDashboard");
      }


      var pathParams = {
        'custom_dashboard_oid': custom_dashboard_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json; charset=UTF-8'];
      var accepts = ['application/json'];
      var returnType = CustomDashboardResponse;

      return this.apiClient.callApi(
        '/datawarehouse/custom_dashboards/{custom_dashboard_oid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomDashboardSchedule operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~updateCustomDashboardScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomDashboardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a custom dashboard schedule
     * Update a custom dashboard schedule on the UltraCart account. 
     * @param {module:com.ultracart.admin.v2.models/CustomDashboardSchedule} dashboard_schedule Dashboard schedule to update
     * @param {Number} custom_dashboard_schedule_oid The dashboard schedule oid to update.
     * @param {Number} custom_dashboard_oid The dashboard oid to update.
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~updateCustomDashboardScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomDashboardResponse}
     */
    this.updateCustomDashboardSchedule = function(dashboard_schedule, custom_dashboard_schedule_oid, custom_dashboard_oid, callback) {
      var postBody = dashboard_schedule;

      // verify the required parameter 'dashboard_schedule' is set
      if (dashboard_schedule === undefined || dashboard_schedule === null) {
        throw new Error("Missing the required parameter 'dashboard_schedule' when calling updateCustomDashboardSchedule");
      }

      // verify the required parameter 'custom_dashboard_schedule_oid' is set
      if (custom_dashboard_schedule_oid === undefined || custom_dashboard_schedule_oid === null) {
        throw new Error("Missing the required parameter 'custom_dashboard_schedule_oid' when calling updateCustomDashboardSchedule");
      }

      // verify the required parameter 'custom_dashboard_oid' is set
      if (custom_dashboard_oid === undefined || custom_dashboard_oid === null) {
        throw new Error("Missing the required parameter 'custom_dashboard_oid' when calling updateCustomDashboardSchedule");
      }


      var pathParams = {
        'custom_dashboard_schedule_oid': custom_dashboard_schedule_oid,
        'custom_dashboard_oid': custom_dashboard_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json; charset=UTF-8'];
      var accepts = ['application/json'];
      var returnType = CustomDashboardResponse;

      return this.apiClient.callApi(
        '/datawarehouse/custom_dashboards/{custom_dashboard_oid}/schedules/{custom_dashboard_schedule_oid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomReport operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~updateCustomReportCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a custom report
     * Update a custom report on the UltraCart account. 
     * @param {module:com.ultracart.admin.v2.models/CustomReport} report Report to custom update
     * @param {Number} custom_report_oid The report oid to custom update.
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~updateCustomReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomReportResponse}
     */
    this.updateCustomReport = function(report, custom_report_oid, callback) {
      var postBody = report;

      // verify the required parameter 'report' is set
      if (report === undefined || report === null) {
        throw new Error("Missing the required parameter 'report' when calling updateCustomReport");
      }

      // verify the required parameter 'custom_report_oid' is set
      if (custom_report_oid === undefined || custom_report_oid === null) {
        throw new Error("Missing the required parameter 'custom_report_oid' when calling updateCustomReport");
      }


      var pathParams = {
        'custom_report_oid': custom_report_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json; charset=UTF-8'];
      var accepts = ['application/json'];
      var returnType = CustomReportResponse;

      return this.apiClient.callApi(
        '/datawarehouse/custom_reports/{custom_report_oid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomReportAccountConfig operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~updateCustomReportAccountConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomReportAccountConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update custom report account config
     * Update custom report account config. 
     * @param {module:com.ultracart.admin.v2.models/CustomReportAccountConfig} account_config Account config to update
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~updateCustomReportAccountConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomReportAccountConfigResponse}
     */
    this.updateCustomReportAccountConfig = function(account_config, callback) {
      var postBody = account_config;

      // verify the required parameter 'account_config' is set
      if (account_config === undefined || account_config === null) {
        throw new Error("Missing the required parameter 'account_config' when calling updateCustomReportAccountConfig");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json; charset=UTF-8'];
      var accepts = ['application/json'];
      var returnType = CustomReportAccountConfigResponse;

      return this.apiClient.callApi(
        '/datawarehouse/custom_reports/account_config', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReport operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~updateReportCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a report
     * Update a report on the UltraCart account. 
     * @param {module:com.ultracart.admin.v2.models/Report} report Report to update
     * @param {Number} report_oid The report oid to update.
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~updateReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ReportResponse}
     */
    this.updateReport = function(report, report_oid, callback) {
      var postBody = report;

      // verify the required parameter 'report' is set
      if (report === undefined || report === null) {
        throw new Error("Missing the required parameter 'report' when calling updateReport");
      }

      // verify the required parameter 'report_oid' is set
      if (report_oid === undefined || report_oid === null) {
        throw new Error("Missing the required parameter 'report_oid' when calling updateReport");
      }


      var pathParams = {
        'report_oid': report_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json; charset=UTF-8'];
      var accepts = ['application/json'];
      var returnType = ReportResponse;

      return this.apiClient.callApi(
        '/datawarehouse/reports/{report_oid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
