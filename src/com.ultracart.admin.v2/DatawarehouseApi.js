/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CustomDashboard from '../com.ultracart.admin.v2.models/CustomDashboard';
import CustomDashboardResponse from '../com.ultracart.admin.v2.models/CustomDashboardResponse';
import CustomDashboardSchedule from '../com.ultracart.admin.v2.models/CustomDashboardSchedule';
import CustomDashboardScheduleResponse from '../com.ultracart.admin.v2.models/CustomDashboardScheduleResponse';
import CustomDashboardSchedulesResponse from '../com.ultracart.admin.v2.models/CustomDashboardSchedulesResponse';
import CustomDashboardsResponse from '../com.ultracart.admin.v2.models/CustomDashboardsResponse';
import CustomReport from '../com.ultracart.admin.v2.models/CustomReport';
import CustomReportAccountConfig from '../com.ultracart.admin.v2.models/CustomReportAccountConfig';
import CustomReportAccountConfigResponse from '../com.ultracart.admin.v2.models/CustomReportAccountConfigResponse';
import CustomReportAnalysisRequest from '../com.ultracart.admin.v2.models/CustomReportAnalysisRequest';
import CustomReportAnalysisResponse from '../com.ultracart.admin.v2.models/CustomReportAnalysisResponse';
import CustomReportChartPngUploadResponse from '../com.ultracart.admin.v2.models/CustomReportChartPngUploadResponse';
import CustomReportExecutionRequest from '../com.ultracart.admin.v2.models/CustomReportExecutionRequest';
import CustomReportExecutionResponse from '../com.ultracart.admin.v2.models/CustomReportExecutionResponse';
import CustomReportResponse from '../com.ultracart.admin.v2.models/CustomReportResponse';
import CustomReportsExecutionRequest from '../com.ultracart.admin.v2.models/CustomReportsExecutionRequest';
import CustomReportsExecutionResponse from '../com.ultracart.admin.v2.models/CustomReportsExecutionResponse';
import CustomReportsResponse from '../com.ultracart.admin.v2.models/CustomReportsResponse';
import ErrorResponse from '../com.ultracart.admin.v2.models/ErrorResponse';
import Report from '../com.ultracart.admin.v2.models/Report';
import ReportAuthResponse from '../com.ultracart.admin.v2.models/ReportAuthResponse';
import ReportDataSetPageResponse from '../com.ultracart.admin.v2.models/ReportDataSetPageResponse';
import ReportDataSetResponse from '../com.ultracart.admin.v2.models/ReportDataSetResponse';
import ReportDryRunQueriesRequest from '../com.ultracart.admin.v2.models/ReportDryRunQueriesRequest';
import ReportDryRunQueriesResponse from '../com.ultracart.admin.v2.models/ReportDryRunQueriesResponse';
import ReportExecuteQueriesRequest from '../com.ultracart.admin.v2.models/ReportExecuteQueriesRequest';
import ReportResponse from '../com.ultracart.admin.v2.models/ReportResponse';
import ReportsResponse from '../com.ultracart.admin.v2.models/ReportsResponse';

/**
* Datawarehouse service.
* @module com.ultracart.admin.v2/DatawarehouseApi
* @version 4.1.26
*/
export default class DatawarehouseApi {

    /**
    * Constructs a new DatawarehouseApi. 
    * @alias module:com.ultracart.admin.v2/DatawarehouseApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the analyzeCustomReport operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~analyzeCustomReportCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomReportAnalysisResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Analyze a custom report
     * Analyze a custom report on the UltraCart account. 
     * @param {Number} custom_report_oid The report oid to analyze.
     * @param {module:com.ultracart.admin.v2.models/CustomReportAnalysisRequest} analyze_request Request to analyze custom report
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~analyzeCustomReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomReportAnalysisResponse}
     */
    analyzeCustomReport(custom_report_oid, analyze_request, callback) {
      let postBody = analyze_request;
      // verify the required parameter 'custom_report_oid' is set
      if (custom_report_oid === undefined || custom_report_oid === null) {
        throw new Error("Missing the required parameter 'custom_report_oid' when calling analyzeCustomReport");
      }
      // verify the required parameter 'analyze_request' is set
      if (analyze_request === undefined || analyze_request === null) {
        throw new Error("Missing the required parameter 'analyze_request' when calling analyzeCustomReport");
      }

      let pathParams = {
        'custom_report_oid': custom_report_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json; charset=UTF-8'];
      let accepts = ['application/json'];
      let returnType = CustomReportAnalysisResponse;
      return this.apiClient.callApi(
        '/datawarehouse/custom_reports/{custom_report_oid}/analysis', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomDashboard operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~deleteCustomDashboardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a custom dashboard
     * Delete a custom dashboard on the UltraCart account. 
     * @param {Number} custom_dashboard_oid The dashboard oid to delete.
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~deleteCustomDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCustomDashboard(custom_dashboard_oid, callback) {
      let postBody = null;
      // verify the required parameter 'custom_dashboard_oid' is set
      if (custom_dashboard_oid === undefined || custom_dashboard_oid === null) {
        throw new Error("Missing the required parameter 'custom_dashboard_oid' when calling deleteCustomDashboard");
      }

      let pathParams = {
        'custom_dashboard_oid': custom_dashboard_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/datawarehouse/custom_dashboards/{custom_dashboard_oid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomDashboardSchedule operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~deleteCustomDashboardScheduleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a custom dashboard schedule
     * delete a custom dashboard schedule on the UltraCart account. 
     * @param {Number} custom_dashboard_schedule_oid The dashboard schedule oid to delete.
     * @param {Number} custom_dashboard_oid The dashboard oid that owns the schedule.
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~deleteCustomDashboardScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCustomDashboardSchedule(custom_dashboard_schedule_oid, custom_dashboard_oid, callback) {
      let postBody = null;
      // verify the required parameter 'custom_dashboard_schedule_oid' is set
      if (custom_dashboard_schedule_oid === undefined || custom_dashboard_schedule_oid === null) {
        throw new Error("Missing the required parameter 'custom_dashboard_schedule_oid' when calling deleteCustomDashboardSchedule");
      }
      // verify the required parameter 'custom_dashboard_oid' is set
      if (custom_dashboard_oid === undefined || custom_dashboard_oid === null) {
        throw new Error("Missing the required parameter 'custom_dashboard_oid' when calling deleteCustomDashboardSchedule");
      }

      let pathParams = {
        'custom_dashboard_schedule_oid': custom_dashboard_schedule_oid,
        'custom_dashboard_oid': custom_dashboard_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/datawarehouse/custom_dashboards/{custom_dashboard_oid}/schedules/{custom_dashboard_schedule_oid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCustomReport operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~deleteCustomReportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a custom report
     * Delete a custom report on the UltraCart account. 
     * @param {Number} custom_report_oid The report oid to delete.
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~deleteCustomReportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCustomReport(custom_report_oid, callback) {
      let postBody = null;
      // verify the required parameter 'custom_report_oid' is set
      if (custom_report_oid === undefined || custom_report_oid === null) {
        throw new Error("Missing the required parameter 'custom_report_oid' when calling deleteCustomReport");
      }

      let pathParams = {
        'custom_report_oid': custom_report_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/datawarehouse/custom_reports/{custom_report_oid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReport operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~deleteReportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a report
     * Delete a report on the UltraCart account. 
     * @param {Number} report_oid The report oid to delete.
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~deleteReportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteReport(report_oid, callback) {
      let postBody = null;
      // verify the required parameter 'report_oid' is set
      if (report_oid === undefined || report_oid === null) {
        throw new Error("Missing the required parameter 'report_oid' when calling deleteReport");
      }

      let pathParams = {
        'report_oid': report_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/datawarehouse/reports/{report_oid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dryRunReportQueries operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~dryRunReportQueriesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ReportDryRunQueriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dry run the report queries
     * Dry run the report queries 
     * @param {module:com.ultracart.admin.v2.models/ReportDryRunQueriesRequest} query_request Dry run request
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~dryRunReportQueriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ReportDryRunQueriesResponse}
     */
    dryRunReportQueries(query_request, callback) {
      let postBody = query_request;
      // verify the required parameter 'query_request' is set
      if (query_request === undefined || query_request === null) {
        throw new Error("Missing the required parameter 'query_request' when calling dryRunReportQueries");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReportDryRunQueriesResponse;
      return this.apiClient.callApi(
        '/datawarehouse/reports/dryrun', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the executeCustomReport operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~executeCustomReportCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomReportExecutionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute a custom report
     * Execute a custom report on the UltraCart account. 
     * @param {Number} custom_report_oid The report oid to execute.
     * @param {module:com.ultracart.admin.v2.models/CustomReportExecutionRequest} execution_request Request to execute custom report
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~executeCustomReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomReportExecutionResponse}
     */
    executeCustomReport(custom_report_oid, execution_request, callback) {
      let postBody = execution_request;
      // verify the required parameter 'custom_report_oid' is set
      if (custom_report_oid === undefined || custom_report_oid === null) {
        throw new Error("Missing the required parameter 'custom_report_oid' when calling executeCustomReport");
      }
      // verify the required parameter 'execution_request' is set
      if (execution_request === undefined || execution_request === null) {
        throw new Error("Missing the required parameter 'execution_request' when calling executeCustomReport");
      }

      let pathParams = {
        'custom_report_oid': custom_report_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json; charset=UTF-8'];
      let accepts = ['application/json'];
      let returnType = CustomReportExecutionResponse;
      return this.apiClient.callApi(
        '/datawarehouse/custom_reports/{custom_report_oid}/execute', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the executeCustomReports operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~executeCustomReportsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomReportsExecutionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute a custom reports
     * Execute a custom reports on the UltraCart account. 
     * @param {module:com.ultracart.admin.v2.models/CustomReportsExecutionRequest} execution_request Request to execute custom reports
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~executeCustomReportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomReportsExecutionResponse}
     */
    executeCustomReports(execution_request, callback) {
      let postBody = execution_request;
      // verify the required parameter 'execution_request' is set
      if (execution_request === undefined || execution_request === null) {
        throw new Error("Missing the required parameter 'execution_request' when calling executeCustomReports");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json; charset=UTF-8'];
      let accepts = ['application/json'];
      let returnType = CustomReportsExecutionResponse;
      return this.apiClient.callApi(
        '/datawarehouse/custom_reports/execute', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the executeReportQueries operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~executeReportQueriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute the report queries
     * Execute the report queries 
     * @param {module:com.ultracart.admin.v2.models/ReportExecuteQueriesRequest} query_request Query request
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~executeReportQueriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    executeReportQueries(query_request, callback) {
      let postBody = query_request;
      // verify the required parameter 'query_request' is set
      if (query_request === undefined || query_request === null) {
        throw new Error("Missing the required parameter 'query_request' when calling executeReportQueries");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/datawarehouse/reports/execute', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomDashboard operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~getCustomDashboardCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomDashboardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a custom dashboard
     * Retrieve a custom dashboard 
     * @param {Number} custom_dashboard_oid 
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~getCustomDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomDashboardResponse}
     */
    getCustomDashboard(custom_dashboard_oid, callback) {
      let postBody = null;
      // verify the required parameter 'custom_dashboard_oid' is set
      if (custom_dashboard_oid === undefined || custom_dashboard_oid === null) {
        throw new Error("Missing the required parameter 'custom_dashboard_oid' when calling getCustomDashboard");
      }

      let pathParams = {
        'custom_dashboard_oid': custom_dashboard_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomDashboardResponse;
      return this.apiClient.callApi(
        '/datawarehouse/custom_dashboards/{custom_dashboard_oid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomDashboardSchedules operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~getCustomDashboardSchedulesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomDashboardSchedulesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get custom dashboards
     * Retrieve a custom dashboards 
     * @param {Number} custom_dashboard_oid 
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~getCustomDashboardSchedulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomDashboardSchedulesResponse}
     */
    getCustomDashboardSchedules(custom_dashboard_oid, callback) {
      let postBody = null;
      // verify the required parameter 'custom_dashboard_oid' is set
      if (custom_dashboard_oid === undefined || custom_dashboard_oid === null) {
        throw new Error("Missing the required parameter 'custom_dashboard_oid' when calling getCustomDashboardSchedules");
      }

      let pathParams = {
        'custom_dashboard_oid': custom_dashboard_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomDashboardSchedulesResponse;
      return this.apiClient.callApi(
        '/datawarehouse/custom_dashboards/{custom_dashboard_oid}/schedules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomDashboards operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~getCustomDashboardsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomDashboardsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get custom dashboards
     * Retrieve a custom dashboards 
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~getCustomDashboardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomDashboardsResponse}
     */
    getCustomDashboards(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomDashboardsResponse;
      return this.apiClient.callApi(
        '/datawarehouse/custom_dashboards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomReport operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~getCustomReportCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a custom report
     * Retrieve a custom report 
     * @param {Number} custom_report_oid 
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~getCustomReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomReportResponse}
     */
    getCustomReport(custom_report_oid, callback) {
      let postBody = null;
      // verify the required parameter 'custom_report_oid' is set
      if (custom_report_oid === undefined || custom_report_oid === null) {
        throw new Error("Missing the required parameter 'custom_report_oid' when calling getCustomReport");
      }

      let pathParams = {
        'custom_report_oid': custom_report_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomReportResponse;
      return this.apiClient.callApi(
        '/datawarehouse/custom_reports/{custom_report_oid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomReportAccountConfig operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~getCustomReportAccountConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomReportAccountConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get custom report account configuration
     * Retrieve a custom report account configuration 
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~getCustomReportAccountConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomReportAccountConfigResponse}
     */
    getCustomReportAccountConfig(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomReportAccountConfigResponse;
      return this.apiClient.callApi(
        '/datawarehouse/custom_reports/account_config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomReportChartPngUploadUrl operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~getCustomReportChartPngUploadUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomReportChartPngUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a PNG of a custom report chart
     * Upload a PNG of a custom report chart 
     * @param {Number} custom_report_oid The report oid to upload a chart PNG for.
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~getCustomReportChartPngUploadUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomReportChartPngUploadResponse}
     */
    getCustomReportChartPngUploadUrl(custom_report_oid, callback) {
      let postBody = null;
      // verify the required parameter 'custom_report_oid' is set
      if (custom_report_oid === undefined || custom_report_oid === null) {
        throw new Error("Missing the required parameter 'custom_report_oid' when calling getCustomReportChartPngUploadUrl");
      }

      let pathParams = {
        'custom_report_oid': custom_report_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomReportChartPngUploadResponse;
      return this.apiClient.callApi(
        '/datawarehouse/custom_reports/{custom_report_oid}/chart_png', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomReports operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~getCustomReportsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomReportsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get custom reports
     * Retrieve a custom reports 
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~getCustomReportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomReportsResponse}
     */
    getCustomReports(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomReportsResponse;
      return this.apiClient.callApi(
        '/datawarehouse/custom_reports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReport operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~getReportCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a report
     * Retrieve a report 
     * @param {Number} report_oid 
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~getReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ReportResponse}
     */
    getReport(report_oid, callback) {
      let postBody = null;
      // verify the required parameter 'report_oid' is set
      if (report_oid === undefined || report_oid === null) {
        throw new Error("Missing the required parameter 'report_oid' when calling getReport");
      }

      let pathParams = {
        'report_oid': report_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportResponse;
      return this.apiClient.callApi(
        '/datawarehouse/reports/{report_oid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportDataSet operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~getReportDataSetCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ReportDataSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a report data set
     * Retrieve a report data set 
     * @param {String} dataset_uuid 
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~getReportDataSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ReportDataSetResponse}
     */
    getReportDataSet(dataset_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'dataset_uuid' is set
      if (dataset_uuid === undefined || dataset_uuid === null) {
        throw new Error("Missing the required parameter 'dataset_uuid' when calling getReportDataSet");
      }

      let pathParams = {
        'dataset_uuid': dataset_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportDataSetResponse;
      return this.apiClient.callApi(
        '/datawarehouse/reports/dataset/{dataset_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportDataSetPage operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~getReportDataSetPageCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ReportDataSetPageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a report data set page
     * Retrieve a report data set page 
     * @param {String} dataset_uuid 
     * @param {Number} page_number 
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~getReportDataSetPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ReportDataSetPageResponse}
     */
    getReportDataSetPage(dataset_uuid, page_number, callback) {
      let postBody = null;
      // verify the required parameter 'dataset_uuid' is set
      if (dataset_uuid === undefined || dataset_uuid === null) {
        throw new Error("Missing the required parameter 'dataset_uuid' when calling getReportDataSetPage");
      }
      // verify the required parameter 'page_number' is set
      if (page_number === undefined || page_number === null) {
        throw new Error("Missing the required parameter 'page_number' when calling getReportDataSetPage");
      }

      let pathParams = {
        'dataset_uuid': dataset_uuid,
        'page_number': page_number
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportDataSetPageResponse;
      return this.apiClient.callApi(
        '/datawarehouse/reports/dataset/{dataset_uuid}/pages/{page_number}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReportWebsocketAuthorization operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~getReportWebsocketAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ReportAuthResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get report websocket authorization
     * Retrieve a JWT to authorize a report to make a websocket connection. 
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~getReportWebsocketAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ReportAuthResponse}
     */
    getReportWebsocketAuthorization(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportAuthResponse;
      return this.apiClient.callApi(
        '/datawarehouse/reports/auth', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReports operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~getReportsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ReportsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of reports available
     * Retrieve a list of reports available 
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~getReportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ReportsResponse}
     */
    getReports(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportsResponse;
      return this.apiClient.callApi(
        '/datawarehouse/reports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertCustomDashboard operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~insertCustomDashboardCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomDashboardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a custom dashboard
     * Create a new custom dashboard on the UltraCart account. 
     * @param {module:com.ultracart.admin.v2.models/CustomDashboard} dashboard Dashboard to create
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~insertCustomDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomDashboardResponse}
     */
    insertCustomDashboard(dashboard, callback) {
      let postBody = dashboard;
      // verify the required parameter 'dashboard' is set
      if (dashboard === undefined || dashboard === null) {
        throw new Error("Missing the required parameter 'dashboard' when calling insertCustomDashboard");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json; charset=UTF-8'];
      let accepts = ['application/json'];
      let returnType = CustomDashboardResponse;
      return this.apiClient.callApi(
        '/datawarehouse/custom_dashboards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertCustomDashboardSchedule operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~insertCustomDashboardScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomDashboardScheduleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a custom dashboard schedule
     * Create a new custom dashboard schedule on the UltraCart account. 
     * @param {Number} custom_dashboard_oid 
     * @param {module:com.ultracart.admin.v2.models/CustomDashboardSchedule} dashboard_schedule Dashboard schedule to create
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~insertCustomDashboardScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomDashboardScheduleResponse}
     */
    insertCustomDashboardSchedule(custom_dashboard_oid, dashboard_schedule, callback) {
      let postBody = dashboard_schedule;
      // verify the required parameter 'custom_dashboard_oid' is set
      if (custom_dashboard_oid === undefined || custom_dashboard_oid === null) {
        throw new Error("Missing the required parameter 'custom_dashboard_oid' when calling insertCustomDashboardSchedule");
      }
      // verify the required parameter 'dashboard_schedule' is set
      if (dashboard_schedule === undefined || dashboard_schedule === null) {
        throw new Error("Missing the required parameter 'dashboard_schedule' when calling insertCustomDashboardSchedule");
      }

      let pathParams = {
        'custom_dashboard_oid': custom_dashboard_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json; charset=UTF-8'];
      let accepts = ['application/json'];
      let returnType = CustomDashboardScheduleResponse;
      return this.apiClient.callApi(
        '/datawarehouse/custom_dashboards/{custom_dashboard_oid}/schedules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertCustomReport operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~insertCustomReportCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a custom report
     * Create a new custom report on the UltraCart account. 
     * @param {module:com.ultracart.admin.v2.models/CustomReport} report Report to create
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~insertCustomReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomReportResponse}
     */
    insertCustomReport(report, callback) {
      let postBody = report;
      // verify the required parameter 'report' is set
      if (report === undefined || report === null) {
        throw new Error("Missing the required parameter 'report' when calling insertCustomReport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json; charset=UTF-8'];
      let accepts = ['application/json'];
      let returnType = CustomReportResponse;
      return this.apiClient.callApi(
        '/datawarehouse/custom_reports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertReport operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~insertReportCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a report
     * Create a new report on the UltraCart account. 
     * @param {module:com.ultracart.admin.v2.models/Report} report Report to create
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~insertReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ReportResponse}
     */
    insertReport(report, callback) {
      let postBody = report;
      // verify the required parameter 'report' is set
      if (report === undefined || report === null) {
        throw new Error("Missing the required parameter 'report' when calling insertReport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json; charset=UTF-8'];
      let accepts = ['application/json'];
      let returnType = ReportResponse;
      return this.apiClient.callApi(
        '/datawarehouse/reports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomDashboard operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~updateCustomDashboardCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomDashboardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a custom dashboard
     * Update a custom dashboard on the UltraCart account. 
     * @param {Number} custom_dashboard_oid The dashboard oid to custom update.
     * @param {module:com.ultracart.admin.v2.models/CustomDashboard} dashboard Dashboard to custom update
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~updateCustomDashboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomDashboardResponse}
     */
    updateCustomDashboard(custom_dashboard_oid, dashboard, callback) {
      let postBody = dashboard;
      // verify the required parameter 'custom_dashboard_oid' is set
      if (custom_dashboard_oid === undefined || custom_dashboard_oid === null) {
        throw new Error("Missing the required parameter 'custom_dashboard_oid' when calling updateCustomDashboard");
      }
      // verify the required parameter 'dashboard' is set
      if (dashboard === undefined || dashboard === null) {
        throw new Error("Missing the required parameter 'dashboard' when calling updateCustomDashboard");
      }

      let pathParams = {
        'custom_dashboard_oid': custom_dashboard_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json; charset=UTF-8'];
      let accepts = ['application/json'];
      let returnType = CustomDashboardResponse;
      return this.apiClient.callApi(
        '/datawarehouse/custom_dashboards/{custom_dashboard_oid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomDashboardSchedule operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~updateCustomDashboardScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomDashboardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a custom dashboard schedule
     * Update a custom dashboard schedule on the UltraCart account. 
     * @param {Number} custom_dashboard_schedule_oid The dashboard schedule oid to update.
     * @param {Number} custom_dashboard_oid The dashboard oid to update.
     * @param {module:com.ultracart.admin.v2.models/CustomDashboardSchedule} dashboard_schedule Dashboard schedule to update
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~updateCustomDashboardScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomDashboardResponse}
     */
    updateCustomDashboardSchedule(custom_dashboard_schedule_oid, custom_dashboard_oid, dashboard_schedule, callback) {
      let postBody = dashboard_schedule;
      // verify the required parameter 'custom_dashboard_schedule_oid' is set
      if (custom_dashboard_schedule_oid === undefined || custom_dashboard_schedule_oid === null) {
        throw new Error("Missing the required parameter 'custom_dashboard_schedule_oid' when calling updateCustomDashboardSchedule");
      }
      // verify the required parameter 'custom_dashboard_oid' is set
      if (custom_dashboard_oid === undefined || custom_dashboard_oid === null) {
        throw new Error("Missing the required parameter 'custom_dashboard_oid' when calling updateCustomDashboardSchedule");
      }
      // verify the required parameter 'dashboard_schedule' is set
      if (dashboard_schedule === undefined || dashboard_schedule === null) {
        throw new Error("Missing the required parameter 'dashboard_schedule' when calling updateCustomDashboardSchedule");
      }

      let pathParams = {
        'custom_dashboard_schedule_oid': custom_dashboard_schedule_oid,
        'custom_dashboard_oid': custom_dashboard_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json; charset=UTF-8'];
      let accepts = ['application/json'];
      let returnType = CustomDashboardResponse;
      return this.apiClient.callApi(
        '/datawarehouse/custom_dashboards/{custom_dashboard_oid}/schedules/{custom_dashboard_schedule_oid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomReport operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~updateCustomReportCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a custom report
     * Update a custom report on the UltraCart account. 
     * @param {Number} custom_report_oid The report oid to custom update.
     * @param {module:com.ultracart.admin.v2.models/CustomReport} report Report to custom update
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~updateCustomReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomReportResponse}
     */
    updateCustomReport(custom_report_oid, report, callback) {
      let postBody = report;
      // verify the required parameter 'custom_report_oid' is set
      if (custom_report_oid === undefined || custom_report_oid === null) {
        throw new Error("Missing the required parameter 'custom_report_oid' when calling updateCustomReport");
      }
      // verify the required parameter 'report' is set
      if (report === undefined || report === null) {
        throw new Error("Missing the required parameter 'report' when calling updateCustomReport");
      }

      let pathParams = {
        'custom_report_oid': custom_report_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json; charset=UTF-8'];
      let accepts = ['application/json'];
      let returnType = CustomReportResponse;
      return this.apiClient.callApi(
        '/datawarehouse/custom_reports/{custom_report_oid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomReportAccountConfig operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~updateCustomReportAccountConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CustomReportAccountConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update custom report account config
     * Update custom report account config. 
     * @param {module:com.ultracart.admin.v2.models/CustomReportAccountConfig} account_config Account config to update
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~updateCustomReportAccountConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CustomReportAccountConfigResponse}
     */
    updateCustomReportAccountConfig(account_config, callback) {
      let postBody = account_config;
      // verify the required parameter 'account_config' is set
      if (account_config === undefined || account_config === null) {
        throw new Error("Missing the required parameter 'account_config' when calling updateCustomReportAccountConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json; charset=UTF-8'];
      let accepts = ['application/json'];
      let returnType = CustomReportAccountConfigResponse;
      return this.apiClient.callApi(
        '/datawarehouse/custom_reports/account_config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReport operation.
     * @callback module:com.ultracart.admin.v2/DatawarehouseApi~updateReportCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a report
     * Update a report on the UltraCart account. 
     * @param {Number} report_oid The report oid to update.
     * @param {module:com.ultracart.admin.v2.models/Report} report Report to update
     * @param {module:com.ultracart.admin.v2/DatawarehouseApi~updateReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ReportResponse}
     */
    updateReport(report_oid, report, callback) {
      let postBody = report;
      // verify the required parameter 'report_oid' is set
      if (report_oid === undefined || report_oid === null) {
        throw new Error("Missing the required parameter 'report_oid' when calling updateReport");
      }
      // verify the required parameter 'report' is set
      if (report === undefined || report === null) {
        throw new Error("Missing the required parameter 'report' when calling updateReport");
      }

      let pathParams = {
        'report_oid': report_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json; charset=UTF-8'];
      let accepts = ['application/json'];
      let returnType = ReportResponse;
      return this.apiClient.callApi(
        '/datawarehouse/reports/{report_oid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
