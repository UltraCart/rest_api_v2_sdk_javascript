/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'com.ultracart.admin.v2.models/ErrorResponse', 'com.ultracart.admin.v2.models/ModelString', 'com.ultracart.admin.v2.models/TaxCity', 'com.ultracart.admin.v2.models/TaxCountry', 'com.ultracart.admin.v2.models/TaxCounty', 'com.ultracart.admin.v2.models/TaxPostalCode', 'com.ultracart.admin.v2.models/TaxProviderAvalara', 'com.ultracart.admin.v2.models/TaxProviderSelf', 'com.ultracart.admin.v2.models/TaxProviderTaxJar', 'com.ultracart.admin.v2.models/TaxProviderUltraCart', 'com.ultracart.admin.v2.models/TaxProvidersResponse', 'com.ultracart.admin.v2.models/TaxState'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../com.ultracart.admin.v2.models/ErrorResponse'), require('../com.ultracart.admin.v2.models/ModelString'), require('../com.ultracart.admin.v2.models/TaxCity'), require('../com.ultracart.admin.v2.models/TaxCountry'), require('../com.ultracart.admin.v2.models/TaxCounty'), require('../com.ultracart.admin.v2.models/TaxPostalCode'), require('../com.ultracart.admin.v2.models/TaxProviderAvalara'), require('../com.ultracart.admin.v2.models/TaxProviderSelf'), require('../com.ultracart.admin.v2.models/TaxProviderTaxJar'), require('../com.ultracart.admin.v2.models/TaxProviderUltraCart'), require('../com.ultracart.admin.v2.models/TaxProvidersResponse'), require('../com.ultracart.admin.v2.models/TaxState'));
  } else {
    // Browser globals (root is window)
    if (!root.UltraCartRestApiV2) {
      root.UltraCartRestApiV2 = {};
    }
    root.UltraCartRestApiV2.TaxApi = factory(root.UltraCartRestApiV2.ApiClient, root.UltraCartRestApiV2.ErrorResponse, root.UltraCartRestApiV2.ModelString, root.UltraCartRestApiV2.TaxCity, root.UltraCartRestApiV2.TaxCountry, root.UltraCartRestApiV2.TaxCounty, root.UltraCartRestApiV2.TaxPostalCode, root.UltraCartRestApiV2.TaxProviderAvalara, root.UltraCartRestApiV2.TaxProviderSelf, root.UltraCartRestApiV2.TaxProviderTaxJar, root.UltraCartRestApiV2.TaxProviderUltraCart, root.UltraCartRestApiV2.TaxProvidersResponse, root.UltraCartRestApiV2.TaxState);
  }
}(this, function(ApiClient, ErrorResponse, ModelString, TaxCity, TaxCountry, TaxCounty, TaxPostalCode, TaxProviderAvalara, TaxProviderSelf, TaxProviderTaxJar, TaxProviderUltraCart, TaxProvidersResponse, TaxState) {
  'use strict';

  /**
   * Tax service.
   * @module com.ultracart.admin.v2/TaxApi
   * @version 2.3.0
   */

  /**
   * Constructs a new TaxApi. 
   * @alias module:com.ultracart.admin.v2/TaxApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getTaxProviderAvalara operation.
     * @callback module:com.ultracart.admin.v2/TaxApi~getTaxProviderAvalaraCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/TaxProviderAvalara} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the Avalara tax provider
     * Retrieves the Avalara tax provider. 
     * @param {module:com.ultracart.admin.v2/TaxApi~getTaxProviderAvalaraCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/TaxProviderAvalara}
     */
    this.getTaxProviderAvalara = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaxProviderAvalara;

      return this.apiClient.callApi(
        '/tax/providers/avalara', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxProviderSelf operation.
     * @callback module:com.ultracart.admin.v2/TaxApi~getTaxProviderSelfCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/TaxProviderSelf} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the Self tax provider
     * Retrieves the Self tax provider. 
     * @param {module:com.ultracart.admin.v2/TaxApi~getTaxProviderSelfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/TaxProviderSelf}
     */
    this.getTaxProviderSelf = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaxProviderSelf;

      return this.apiClient.callApi(
        '/tax/providers/self', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxProviderSelfRegionsByCountryCode operation.
     * @callback module:com.ultracart.admin.v2/TaxApi~getTaxProviderSelfRegionsByCountryCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ModelString} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the Self tax provider regions for a given country code
     * Retrieves the Self tax provider regions for a given country code. 
     * @param {String} countryCode The country code regions desired.
     * @param {module:com.ultracart.admin.v2/TaxApi~getTaxProviderSelfRegionsByCountryCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ModelString}
     */
    this.getTaxProviderSelfRegionsByCountryCode = function(countryCode, callback) {
      var postBody = null;

      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling getTaxProviderSelfRegionsByCountryCode");
      }


      var pathParams = {
        'countryCode': countryCode
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModelString;

      return this.apiClient.callApi(
        '/tax/providers/self/regions/{countryCode}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxProviderTaxJar operation.
     * @callback module:com.ultracart.admin.v2/TaxApi~getTaxProviderTaxJarCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/TaxProviderTaxJar} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the TaxJar tax provider
     * Retrieves the TaxJar tax provider. 
     * @param {module:com.ultracart.admin.v2/TaxApi~getTaxProviderTaxJarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/TaxProviderTaxJar}
     */
    this.getTaxProviderTaxJar = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaxProviderTaxJar;

      return this.apiClient.callApi(
        '/tax/providers/taxjar', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxProviderUltraCart operation.
     * @callback module:com.ultracart.admin.v2/TaxApi~getTaxProviderUltraCartCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/TaxProviderUltraCart} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the UltraCart tax provider
     * Retrieves the UltraCart tax provider. 
     * @param {module:com.ultracart.admin.v2/TaxApi~getTaxProviderUltraCartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/TaxProviderUltraCart}
     */
    this.getTaxProviderUltraCart = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaxProviderUltraCart;

      return this.apiClient.callApi(
        '/tax/providers/ultracart', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaxProviders operation.
     * @callback module:com.ultracart.admin.v2/TaxApi~getTaxProvidersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/TaxProvidersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve tax methods
     * Retrieves tax methods for this account. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of records to return on this one API call. (Max 200) (default to 100)
     * @param {Number} opts.offset Pagination of the record set.  Offset is a zero based index. (default to 0)
     * @param {String} opts.expand The object expansion to perform on the result.  See documentation for examples
     * @param {module:com.ultracart.admin.v2/TaxApi~getTaxProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/TaxProvidersResponse}
     */
    this.getTaxProviders = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        '_limit': opts['limit'],
        '_offset': opts['offset'],
        '_expand': opts['expand'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaxProvidersResponse;

      return this.apiClient.callApi(
        '/tax/providers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaxProviderAvalara operation.
     * @callback module:com.ultracart.admin.v2/TaxApi~updateTaxProviderAvalaraCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/TaxProviderAvalara} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the Avalara tax provider
     * Update the Avalara tax provider. 
     * @param {module:com.ultracart.admin.v2.models/TaxProviderAvalara} taxProviderAvalara TaxProviderAvalara object
     * @param {module:com.ultracart.admin.v2/TaxApi~updateTaxProviderAvalaraCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/TaxProviderAvalara}
     */
    this.updateTaxProviderAvalara = function(taxProviderAvalara, callback) {
      var postBody = taxProviderAvalara;

      // verify the required parameter 'taxProviderAvalara' is set
      if (taxProviderAvalara === undefined || taxProviderAvalara === null) {
        throw new Error("Missing the required parameter 'taxProviderAvalara' when calling updateTaxProviderAvalara");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaxProviderAvalara;

      return this.apiClient.callApi(
        '/tax/providers/avalara', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaxProviderSelf operation.
     * @callback module:com.ultracart.admin.v2/TaxApi~updateTaxProviderSelfCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/TaxProviderSelf} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the Self tax provider
     * Update the Self tax provider. 
     * @param {module:com.ultracart.admin.v2.models/TaxProviderSelf} taxProviderSelf TaxProviderSelf object
     * @param {module:com.ultracart.admin.v2/TaxApi~updateTaxProviderSelfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/TaxProviderSelf}
     */
    this.updateTaxProviderSelf = function(taxProviderSelf, callback) {
      var postBody = taxProviderSelf;

      // verify the required parameter 'taxProviderSelf' is set
      if (taxProviderSelf === undefined || taxProviderSelf === null) {
        throw new Error("Missing the required parameter 'taxProviderSelf' when calling updateTaxProviderSelf");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaxProviderSelf;

      return this.apiClient.callApi(
        '/tax/providers/self', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaxProviderSelfCity operation.
     * @callback module:com.ultracart.admin.v2/TaxApi~updateTaxProviderSelfCityCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/TaxCity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Self tax provider city
     * Updates a Self tax provider city. 
     * @param {String} city The city being updated.
     * @param {module:com.ultracart.admin.v2.models/TaxCity} taxCity tax city to be updated
     * @param {module:com.ultracart.admin.v2/TaxApi~updateTaxProviderSelfCityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/TaxCity}
     */
    this.updateTaxProviderSelfCity = function(city, taxCity, callback) {
      var postBody = taxCity;

      // verify the required parameter 'city' is set
      if (city === undefined || city === null) {
        throw new Error("Missing the required parameter 'city' when calling updateTaxProviderSelfCity");
      }

      // verify the required parameter 'taxCity' is set
      if (taxCity === undefined || taxCity === null) {
        throw new Error("Missing the required parameter 'taxCity' when calling updateTaxProviderSelfCity");
      }


      var pathParams = {
        'city': city
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaxCity;

      return this.apiClient.callApi(
        '/tax/providers/self/city/{city}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaxProviderSelfCountry operation.
     * @callback module:com.ultracart.admin.v2/TaxApi~updateTaxProviderSelfCountryCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/TaxCountry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Self tax provider country
     * Updates a Self tax provider country. 
     * @param {String} countryCode The country code being updated.
     * @param {module:com.ultracart.admin.v2.models/TaxCountry} taxCountry tax country to be updated
     * @param {module:com.ultracart.admin.v2/TaxApi~updateTaxProviderSelfCountryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/TaxCountry}
     */
    this.updateTaxProviderSelfCountry = function(countryCode, taxCountry, callback) {
      var postBody = taxCountry;

      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling updateTaxProviderSelfCountry");
      }

      // verify the required parameter 'taxCountry' is set
      if (taxCountry === undefined || taxCountry === null) {
        throw new Error("Missing the required parameter 'taxCountry' when calling updateTaxProviderSelfCountry");
      }


      var pathParams = {
        'countryCode': countryCode
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaxCountry;

      return this.apiClient.callApi(
        '/tax/providers/self/country/{countryCode}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaxProviderSelfCounty operation.
     * @callback module:com.ultracart.admin.v2/TaxApi~updateTaxProviderSelfCountyCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/TaxCounty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Self tax provider county
     * Updates a Self tax provider county. 
     * @param {String} county The county being updated.
     * @param {module:com.ultracart.admin.v2.models/TaxCounty} taxCounty tax county to be updated
     * @param {module:com.ultracart.admin.v2/TaxApi~updateTaxProviderSelfCountyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/TaxCounty}
     */
    this.updateTaxProviderSelfCounty = function(county, taxCounty, callback) {
      var postBody = taxCounty;

      // verify the required parameter 'county' is set
      if (county === undefined || county === null) {
        throw new Error("Missing the required parameter 'county' when calling updateTaxProviderSelfCounty");
      }

      // verify the required parameter 'taxCounty' is set
      if (taxCounty === undefined || taxCounty === null) {
        throw new Error("Missing the required parameter 'taxCounty' when calling updateTaxProviderSelfCounty");
      }


      var pathParams = {
        'county': county
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaxCounty;

      return this.apiClient.callApi(
        '/tax/providers/self/county/{county}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaxProviderSelfPostalCode operation.
     * @callback module:com.ultracart.admin.v2/TaxApi~updateTaxProviderSelfPostalCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/TaxPostalCode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Self tax provider postalCode
     * Updates a Self tax provider postalCode. 
     * @param {String} postalCode The postal code being updated.
     * @param {module:com.ultracart.admin.v2.models/TaxPostalCode} taxPostalCode tax postal code to be updated
     * @param {module:com.ultracart.admin.v2/TaxApi~updateTaxProviderSelfPostalCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/TaxPostalCode}
     */
    this.updateTaxProviderSelfPostalCode = function(postalCode, taxPostalCode, callback) {
      var postBody = taxPostalCode;

      // verify the required parameter 'postalCode' is set
      if (postalCode === undefined || postalCode === null) {
        throw new Error("Missing the required parameter 'postalCode' when calling updateTaxProviderSelfPostalCode");
      }

      // verify the required parameter 'taxPostalCode' is set
      if (taxPostalCode === undefined || taxPostalCode === null) {
        throw new Error("Missing the required parameter 'taxPostalCode' when calling updateTaxProviderSelfPostalCode");
      }


      var pathParams = {
        'postal_code': postalCode
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaxPostalCode;

      return this.apiClient.callApi(
        '/tax/providers/self/postalCode/{postal_code}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaxProviderSelfState operation.
     * @callback module:com.ultracart.admin.v2/TaxApi~updateTaxProviderSelfStateCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/TaxState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Self tax provider state
     * Updates a Self tax provider state. 
     * @param {String} stateCode The state code being updated.
     * @param {module:com.ultracart.admin.v2.models/TaxState} taxState tax state to be updated
     * @param {module:com.ultracart.admin.v2/TaxApi~updateTaxProviderSelfStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/TaxState}
     */
    this.updateTaxProviderSelfState = function(stateCode, taxState, callback) {
      var postBody = taxState;

      // verify the required parameter 'stateCode' is set
      if (stateCode === undefined || stateCode === null) {
        throw new Error("Missing the required parameter 'stateCode' when calling updateTaxProviderSelfState");
      }

      // verify the required parameter 'taxState' is set
      if (taxState === undefined || taxState === null) {
        throw new Error("Missing the required parameter 'taxState' when calling updateTaxProviderSelfState");
      }


      var pathParams = {
        'stateCode': stateCode
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaxState;

      return this.apiClient.callApi(
        '/tax/providers/self/state/{stateCode}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaxProviderTaxJar operation.
     * @callback module:com.ultracart.admin.v2/TaxApi~updateTaxProviderTaxJarCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/TaxProviderTaxJar} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the TaxJar tax provider
     * Update the TaxJar tax provider. 
     * @param {module:com.ultracart.admin.v2.models/TaxProviderTaxJar} taxProviderTaxJar TaxProviderTaxJar object
     * @param {module:com.ultracart.admin.v2/TaxApi~updateTaxProviderTaxJarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/TaxProviderTaxJar}
     */
    this.updateTaxProviderTaxJar = function(taxProviderTaxJar, callback) {
      var postBody = taxProviderTaxJar;

      // verify the required parameter 'taxProviderTaxJar' is set
      if (taxProviderTaxJar === undefined || taxProviderTaxJar === null) {
        throw new Error("Missing the required parameter 'taxProviderTaxJar' when calling updateTaxProviderTaxJar");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaxProviderTaxJar;

      return this.apiClient.callApi(
        '/tax/providers/taxjar', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTaxProviderUltraCart operation.
     * @callback module:com.ultracart.admin.v2/TaxApi~updateTaxProviderUltraCartCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/TaxProviderUltraCart} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the UltraCart tax provider
     * Update the UltraCart tax provider. 
     * @param {module:com.ultracart.admin.v2.models/TaxProviderUltraCart} taxProviderUltracart TaxProviderUltraCart object
     * @param {module:com.ultracart.admin.v2/TaxApi~updateTaxProviderUltraCartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/TaxProviderUltraCart}
     */
    this.updateTaxProviderUltraCart = function(taxProviderUltracart, callback) {
      var postBody = taxProviderUltracart;

      // verify the required parameter 'taxProviderUltracart' is set
      if (taxProviderUltracart === undefined || taxProviderUltracart === null) {
        throw new Error("Missing the required parameter 'taxProviderUltracart' when calling updateTaxProviderUltraCart");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaxProviderUltraCart;

      return this.apiClient.callApi(
        '/tax/providers/ultracart', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
