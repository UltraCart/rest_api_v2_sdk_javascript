/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'com.ultracart.admin.v2.models/ConversationAgentAuthResponse', 'com.ultracart.admin.v2.models/ConversationAgentProfile', 'com.ultracart.admin.v2.models/ConversationAgentProfileResponse', 'com.ultracart.admin.v2.models/ConversationAutocompleteRequest', 'com.ultracart.admin.v2.models/ConversationAutocompleteResponse', 'com.ultracart.admin.v2.models/ConversationCannedMessage', 'com.ultracart.admin.v2.models/ConversationCannedMessageResponse', 'com.ultracart.admin.v2.models/ConversationCannedMessagesResponse', 'com.ultracart.admin.v2.models/ConversationCannedMessagesSearch', 'com.ultracart.admin.v2.models/ConversationDepartment', 'com.ultracart.admin.v2.models/ConversationDepartmentMembersResponse', 'com.ultracart.admin.v2.models/ConversationDepartmentResponse', 'com.ultracart.admin.v2.models/ConversationDepartmentsResponse', 'com.ultracart.admin.v2.models/ConversationEngagement', 'com.ultracart.admin.v2.models/ConversationEngagementResponse', 'com.ultracart.admin.v2.models/ConversationEngagementsResponse', 'com.ultracart.admin.v2.models/ConversationJoinRequest', 'com.ultracart.admin.v2.models/ConversationLocationsResponse', 'com.ultracart.admin.v2.models/ConversationMessagesResponse', 'com.ultracart.admin.v2.models/ConversationMultimediaUploadUrlResponse', 'com.ultracart.admin.v2.models/ConversationPbxAgent', 'com.ultracart.admin.v2.models/ConversationPbxAgentResponse', 'com.ultracart.admin.v2.models/ConversationPbxAgentsResponse', 'com.ultracart.admin.v2.models/ConversationPbxAudio', 'com.ultracart.admin.v2.models/ConversationPbxAudioResponse', 'com.ultracart.admin.v2.models/ConversationPbxAudiosResponse', 'com.ultracart.admin.v2.models/ConversationPbxCustomerSnapshotRequest', 'com.ultracart.admin.v2.models/ConversationPbxCustomerSnapshotResponse', 'com.ultracart.admin.v2.models/ConversationPbxMenu', 'com.ultracart.admin.v2.models/ConversationPbxMenuResponse', 'com.ultracart.admin.v2.models/ConversationPbxMenusResponse', 'com.ultracart.admin.v2.models/ConversationPbxPhoneNumber', 'com.ultracart.admin.v2.models/ConversationPbxPhoneNumberResponse', 'com.ultracart.admin.v2.models/ConversationPbxPhoneNumbersResponse', 'com.ultracart.admin.v2.models/ConversationPbxQueue', 'com.ultracart.admin.v2.models/ConversationPbxQueueResponse', 'com.ultracart.admin.v2.models/ConversationPbxQueuesResponse', 'com.ultracart.admin.v2.models/ConversationPbxTimeBased', 'com.ultracart.admin.v2.models/ConversationPbxTimeBasedResponse', 'com.ultracart.admin.v2.models/ConversationPbxTimeBasedsResponse', 'com.ultracart.admin.v2.models/ConversationPbxTimeRange', 'com.ultracart.admin.v2.models/ConversationPbxTimeRangeResponse', 'com.ultracart.admin.v2.models/ConversationPbxTimeRangesResponse', 'com.ultracart.admin.v2.models/ConversationPbxVoicemailMailbox', 'com.ultracart.admin.v2.models/ConversationPbxVoicemailMailboxResponse', 'com.ultracart.admin.v2.models/ConversationPbxVoicemailMailboxesResponse', 'com.ultracart.admin.v2.models/ConversationPermissionsResponse', 'com.ultracart.admin.v2.models/ConversationResponse', 'com.ultracart.admin.v2.models/ConversationSearchRequest', 'com.ultracart.admin.v2.models/ConversationSearchResponse', 'com.ultracart.admin.v2.models/ConversationStartRequest', 'com.ultracart.admin.v2.models/ConversationStartResponse', 'com.ultracart.admin.v2.models/ConversationWebchatContext', 'com.ultracart.admin.v2.models/ConversationWebchatQueueStatusUpdateRequest', 'com.ultracart.admin.v2.models/ConversationWebchatQueueStatusesResponse', 'com.ultracart.admin.v2.models/ConversationsResponse', 'com.ultracart.admin.v2.models/ErrorResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../com.ultracart.admin.v2.models/ConversationAgentAuthResponse'), require('../com.ultracart.admin.v2.models/ConversationAgentProfile'), require('../com.ultracart.admin.v2.models/ConversationAgentProfileResponse'), require('../com.ultracart.admin.v2.models/ConversationAutocompleteRequest'), require('../com.ultracart.admin.v2.models/ConversationAutocompleteResponse'), require('../com.ultracart.admin.v2.models/ConversationCannedMessage'), require('../com.ultracart.admin.v2.models/ConversationCannedMessageResponse'), require('../com.ultracart.admin.v2.models/ConversationCannedMessagesResponse'), require('../com.ultracart.admin.v2.models/ConversationCannedMessagesSearch'), require('../com.ultracart.admin.v2.models/ConversationDepartment'), require('../com.ultracart.admin.v2.models/ConversationDepartmentMembersResponse'), require('../com.ultracart.admin.v2.models/ConversationDepartmentResponse'), require('../com.ultracart.admin.v2.models/ConversationDepartmentsResponse'), require('../com.ultracart.admin.v2.models/ConversationEngagement'), require('../com.ultracart.admin.v2.models/ConversationEngagementResponse'), require('../com.ultracart.admin.v2.models/ConversationEngagementsResponse'), require('../com.ultracart.admin.v2.models/ConversationJoinRequest'), require('../com.ultracart.admin.v2.models/ConversationLocationsResponse'), require('../com.ultracart.admin.v2.models/ConversationMessagesResponse'), require('../com.ultracart.admin.v2.models/ConversationMultimediaUploadUrlResponse'), require('../com.ultracart.admin.v2.models/ConversationPbxAgent'), require('../com.ultracart.admin.v2.models/ConversationPbxAgentResponse'), require('../com.ultracart.admin.v2.models/ConversationPbxAgentsResponse'), require('../com.ultracart.admin.v2.models/ConversationPbxAudio'), require('../com.ultracart.admin.v2.models/ConversationPbxAudioResponse'), require('../com.ultracart.admin.v2.models/ConversationPbxAudiosResponse'), require('../com.ultracart.admin.v2.models/ConversationPbxCustomerSnapshotRequest'), require('../com.ultracart.admin.v2.models/ConversationPbxCustomerSnapshotResponse'), require('../com.ultracart.admin.v2.models/ConversationPbxMenu'), require('../com.ultracart.admin.v2.models/ConversationPbxMenuResponse'), require('../com.ultracart.admin.v2.models/ConversationPbxMenusResponse'), require('../com.ultracart.admin.v2.models/ConversationPbxPhoneNumber'), require('../com.ultracart.admin.v2.models/ConversationPbxPhoneNumberResponse'), require('../com.ultracart.admin.v2.models/ConversationPbxPhoneNumbersResponse'), require('../com.ultracart.admin.v2.models/ConversationPbxQueue'), require('../com.ultracart.admin.v2.models/ConversationPbxQueueResponse'), require('../com.ultracart.admin.v2.models/ConversationPbxQueuesResponse'), require('../com.ultracart.admin.v2.models/ConversationPbxTimeBased'), require('../com.ultracart.admin.v2.models/ConversationPbxTimeBasedResponse'), require('../com.ultracart.admin.v2.models/ConversationPbxTimeBasedsResponse'), require('../com.ultracart.admin.v2.models/ConversationPbxTimeRange'), require('../com.ultracart.admin.v2.models/ConversationPbxTimeRangeResponse'), require('../com.ultracart.admin.v2.models/ConversationPbxTimeRangesResponse'), require('../com.ultracart.admin.v2.models/ConversationPbxVoicemailMailbox'), require('../com.ultracart.admin.v2.models/ConversationPbxVoicemailMailboxResponse'), require('../com.ultracart.admin.v2.models/ConversationPbxVoicemailMailboxesResponse'), require('../com.ultracart.admin.v2.models/ConversationPermissionsResponse'), require('../com.ultracart.admin.v2.models/ConversationResponse'), require('../com.ultracart.admin.v2.models/ConversationSearchRequest'), require('../com.ultracart.admin.v2.models/ConversationSearchResponse'), require('../com.ultracart.admin.v2.models/ConversationStartRequest'), require('../com.ultracart.admin.v2.models/ConversationStartResponse'), require('../com.ultracart.admin.v2.models/ConversationWebchatContext'), require('../com.ultracart.admin.v2.models/ConversationWebchatQueueStatusUpdateRequest'), require('../com.ultracart.admin.v2.models/ConversationWebchatQueueStatusesResponse'), require('../com.ultracart.admin.v2.models/ConversationsResponse'), require('../com.ultracart.admin.v2.models/ErrorResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.UltraCartRestApiV2) {
      root.UltraCartRestApiV2 = {};
    }
    root.UltraCartRestApiV2.ConversationApi = factory(root.UltraCartRestApiV2.ApiClient, root.UltraCartRestApiV2.ConversationAgentAuthResponse, root.UltraCartRestApiV2.ConversationAgentProfile, root.UltraCartRestApiV2.ConversationAgentProfileResponse, root.UltraCartRestApiV2.ConversationAutocompleteRequest, root.UltraCartRestApiV2.ConversationAutocompleteResponse, root.UltraCartRestApiV2.ConversationCannedMessage, root.UltraCartRestApiV2.ConversationCannedMessageResponse, root.UltraCartRestApiV2.ConversationCannedMessagesResponse, root.UltraCartRestApiV2.ConversationCannedMessagesSearch, root.UltraCartRestApiV2.ConversationDepartment, root.UltraCartRestApiV2.ConversationDepartmentMembersResponse, root.UltraCartRestApiV2.ConversationDepartmentResponse, root.UltraCartRestApiV2.ConversationDepartmentsResponse, root.UltraCartRestApiV2.ConversationEngagement, root.UltraCartRestApiV2.ConversationEngagementResponse, root.UltraCartRestApiV2.ConversationEngagementsResponse, root.UltraCartRestApiV2.ConversationJoinRequest, root.UltraCartRestApiV2.ConversationLocationsResponse, root.UltraCartRestApiV2.ConversationMessagesResponse, root.UltraCartRestApiV2.ConversationMultimediaUploadUrlResponse, root.UltraCartRestApiV2.ConversationPbxAgent, root.UltraCartRestApiV2.ConversationPbxAgentResponse, root.UltraCartRestApiV2.ConversationPbxAgentsResponse, root.UltraCartRestApiV2.ConversationPbxAudio, root.UltraCartRestApiV2.ConversationPbxAudioResponse, root.UltraCartRestApiV2.ConversationPbxAudiosResponse, root.UltraCartRestApiV2.ConversationPbxCustomerSnapshotRequest, root.UltraCartRestApiV2.ConversationPbxCustomerSnapshotResponse, root.UltraCartRestApiV2.ConversationPbxMenu, root.UltraCartRestApiV2.ConversationPbxMenuResponse, root.UltraCartRestApiV2.ConversationPbxMenusResponse, root.UltraCartRestApiV2.ConversationPbxPhoneNumber, root.UltraCartRestApiV2.ConversationPbxPhoneNumberResponse, root.UltraCartRestApiV2.ConversationPbxPhoneNumbersResponse, root.UltraCartRestApiV2.ConversationPbxQueue, root.UltraCartRestApiV2.ConversationPbxQueueResponse, root.UltraCartRestApiV2.ConversationPbxQueuesResponse, root.UltraCartRestApiV2.ConversationPbxTimeBased, root.UltraCartRestApiV2.ConversationPbxTimeBasedResponse, root.UltraCartRestApiV2.ConversationPbxTimeBasedsResponse, root.UltraCartRestApiV2.ConversationPbxTimeRange, root.UltraCartRestApiV2.ConversationPbxTimeRangeResponse, root.UltraCartRestApiV2.ConversationPbxTimeRangesResponse, root.UltraCartRestApiV2.ConversationPbxVoicemailMailbox, root.UltraCartRestApiV2.ConversationPbxVoicemailMailboxResponse, root.UltraCartRestApiV2.ConversationPbxVoicemailMailboxesResponse, root.UltraCartRestApiV2.ConversationPermissionsResponse, root.UltraCartRestApiV2.ConversationResponse, root.UltraCartRestApiV2.ConversationSearchRequest, root.UltraCartRestApiV2.ConversationSearchResponse, root.UltraCartRestApiV2.ConversationStartRequest, root.UltraCartRestApiV2.ConversationStartResponse, root.UltraCartRestApiV2.ConversationWebchatContext, root.UltraCartRestApiV2.ConversationWebchatQueueStatusUpdateRequest, root.UltraCartRestApiV2.ConversationWebchatQueueStatusesResponse, root.UltraCartRestApiV2.ConversationsResponse, root.UltraCartRestApiV2.ErrorResponse);
  }
}(this, function(ApiClient, ConversationAgentAuthResponse, ConversationAgentProfile, ConversationAgentProfileResponse, ConversationAutocompleteRequest, ConversationAutocompleteResponse, ConversationCannedMessage, ConversationCannedMessageResponse, ConversationCannedMessagesResponse, ConversationCannedMessagesSearch, ConversationDepartment, ConversationDepartmentMembersResponse, ConversationDepartmentResponse, ConversationDepartmentsResponse, ConversationEngagement, ConversationEngagementResponse, ConversationEngagementsResponse, ConversationJoinRequest, ConversationLocationsResponse, ConversationMessagesResponse, ConversationMultimediaUploadUrlResponse, ConversationPbxAgent, ConversationPbxAgentResponse, ConversationPbxAgentsResponse, ConversationPbxAudio, ConversationPbxAudioResponse, ConversationPbxAudiosResponse, ConversationPbxCustomerSnapshotRequest, ConversationPbxCustomerSnapshotResponse, ConversationPbxMenu, ConversationPbxMenuResponse, ConversationPbxMenusResponse, ConversationPbxPhoneNumber, ConversationPbxPhoneNumberResponse, ConversationPbxPhoneNumbersResponse, ConversationPbxQueue, ConversationPbxQueueResponse, ConversationPbxQueuesResponse, ConversationPbxTimeBased, ConversationPbxTimeBasedResponse, ConversationPbxTimeBasedsResponse, ConversationPbxTimeRange, ConversationPbxTimeRangeResponse, ConversationPbxTimeRangesResponse, ConversationPbxVoicemailMailbox, ConversationPbxVoicemailMailboxResponse, ConversationPbxVoicemailMailboxesResponse, ConversationPermissionsResponse, ConversationResponse, ConversationSearchRequest, ConversationSearchResponse, ConversationStartRequest, ConversationStartResponse, ConversationWebchatContext, ConversationWebchatQueueStatusUpdateRequest, ConversationWebchatQueueStatusesResponse, ConversationsResponse, ErrorResponse) {
  'use strict';

  /**
   * Conversation service.
   * @module com.ultracart.admin.v2/ConversationApi
   * @version 3.10.187
   */

  /**
   * Constructs a new ConversationApi. 
   * @alias module:com.ultracart.admin.v2/ConversationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteConversationCannedMessage operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~deleteConversationCannedMessageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a conversation canned message
     * Delete a conversation canned message 
     * @param {Number} conversation_canned_message_oid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~deleteConversationCannedMessageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteConversationCannedMessage = function(conversation_canned_message_oid, callback) {
      var postBody = null;

      // verify the required parameter 'conversation_canned_message_oid' is set
      if (conversation_canned_message_oid === undefined || conversation_canned_message_oid === null) {
        throw new Error("Missing the required parameter 'conversation_canned_message_oid' when calling deleteConversationCannedMessage");
      }


      var pathParams = {
        'conversation_canned_message_oid': conversation_canned_message_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/conversation/canned_messages/{conversation_canned_message_oid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDepartment operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~deleteDepartmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a conversation department
     * Delete a conversation department 
     * @param {Number} conversation_department_oid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~deleteDepartmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDepartment = function(conversation_department_oid, callback) {
      var postBody = null;

      // verify the required parameter 'conversation_department_oid' is set
      if (conversation_department_oid === undefined || conversation_department_oid === null) {
        throw new Error("Missing the required parameter 'conversation_department_oid' when calling deleteDepartment");
      }


      var pathParams = {
        'conversation_department_oid': conversation_department_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/conversation/departments/{conversation_department_oid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEngagement operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~deleteEngagementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a conversation engagement
     * Delete a conversation engagement 
     * @param {Number} conversation_engagement_oid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~deleteEngagementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteEngagement = function(conversation_engagement_oid, callback) {
      var postBody = null;

      // verify the required parameter 'conversation_engagement_oid' is set
      if (conversation_engagement_oid === undefined || conversation_engagement_oid === null) {
        throw new Error("Missing the required parameter 'conversation_engagement_oid' when calling deleteEngagement");
      }


      var pathParams = {
        'conversation_engagement_oid': conversation_engagement_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/conversation/engagements/{conversation_engagement_oid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePbxAgent operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~deletePbxAgentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxAgentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete pbx agent
     * Delete a pbx agent 
     * @param {String} conversationPbxAgentUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~deletePbxAgentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxAgentResponse}
     */
    this.deletePbxAgent = function(conversationPbxAgentUuid, callback) {
      var postBody = null;

      // verify the required parameter 'conversationPbxAgentUuid' is set
      if (conversationPbxAgentUuid === undefined || conversationPbxAgentUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxAgentUuid' when calling deletePbxAgent");
      }


      var pathParams = {
        'conversationPbxAgentUuid': conversationPbxAgentUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxAgentResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/agent/{conversationPbxAgentUuid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePbxAudio operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~deletePbxAudioCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxAudioResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete pbx audio
     * Delete a pbx audio 
     * @param {String} conversationPbxAudioUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~deletePbxAudioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxAudioResponse}
     */
    this.deletePbxAudio = function(conversationPbxAudioUuid, callback) {
      var postBody = null;

      // verify the required parameter 'conversationPbxAudioUuid' is set
      if (conversationPbxAudioUuid === undefined || conversationPbxAudioUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxAudioUuid' when calling deletePbxAudio");
      }


      var pathParams = {
        'conversationPbxAudioUuid': conversationPbxAudioUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxAudioResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/audio/{conversationPbxAudioUuid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePbxMenu operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~deletePbxMenuCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxMenuResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete pbx menu
     * Delete a pbx menu 
     * @param {String} conversationPbxMenuUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~deletePbxMenuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxMenuResponse}
     */
    this.deletePbxMenu = function(conversationPbxMenuUuid, callback) {
      var postBody = null;

      // verify the required parameter 'conversationPbxMenuUuid' is set
      if (conversationPbxMenuUuid === undefined || conversationPbxMenuUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxMenuUuid' when calling deletePbxMenu");
      }


      var pathParams = {
        'conversationPbxMenuUuid': conversationPbxMenuUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxMenuResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/menu/{conversationPbxMenuUuid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePbxPhoneNumber operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~deletePbxPhoneNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxPhoneNumberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete pbx phoneNumber
     * Delete a pbx phoneNumber 
     * @param {String} conversationPbxPhoneNumberUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~deletePbxPhoneNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxPhoneNumberResponse}
     */
    this.deletePbxPhoneNumber = function(conversationPbxPhoneNumberUuid, callback) {
      var postBody = null;

      // verify the required parameter 'conversationPbxPhoneNumberUuid' is set
      if (conversationPbxPhoneNumberUuid === undefined || conversationPbxPhoneNumberUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxPhoneNumberUuid' when calling deletePbxPhoneNumber");
      }


      var pathParams = {
        'conversationPbxPhoneNumberUuid': conversationPbxPhoneNumberUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxPhoneNumberResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/phone_number/{conversationPbxPhoneNumberUuid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePbxQueue operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~deletePbxQueueCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxQueueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete pbx queue
     * Delete a pbx queue 
     * @param {String} conversationPbxQueueUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~deletePbxQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxQueueResponse}
     */
    this.deletePbxQueue = function(conversationPbxQueueUuid, callback) {
      var postBody = null;

      // verify the required parameter 'conversationPbxQueueUuid' is set
      if (conversationPbxQueueUuid === undefined || conversationPbxQueueUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxQueueUuid' when calling deletePbxQueue");
      }


      var pathParams = {
        'conversationPbxQueueUuid': conversationPbxQueueUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxQueueResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/queue/{conversationPbxQueueUuid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePbxTimeBased operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~deletePbxTimeBasedCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeBasedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete pbx timeBased
     * Delete a pbx timeBased 
     * @param {String} conversationPbxTimeBasedUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~deletePbxTimeBasedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxTimeBasedResponse}
     */
    this.deletePbxTimeBased = function(conversationPbxTimeBasedUuid, callback) {
      var postBody = null;

      // verify the required parameter 'conversationPbxTimeBasedUuid' is set
      if (conversationPbxTimeBasedUuid === undefined || conversationPbxTimeBasedUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxTimeBasedUuid' when calling deletePbxTimeBased");
      }


      var pathParams = {
        'conversationPbxTimeBasedUuid': conversationPbxTimeBasedUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxTimeBasedResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/time_based/{conversationPbxTimeBasedUuid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePbxTimeRange operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~deletePbxTimeRangeCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeRangeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete pbx timeRange
     * Delete a pbx timeRange 
     * @param {String} conversationPbxTimeRangeUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~deletePbxTimeRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxTimeRangeResponse}
     */
    this.deletePbxTimeRange = function(conversationPbxTimeRangeUuid, callback) {
      var postBody = null;

      // verify the required parameter 'conversationPbxTimeRangeUuid' is set
      if (conversationPbxTimeRangeUuid === undefined || conversationPbxTimeRangeUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxTimeRangeUuid' when calling deletePbxTimeRange");
      }


      var pathParams = {
        'conversationPbxTimeRangeUuid': conversationPbxTimeRangeUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxTimeRangeResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/time_range/{conversationPbxTimeRangeUuid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePbxVoicemailMailbox operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~deletePbxVoicemailMailboxCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMailboxResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete pbx voicemailMailbox
     * Delete a pbx voicemailMailbox 
     * @param {String} conversationPbxVoicemailMailboxUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~deletePbxVoicemailMailboxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMailboxResponse}
     */
    this.deletePbxVoicemailMailbox = function(conversationPbxVoicemailMailboxUuid, callback) {
      var postBody = null;

      // verify the required parameter 'conversationPbxVoicemailMailboxUuid' is set
      if (conversationPbxVoicemailMailboxUuid === undefined || conversationPbxVoicemailMailboxUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxVoicemailMailboxUuid' when calling deletePbxVoicemailMailbox");
      }


      var pathParams = {
        'conversationPbxVoicemailMailboxUuid': conversationPbxVoicemailMailboxUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxVoicemailMailboxResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/voicemail_mailbox/{conversationPbxVoicemailMailboxUuid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAgentKeepAlive operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getAgentKeepAliveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Agent keep alive
     * Called periodically by the conversation API to keep the session alive. 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getAgentKeepAliveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getAgentKeepAlive = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/conversation/agent/keepalive', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAgentProfile operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getAgentProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationAgentProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get agent profile
     * Retrieve the agents profile 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getAgentProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationAgentProfileResponse}
     */
    this.getAgentProfile = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationAgentProfileResponse;

      return this.apiClient.callApi(
        '/conversation/agent/profile', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAgentWebsocketAuthorization operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getAgentWebsocketAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationAgentAuthResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get agent websocket authorization
     * Retrieve a JWT to authorize an agent to make a websocket connection. 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getAgentWebsocketAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationAgentAuthResponse}
     */
    this.getAgentWebsocketAuthorization = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationAgentAuthResponse;

      return this.apiClient.callApi(
        '/conversation/agent/auth', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversation operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a conversation
     * Retrieve a conversation including the participants and messages 
     * @param {String} conversation_uuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationResponse}
     */
    this.getConversation = function(conversation_uuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'conversation_uuid' is set
      if (conversation_uuid === undefined || conversation_uuid === null) {
        throw new Error("Missing the required parameter 'conversation_uuid' when calling getConversation");
      }


      var pathParams = {
        'conversation_uuid': conversation_uuid
      };
      var queryParams = {
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationResponse;

      return this.apiClient.callApi(
        '/conversation/conversations/{conversation_uuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationCannedMessages operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationCannedMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationCannedMessagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of canned messages ordered by short_code
     * Retrieve a list of canned messages ordered by short_code 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationCannedMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationCannedMessagesResponse}
     */
    this.getConversationCannedMessages = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationCannedMessagesResponse;

      return this.apiClient.callApi(
        '/conversation/canned_messages', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationContext operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationContextCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationWebchatContext} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a webchat conversation context
     * Get a webchat conversation context 
     * @param {String} conversation_uuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationContextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationWebchatContext}
     */
    this.getConversationContext = function(conversation_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'conversation_uuid' is set
      if (conversation_uuid === undefined || conversation_uuid === null) {
        throw new Error("Missing the required parameter 'conversation_uuid' when calling getConversationContext");
      }


      var pathParams = {
        'conversation_uuid': conversation_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationWebchatContext;

      return this.apiClient.callApi(
        '/conversation/conversations/{conversation_uuid}/context', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationDepartmentMemberList operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationDepartmentMemberListCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationDepartmentMembersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of possible department members
     * Retrieve a list of possible department members 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationDepartmentMemberListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationDepartmentMembersResponse}
     */
    this.getConversationDepartmentMemberList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationDepartmentMembersResponse;

      return this.apiClient.callApi(
        '/conversation/department_members', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationDepartments operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationDepartmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationDepartmentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of departments ordered by name
     * Retrieve a list of departments ordered by name 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationDepartmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationDepartmentsResponse}
     */
    this.getConversationDepartments = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationDepartmentsResponse;

      return this.apiClient.callApi(
        '/conversation/departments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationEngagement operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationEngagementCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationEngagementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an engagement
     * Retrieve an engagement 
     * @param {Number} conversation_engagement_oid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationEngagementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationEngagementResponse}
     */
    this.getConversationEngagement = function(conversation_engagement_oid, callback) {
      var postBody = null;

      // verify the required parameter 'conversation_engagement_oid' is set
      if (conversation_engagement_oid === undefined || conversation_engagement_oid === null) {
        throw new Error("Missing the required parameter 'conversation_engagement_oid' when calling getConversationEngagement");
      }


      var pathParams = {
        'conversation_engagement_oid': conversation_engagement_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationEngagementResponse;

      return this.apiClient.callApi(
        '/conversation/engagements/{conversation_engagement_oid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationEngagements operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationEngagementsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationEngagementsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of engagements ordered by name
     * Retrieve a list of engagements ordered by name 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationEngagementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationEngagementsResponse}
     */
    this.getConversationEngagements = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationEngagementsResponse;

      return this.apiClient.callApi(
        '/conversation/engagements', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationMessages operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationMessagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve conversation messages
     * Retrieve conversation messages since a particular time 
     * @param {String} conversation_uuid 
     * @param {Number} since 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationMessagesResponse}
     */
    this.getConversationMessages = function(conversation_uuid, since, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'conversation_uuid' is set
      if (conversation_uuid === undefined || conversation_uuid === null) {
        throw new Error("Missing the required parameter 'conversation_uuid' when calling getConversationMessages");
      }

      // verify the required parameter 'since' is set
      if (since === undefined || since === null) {
        throw new Error("Missing the required parameter 'since' when calling getConversationMessages");
      }


      var pathParams = {
        'conversation_uuid': conversation_uuid,
        'since': since
      };
      var queryParams = {
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationMessagesResponse;

      return this.apiClient.callApi(
        '/conversation/conversations/{conversation_uuid}/messages/{since}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationMultimediaUploadUrl operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationMultimediaUploadUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationMultimediaUploadUrlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a presigned conversation multimedia upload URL
     * Get a presigned conversation multimedia upload URL 
     * @param {String} extension 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationMultimediaUploadUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationMultimediaUploadUrlResponse}
     */
    this.getConversationMultimediaUploadUrl = function(extension, callback) {
      var postBody = null;

      // verify the required parameter 'extension' is set
      if (extension === undefined || extension === null) {
        throw new Error("Missing the required parameter 'extension' when calling getConversationMultimediaUploadUrl");
      }


      var pathParams = {
        'extension': extension
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationMultimediaUploadUrlResponse;

      return this.apiClient.callApi(
        '/conversation/upload_url/{extension}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationPbxAudioUploadUrl operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationPbxAudioUploadUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationMultimediaUploadUrlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a pre-signed conversation multimedia upload URL
     * Get a pre-signed conversation multimedia upload URL 
     * @param {String} extension 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationPbxAudioUploadUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationMultimediaUploadUrlResponse}
     */
    this.getConversationPbxAudioUploadUrl = function(extension, callback) {
      var postBody = null;

      // verify the required parameter 'extension' is set
      if (extension === undefined || extension === null) {
        throw new Error("Missing the required parameter 'extension' when calling getConversationPbxAudioUploadUrl");
      }


      var pathParams = {
        'extension': extension
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationMultimediaUploadUrlResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/audio/upload_url/{extension}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationPbxCustomerSnapshot operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationPbxCustomerSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxCustomerSnapshotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get orders and customer information for a phone number
     * Retrieves all the orders, auto orders, and customer profile for a given phone number 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxCustomerSnapshotRequest} pbx_customer_snapshot_request Conversation pbx customer snapshot request
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationPbxCustomerSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxCustomerSnapshotResponse}
     */
    this.getConversationPbxCustomerSnapshot = function(pbx_customer_snapshot_request, callback) {
      var postBody = pbx_customer_snapshot_request;

      // verify the required parameter 'pbx_customer_snapshot_request' is set
      if (pbx_customer_snapshot_request === undefined || pbx_customer_snapshot_request === null) {
        throw new Error("Missing the required parameter 'pbx_customer_snapshot_request' when calling getConversationPbxCustomerSnapshot");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxCustomerSnapshotResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/customer_snapshot', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationPermissions operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPermissionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve conversation permissions
     * Retrieve conversation permissions 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPermissionsResponse}
     */
    this.getConversationPermissions = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPermissionsResponse;

      return this.apiClient.callApi(
        '/conversation/permissions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationWebchatQueueStatuses operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationWebchatQueueStatusesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationWebchatQueueStatusesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a conversation webchat queue statuses
     * Retrieve a conversation webchat queue statuses including agent status and queue entries 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationWebchatQueueStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationWebchatQueueStatusesResponse}
     */
    this.getConversationWebchatQueueStatuses = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationWebchatQueueStatusesResponse;

      return this.apiClient.callApi(
        '/conversation/conversations/queues/statuses', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversations operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of conversation summaries newest to oldest
     * Retrieve a list of conversation summaries that are ordered newest to oldest, include the most recent message and whether its been read. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.medium 
     * @param {String} opts.before 
     * @param {Number} opts._limit The maximum number of records to return on this one API call. (Max 200) (default to 100)
     * @param {Number} opts._offset Pagination of the record set.  Offset is a zero based index. (default to 0)
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationsResponse}
     */
    this.getConversations = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'medium': opts['medium'],
        'before': opts['before'],
        '_limit': opts['_limit'],
        '_offset': opts['_offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationsResponse;

      return this.apiClient.callApi(
        '/conversation/conversations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationsAutocomplete operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationsAutocompleteCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationAutocompleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of matching terms for a search field
     * Retrieve a list of matching terms for a search field 
     * @param {module:com.ultracart.admin.v2.models/ConversationAutocompleteRequest} autocomplete_request Autocomplete Request
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationsAutocompleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationAutocompleteResponse}
     */
    this.getConversationsAutocomplete = function(autocomplete_request, callback) {
      var postBody = autocomplete_request;

      // verify the required parameter 'autocomplete_request' is set
      if (autocomplete_request === undefined || autocomplete_request === null) {
        throw new Error("Missing the required parameter 'autocomplete_request' when calling getConversationsAutocomplete");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationAutocompleteResponse;

      return this.apiClient.callApi(
        '/conversation/conversations/autocomplete', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationsSearch operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationsSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search conversations
     * Search conversations 
     * @param {module:com.ultracart.admin.v2.models/ConversationSearchRequest} search_request Search Request
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationsSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationSearchResponse}
     */
    this.getConversationsSearch = function(search_request, callback) {
      var postBody = search_request;

      // verify the required parameter 'search_request' is set
      if (search_request === undefined || search_request === null) {
        throw new Error("Missing the required parameter 'search_request' when calling getConversationsSearch");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationSearchResponse;

      return this.apiClient.callApi(
        '/conversation/conversations/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLocationsForEngagement operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getLocationsForEngagementCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationLocationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get location data for engagement configuration
     * Get location data for engagement configuration 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getLocationsForEngagementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationLocationsResponse}
     */
    this.getLocationsForEngagement = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationLocationsResponse;

      return this.apiClient.callApi(
        '/conversation/locations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxAgent operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxAgentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxAgentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx agent
     * Retrieve a pbx agent 
     * @param {String} conversationPbxAgentUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxAgentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxAgentResponse}
     */
    this.getPbxAgent = function(conversationPbxAgentUuid, callback) {
      var postBody = null;

      // verify the required parameter 'conversationPbxAgentUuid' is set
      if (conversationPbxAgentUuid === undefined || conversationPbxAgentUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxAgentUuid' when calling getPbxAgent");
      }


      var pathParams = {
        'conversationPbxAgentUuid': conversationPbxAgentUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxAgentResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/agent/{conversationPbxAgentUuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxAgents operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxAgentsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxAgentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx agents
     * Retrieve pbx agents 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxAgentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxAgentsResponse}
     */
    this.getPbxAgents = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxAgentsResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/agent', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxAudio operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxAudioCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxAudioResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx audio
     * Retrieve a pbx audio 
     * @param {String} conversationPbxAudioUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxAudioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxAudioResponse}
     */
    this.getPbxAudio = function(conversationPbxAudioUuid, callback) {
      var postBody = null;

      // verify the required parameter 'conversationPbxAudioUuid' is set
      if (conversationPbxAudioUuid === undefined || conversationPbxAudioUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxAudioUuid' when calling getPbxAudio");
      }


      var pathParams = {
        'conversationPbxAudioUuid': conversationPbxAudioUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxAudioResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/audio/{conversationPbxAudioUuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxAudios operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxAudiosCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxAudiosResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx audios
     * Retrieve pbx audios 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxAudiosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxAudiosResponse}
     */
    this.getPbxAudios = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxAudiosResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/audio', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxMenu operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxMenuCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxMenuResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx menu
     * Retrieve a pbx menu 
     * @param {String} conversationPbxMenuUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxMenuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxMenuResponse}
     */
    this.getPbxMenu = function(conversationPbxMenuUuid, callback) {
      var postBody = null;

      // verify the required parameter 'conversationPbxMenuUuid' is set
      if (conversationPbxMenuUuid === undefined || conversationPbxMenuUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxMenuUuid' when calling getPbxMenu");
      }


      var pathParams = {
        'conversationPbxMenuUuid': conversationPbxMenuUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxMenuResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/menu/{conversationPbxMenuUuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxMenus operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxMenusCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxMenusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx menus
     * Retrieve pbx menus 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxMenusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxMenusResponse}
     */
    this.getPbxMenus = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxMenusResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/menu', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxPhoneNumber operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxPhoneNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxPhoneNumberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx phoneNumber
     * Retrieve a pbx phoneNumber 
     * @param {String} conversationPbxPhoneNumberUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxPhoneNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxPhoneNumberResponse}
     */
    this.getPbxPhoneNumber = function(conversationPbxPhoneNumberUuid, callback) {
      var postBody = null;

      // verify the required parameter 'conversationPbxPhoneNumberUuid' is set
      if (conversationPbxPhoneNumberUuid === undefined || conversationPbxPhoneNumberUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxPhoneNumberUuid' when calling getPbxPhoneNumber");
      }


      var pathParams = {
        'conversationPbxPhoneNumberUuid': conversationPbxPhoneNumberUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxPhoneNumberResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/phone_number/{conversationPbxPhoneNumberUuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxPhoneNumbers operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxPhoneNumbersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxPhoneNumbersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx phoneNumbers
     * Retrieve pbx phoneNumbers 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxPhoneNumbersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxPhoneNumbersResponse}
     */
    this.getPbxPhoneNumbers = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxPhoneNumbersResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/phone_number', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxQueue operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxQueueCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxQueueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx queue
     * Retrieve a pbx queue 
     * @param {String} conversationPbxQueueUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxQueueResponse}
     */
    this.getPbxQueue = function(conversationPbxQueueUuid, callback) {
      var postBody = null;

      // verify the required parameter 'conversationPbxQueueUuid' is set
      if (conversationPbxQueueUuid === undefined || conversationPbxQueueUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxQueueUuid' when calling getPbxQueue");
      }


      var pathParams = {
        'conversationPbxQueueUuid': conversationPbxQueueUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxQueueResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/queue/{conversationPbxQueueUuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxQueues operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxQueuesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxQueuesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx queues
     * Retrieve pbx queues 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxQueuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxQueuesResponse}
     */
    this.getPbxQueues = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxQueuesResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/queue', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxTimeBased operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxTimeBasedCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeBasedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx timeBased
     * Retrieve a pbx timeBased 
     * @param {String} conversationPbxTimeBasedUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxTimeBasedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxTimeBasedResponse}
     */
    this.getPbxTimeBased = function(conversationPbxTimeBasedUuid, callback) {
      var postBody = null;

      // verify the required parameter 'conversationPbxTimeBasedUuid' is set
      if (conversationPbxTimeBasedUuid === undefined || conversationPbxTimeBasedUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxTimeBasedUuid' when calling getPbxTimeBased");
      }


      var pathParams = {
        'conversationPbxTimeBasedUuid': conversationPbxTimeBasedUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxTimeBasedResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/time_based/{conversationPbxTimeBasedUuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxTimeBaseds operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxTimeBasedsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeBasedsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx timeBaseds
     * Retrieve pbx timeBaseds 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxTimeBasedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxTimeBasedsResponse}
     */
    this.getPbxTimeBaseds = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxTimeBasedsResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/time_based', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxTimeRange operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxTimeRangeCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeRangeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx timeRange
     * Retrieve a pbx timeRange 
     * @param {String} conversationPbxTimeRangeUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxTimeRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxTimeRangeResponse}
     */
    this.getPbxTimeRange = function(conversationPbxTimeRangeUuid, callback) {
      var postBody = null;

      // verify the required parameter 'conversationPbxTimeRangeUuid' is set
      if (conversationPbxTimeRangeUuid === undefined || conversationPbxTimeRangeUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxTimeRangeUuid' when calling getPbxTimeRange");
      }


      var pathParams = {
        'conversationPbxTimeRangeUuid': conversationPbxTimeRangeUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxTimeRangeResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/time_range/{conversationPbxTimeRangeUuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxTimeRanges operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxTimeRangesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeRangesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx timeRanges
     * Retrieve pbx timeRanges 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxTimeRangesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxTimeRangesResponse}
     */
    this.getPbxTimeRanges = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxTimeRangesResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/time_range', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxVoicemailMailbox operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxVoicemailMailboxCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMailboxResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx voicemailMailbox
     * Retrieve a pbx voicemailMailbox 
     * @param {String} conversationPbxVoicemailMailboxUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxVoicemailMailboxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMailboxResponse}
     */
    this.getPbxVoicemailMailbox = function(conversationPbxVoicemailMailboxUuid, callback) {
      var postBody = null;

      // verify the required parameter 'conversationPbxVoicemailMailboxUuid' is set
      if (conversationPbxVoicemailMailboxUuid === undefined || conversationPbxVoicemailMailboxUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxVoicemailMailboxUuid' when calling getPbxVoicemailMailbox");
      }


      var pathParams = {
        'conversationPbxVoicemailMailboxUuid': conversationPbxVoicemailMailboxUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxVoicemailMailboxResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/voicemail_mailbox/{conversationPbxVoicemailMailboxUuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxVoicemailMailboxes operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxVoicemailMailboxesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMailboxesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx voicemailMailboxes
     * Retrieve pbx voicemailMailboxes 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxVoicemailMailboxesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMailboxesResponse}
     */
    this.getPbxVoicemailMailboxes = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxVoicemailMailboxesResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/voicemail_mailbox', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertConversationCannedMessage operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~insertConversationCannedMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationCannedMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a canned message
     * Insert a canned message 
     * @param {module:com.ultracart.admin.v2.models/ConversationCannedMessage} canned_message Canned message
     * @param {module:com.ultracart.admin.v2/ConversationApi~insertConversationCannedMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationCannedMessageResponse}
     */
    this.insertConversationCannedMessage = function(canned_message, callback) {
      var postBody = canned_message;

      // verify the required parameter 'canned_message' is set
      if (canned_message === undefined || canned_message === null) {
        throw new Error("Missing the required parameter 'canned_message' when calling insertConversationCannedMessage");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationCannedMessageResponse;

      return this.apiClient.callApi(
        '/conversation/canned_messages', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertConversationDepartment operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~insertConversationDepartmentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationDepartmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a department
     * Insert a department 
     * @param {module:com.ultracart.admin.v2.models/ConversationDepartment} department Department
     * @param {module:com.ultracart.admin.v2/ConversationApi~insertConversationDepartmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationDepartmentResponse}
     */
    this.insertConversationDepartment = function(department, callback) {
      var postBody = department;

      // verify the required parameter 'department' is set
      if (department === undefined || department === null) {
        throw new Error("Missing the required parameter 'department' when calling insertConversationDepartment");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationDepartmentResponse;

      return this.apiClient.callApi(
        '/conversation/departments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertConversationEngagement operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~insertConversationEngagementCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationEngagementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a engagement
     * Insert a engagement 
     * @param {module:com.ultracart.admin.v2.models/ConversationEngagement} engagement Engagement
     * @param {module:com.ultracart.admin.v2/ConversationApi~insertConversationEngagementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationEngagementResponse}
     */
    this.insertConversationEngagement = function(engagement, callback) {
      var postBody = engagement;

      // verify the required parameter 'engagement' is set
      if (engagement === undefined || engagement === null) {
        throw new Error("Missing the required parameter 'engagement' when calling insertConversationEngagement");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationEngagementResponse;

      return this.apiClient.callApi(
        '/conversation/engagements', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertPbxAgent operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~insertPbxAgentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxAgentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert pbx agent
     * Insert a pbx agent 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxAgent} pbx_agent Pbx Agent
     * @param {module:com.ultracart.admin.v2/ConversationApi~insertPbxAgentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxAgentResponse}
     */
    this.insertPbxAgent = function(pbx_agent, callback) {
      var postBody = pbx_agent;

      // verify the required parameter 'pbx_agent' is set
      if (pbx_agent === undefined || pbx_agent === null) {
        throw new Error("Missing the required parameter 'pbx_agent' when calling insertPbxAgent");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxAgentResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/agent', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertPbxAudio operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~insertPbxAudioCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxAudioResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert pbx audio
     * Insert a pbx audio 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxAudio} pbx_audio Pbx Audio
     * @param {module:com.ultracart.admin.v2/ConversationApi~insertPbxAudioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxAudioResponse}
     */
    this.insertPbxAudio = function(pbx_audio, callback) {
      var postBody = pbx_audio;

      // verify the required parameter 'pbx_audio' is set
      if (pbx_audio === undefined || pbx_audio === null) {
        throw new Error("Missing the required parameter 'pbx_audio' when calling insertPbxAudio");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxAudioResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/audio', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertPbxMenu operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~insertPbxMenuCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxMenuResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert pbx menu
     * Insert a pbx menu 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxMenu} pbx_menu Pbx Menu
     * @param {module:com.ultracart.admin.v2/ConversationApi~insertPbxMenuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxMenuResponse}
     */
    this.insertPbxMenu = function(pbx_menu, callback) {
      var postBody = pbx_menu;

      // verify the required parameter 'pbx_menu' is set
      if (pbx_menu === undefined || pbx_menu === null) {
        throw new Error("Missing the required parameter 'pbx_menu' when calling insertPbxMenu");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxMenuResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/menu', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertPbxPhoneNumber operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~insertPbxPhoneNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxPhoneNumberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert pbx phoneNumber
     * Insert a pbx phoneNumber 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxPhoneNumber} pbx_phoneNumber Pbx PhoneNumber
     * @param {module:com.ultracart.admin.v2/ConversationApi~insertPbxPhoneNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxPhoneNumberResponse}
     */
    this.insertPbxPhoneNumber = function(pbx_phoneNumber, callback) {
      var postBody = pbx_phoneNumber;

      // verify the required parameter 'pbx_phoneNumber' is set
      if (pbx_phoneNumber === undefined || pbx_phoneNumber === null) {
        throw new Error("Missing the required parameter 'pbx_phoneNumber' when calling insertPbxPhoneNumber");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxPhoneNumberResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/phone_number', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertPbxQueue operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~insertPbxQueueCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxQueueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert pbx queue
     * Insert a pbx queue 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxQueue} pbx_queue Pbx Queue
     * @param {module:com.ultracart.admin.v2/ConversationApi~insertPbxQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxQueueResponse}
     */
    this.insertPbxQueue = function(pbx_queue, callback) {
      var postBody = pbx_queue;

      // verify the required parameter 'pbx_queue' is set
      if (pbx_queue === undefined || pbx_queue === null) {
        throw new Error("Missing the required parameter 'pbx_queue' when calling insertPbxQueue");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxQueueResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/queue', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertPbxTimeBased operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~insertPbxTimeBasedCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeBasedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert pbx timeBased
     * Insert a pbx timeBased 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeBased} pbx_timeBased Pbx TimeBased
     * @param {module:com.ultracart.admin.v2/ConversationApi~insertPbxTimeBasedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxTimeBasedResponse}
     */
    this.insertPbxTimeBased = function(pbx_timeBased, callback) {
      var postBody = pbx_timeBased;

      // verify the required parameter 'pbx_timeBased' is set
      if (pbx_timeBased === undefined || pbx_timeBased === null) {
        throw new Error("Missing the required parameter 'pbx_timeBased' when calling insertPbxTimeBased");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxTimeBasedResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/time_based', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertPbxTimeRange operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~insertPbxTimeRangeCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeRangeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert pbx timeRange
     * Insert a pbx timeRange 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeRange} pbx_timeRange Pbx TimeRange
     * @param {module:com.ultracart.admin.v2/ConversationApi~insertPbxTimeRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxTimeRangeResponse}
     */
    this.insertPbxTimeRange = function(pbx_timeRange, callback) {
      var postBody = pbx_timeRange;

      // verify the required parameter 'pbx_timeRange' is set
      if (pbx_timeRange === undefined || pbx_timeRange === null) {
        throw new Error("Missing the required parameter 'pbx_timeRange' when calling insertPbxTimeRange");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxTimeRangeResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/time_range', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertPbxVoicemailMailbox operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~insertPbxVoicemailMailboxCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMailboxResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert pbx voicemailMailbox
     * Insert a pbx voicemailMailbox 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMailbox} pbx_voicemailMailbox Pbx VoicemailMailbox
     * @param {module:com.ultracart.admin.v2/ConversationApi~insertPbxVoicemailMailboxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMailboxResponse}
     */
    this.insertPbxVoicemailMailbox = function(pbx_voicemailMailbox, callback) {
      var postBody = pbx_voicemailMailbox;

      // verify the required parameter 'pbx_voicemailMailbox' is set
      if (pbx_voicemailMailbox === undefined || pbx_voicemailMailbox === null) {
        throw new Error("Missing the required parameter 'pbx_voicemailMailbox' when calling insertPbxVoicemailMailbox");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxVoicemailMailboxResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/voicemail_mailbox', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the joinConversation operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~joinConversationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Join a conversation
     * Join a conversation 
     * @param {String} conversation_uuid 
     * @param {Object} opts Optional parameters
     * @param {module:com.ultracart.admin.v2.models/ConversationJoinRequest} opts.join_request Join request
     * @param {module:com.ultracart.admin.v2/ConversationApi~joinConversationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.joinConversation = function(conversation_uuid, opts, callback) {
      opts = opts || {};
      var postBody = opts['join_request'];

      // verify the required parameter 'conversation_uuid' is set
      if (conversation_uuid === undefined || conversation_uuid === null) {
        throw new Error("Missing the required parameter 'conversation_uuid' when calling joinConversation");
      }


      var pathParams = {
        'conversation_uuid': conversation_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/conversation/conversations/{conversation_uuid}/join', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the leaveConversation operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~leaveConversationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Leave a conversation
     * Leave a conversation 
     * @param {String} conversation_uuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~leaveConversationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.leaveConversation = function(conversation_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'conversation_uuid' is set
      if (conversation_uuid === undefined || conversation_uuid === null) {
        throw new Error("Missing the required parameter 'conversation_uuid' when calling leaveConversation");
      }


      var pathParams = {
        'conversation_uuid': conversation_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/conversation/conversations/{conversation_uuid}/leave', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the markReadConversation operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~markReadConversationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark a conversation as read
     * Mark a conversation as read 
     * @param {String} conversation_uuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~markReadConversationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.markReadConversation = function(conversation_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'conversation_uuid' is set
      if (conversation_uuid === undefined || conversation_uuid === null) {
        throw new Error("Missing the required parameter 'conversation_uuid' when calling markReadConversation");
      }


      var pathParams = {
        'conversation_uuid': conversation_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/conversation/conversations/{conversation_uuid}/markread', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resetConversationPbxQueueStatistics operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~resetConversationPbxQueueStatisticsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * reset statistics within the queue
     * reset statistics within the queue 
     * @param {String} queue_uuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~resetConversationPbxQueueStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.resetConversationPbxQueueStatistics = function(queue_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'queue_uuid' is set
      if (queue_uuid === undefined || queue_uuid === null) {
        throw new Error("Missing the required parameter 'queue_uuid' when calling resetConversationPbxQueueStatistics");
      }


      var pathParams = {
        'queue_uuid': queue_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/conversation/pbx/queues/{queue_uuid}/reset_statistics', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchConversationCannedMessages operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~searchConversationCannedMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationCannedMessagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for canned messages by short_code
     * Search for canned messages by short_code 
     * @param {module:com.ultracart.admin.v2.models/ConversationCannedMessagesSearch} search_request Search request
     * @param {module:com.ultracart.admin.v2/ConversationApi~searchConversationCannedMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationCannedMessagesResponse}
     */
    this.searchConversationCannedMessages = function(search_request, callback) {
      var postBody = search_request;

      // verify the required parameter 'search_request' is set
      if (search_request === undefined || search_request === null) {
        throw new Error("Missing the required parameter 'search_request' when calling searchConversationCannedMessages");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationCannedMessagesResponse;

      return this.apiClient.callApi(
        '/conversation/canned_messages/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the smsUnsubscribeConversation operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~smsUnsubscribeConversationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unsubscribe any SMS participants in this conversation
     * Unsubscribe any SMS participants in this conversation 
     * @param {String} conversation_uuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~smsUnsubscribeConversationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.smsUnsubscribeConversation = function(conversation_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'conversation_uuid' is set
      if (conversation_uuid === undefined || conversation_uuid === null) {
        throw new Error("Missing the required parameter 'conversation_uuid' when calling smsUnsubscribeConversation");
      }


      var pathParams = {
        'conversation_uuid': conversation_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/conversation/conversations/{conversation_uuid}/sms_unsubscribe', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the startConversation operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~startConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationStartResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a conversation
     * Start a new conversation 
     * @param {module:com.ultracart.admin.v2.models/ConversationStartRequest} start_request Start request
     * @param {module:com.ultracart.admin.v2/ConversationApi~startConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationStartResponse}
     */
    this.startConversation = function(start_request, callback) {
      var postBody = start_request;

      // verify the required parameter 'start_request' is set
      if (start_request === undefined || start_request === null) {
        throw new Error("Missing the required parameter 'start_request' when calling startConversation");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationStartResponse;

      return this.apiClient.callApi(
        '/conversation/conversations', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAgentProfile operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~updateAgentProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationAgentProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update agent profile
     * Update agent profile 
     * @param {module:com.ultracart.admin.v2.models/ConversationAgentProfile} profile_request Profile request
     * @param {module:com.ultracart.admin.v2/ConversationApi~updateAgentProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationAgentProfileResponse}
     */
    this.updateAgentProfile = function(profile_request, callback) {
      var postBody = profile_request;

      // verify the required parameter 'profile_request' is set
      if (profile_request === undefined || profile_request === null) {
        throw new Error("Missing the required parameter 'profile_request' when calling updateAgentProfile");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationAgentProfileResponse;

      return this.apiClient.callApi(
        '/conversation/agent/profile', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConversationCannedMessage operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~updateConversationCannedMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationCannedMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a canned message
     * Update a canned message 
     * @param {Number} conversation_canned_message_oid 
     * @param {module:com.ultracart.admin.v2.models/ConversationCannedMessage} canned_message Canned message
     * @param {module:com.ultracart.admin.v2/ConversationApi~updateConversationCannedMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationCannedMessageResponse}
     */
    this.updateConversationCannedMessage = function(conversation_canned_message_oid, canned_message, callback) {
      var postBody = canned_message;

      // verify the required parameter 'conversation_canned_message_oid' is set
      if (conversation_canned_message_oid === undefined || conversation_canned_message_oid === null) {
        throw new Error("Missing the required parameter 'conversation_canned_message_oid' when calling updateConversationCannedMessage");
      }

      // verify the required parameter 'canned_message' is set
      if (canned_message === undefined || canned_message === null) {
        throw new Error("Missing the required parameter 'canned_message' when calling updateConversationCannedMessage");
      }


      var pathParams = {
        'conversation_canned_message_oid': conversation_canned_message_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationCannedMessageResponse;

      return this.apiClient.callApi(
        '/conversation/canned_messages/{conversation_canned_message_oid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConversationDepartment operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~updateConversationDepartmentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationDepartmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a department
     * Update a department 
     * @param {Number} conversation_department_oid 
     * @param {module:com.ultracart.admin.v2.models/ConversationDepartment} department Department
     * @param {module:com.ultracart.admin.v2/ConversationApi~updateConversationDepartmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationDepartmentResponse}
     */
    this.updateConversationDepartment = function(conversation_department_oid, department, callback) {
      var postBody = department;

      // verify the required parameter 'conversation_department_oid' is set
      if (conversation_department_oid === undefined || conversation_department_oid === null) {
        throw new Error("Missing the required parameter 'conversation_department_oid' when calling updateConversationDepartment");
      }

      // verify the required parameter 'department' is set
      if (department === undefined || department === null) {
        throw new Error("Missing the required parameter 'department' when calling updateConversationDepartment");
      }


      var pathParams = {
        'conversation_department_oid': conversation_department_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationDepartmentResponse;

      return this.apiClient.callApi(
        '/conversation/departments/{conversation_department_oid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConversationEngagement operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~updateConversationEngagementCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationEngagementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a engagement
     * Update a engagement 
     * @param {Number} conversation_engagement_oid 
     * @param {module:com.ultracart.admin.v2.models/ConversationEngagement} engagement Engagement
     * @param {module:com.ultracart.admin.v2/ConversationApi~updateConversationEngagementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationEngagementResponse}
     */
    this.updateConversationEngagement = function(conversation_engagement_oid, engagement, callback) {
      var postBody = engagement;

      // verify the required parameter 'conversation_engagement_oid' is set
      if (conversation_engagement_oid === undefined || conversation_engagement_oid === null) {
        throw new Error("Missing the required parameter 'conversation_engagement_oid' when calling updateConversationEngagement");
      }

      // verify the required parameter 'engagement' is set
      if (engagement === undefined || engagement === null) {
        throw new Error("Missing the required parameter 'engagement' when calling updateConversationEngagement");
      }


      var pathParams = {
        'conversation_engagement_oid': conversation_engagement_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationEngagementResponse;

      return this.apiClient.callApi(
        '/conversation/engagements/{conversation_engagement_oid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConversationWebchatQueueStatus operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~updateConversationWebchatQueueStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update status within the queue
     * Update status within the queue 
     * @param {String} queue_name 
     * @param {module:com.ultracart.admin.v2.models/ConversationWebchatQueueStatusUpdateRequest} status_request Status request
     * @param {module:com.ultracart.admin.v2/ConversationApi~updateConversationWebchatQueueStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateConversationWebchatQueueStatus = function(queue_name, status_request, callback) {
      var postBody = status_request;

      // verify the required parameter 'queue_name' is set
      if (queue_name === undefined || queue_name === null) {
        throw new Error("Missing the required parameter 'queue_name' when calling updateConversationWebchatQueueStatus");
      }

      // verify the required parameter 'status_request' is set
      if (status_request === undefined || status_request === null) {
        throw new Error("Missing the required parameter 'status_request' when calling updateConversationWebchatQueueStatus");
      }


      var pathParams = {
        'queue_name': queue_name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/conversation/conversations/queues/{queue_name}/status', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePbxAgent operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~updatePbxAgentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxAgentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update pbx agent
     * Update a pbx agent 
     * @param {String} conversationPbxAgentUuid 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxAgent} pbx_agent Pbx Agent
     * @param {module:com.ultracart.admin.v2/ConversationApi~updatePbxAgentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxAgentResponse}
     */
    this.updatePbxAgent = function(conversationPbxAgentUuid, pbx_agent, callback) {
      var postBody = pbx_agent;

      // verify the required parameter 'conversationPbxAgentUuid' is set
      if (conversationPbxAgentUuid === undefined || conversationPbxAgentUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxAgentUuid' when calling updatePbxAgent");
      }

      // verify the required parameter 'pbx_agent' is set
      if (pbx_agent === undefined || pbx_agent === null) {
        throw new Error("Missing the required parameter 'pbx_agent' when calling updatePbxAgent");
      }


      var pathParams = {
        'conversationPbxAgentUuid': conversationPbxAgentUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxAgentResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/agent/{conversationPbxAgentUuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePbxAudio operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~updatePbxAudioCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxAudioResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update pbx audio
     * Update a pbx audio 
     * @param {String} conversationPbxAudioUuid 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxAudio} pbx_audio Pbx Audio
     * @param {module:com.ultracart.admin.v2/ConversationApi~updatePbxAudioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxAudioResponse}
     */
    this.updatePbxAudio = function(conversationPbxAudioUuid, pbx_audio, callback) {
      var postBody = pbx_audio;

      // verify the required parameter 'conversationPbxAudioUuid' is set
      if (conversationPbxAudioUuid === undefined || conversationPbxAudioUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxAudioUuid' when calling updatePbxAudio");
      }

      // verify the required parameter 'pbx_audio' is set
      if (pbx_audio === undefined || pbx_audio === null) {
        throw new Error("Missing the required parameter 'pbx_audio' when calling updatePbxAudio");
      }


      var pathParams = {
        'conversationPbxAudioUuid': conversationPbxAudioUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxAudioResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/audio/{conversationPbxAudioUuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePbxMenu operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~updatePbxMenuCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxMenuResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update pbx menu
     * Update a pbx menu 
     * @param {String} conversationPbxMenuUuid 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxMenu} pbx_menu Pbx Menu
     * @param {module:com.ultracart.admin.v2/ConversationApi~updatePbxMenuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxMenuResponse}
     */
    this.updatePbxMenu = function(conversationPbxMenuUuid, pbx_menu, callback) {
      var postBody = pbx_menu;

      // verify the required parameter 'conversationPbxMenuUuid' is set
      if (conversationPbxMenuUuid === undefined || conversationPbxMenuUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxMenuUuid' when calling updatePbxMenu");
      }

      // verify the required parameter 'pbx_menu' is set
      if (pbx_menu === undefined || pbx_menu === null) {
        throw new Error("Missing the required parameter 'pbx_menu' when calling updatePbxMenu");
      }


      var pathParams = {
        'conversationPbxMenuUuid': conversationPbxMenuUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxMenuResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/menu/{conversationPbxMenuUuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePbxPhoneNumber operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~updatePbxPhoneNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxPhoneNumberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update pbx phoneNumber
     * Update a pbx phoneNumber 
     * @param {String} conversationPbxPhoneNumberUuid 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxPhoneNumber} pbx_phoneNumber Pbx PhoneNumber
     * @param {module:com.ultracart.admin.v2/ConversationApi~updatePbxPhoneNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxPhoneNumberResponse}
     */
    this.updatePbxPhoneNumber = function(conversationPbxPhoneNumberUuid, pbx_phoneNumber, callback) {
      var postBody = pbx_phoneNumber;

      // verify the required parameter 'conversationPbxPhoneNumberUuid' is set
      if (conversationPbxPhoneNumberUuid === undefined || conversationPbxPhoneNumberUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxPhoneNumberUuid' when calling updatePbxPhoneNumber");
      }

      // verify the required parameter 'pbx_phoneNumber' is set
      if (pbx_phoneNumber === undefined || pbx_phoneNumber === null) {
        throw new Error("Missing the required parameter 'pbx_phoneNumber' when calling updatePbxPhoneNumber");
      }


      var pathParams = {
        'conversationPbxPhoneNumberUuid': conversationPbxPhoneNumberUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxPhoneNumberResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/phone_number/{conversationPbxPhoneNumberUuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePbxQueue operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~updatePbxQueueCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxQueueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update pbx queue
     * Update a pbx queue 
     * @param {String} conversationPbxQueueUuid 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxQueue} pbx_queue Pbx Queue
     * @param {module:com.ultracart.admin.v2/ConversationApi~updatePbxQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxQueueResponse}
     */
    this.updatePbxQueue = function(conversationPbxQueueUuid, pbx_queue, callback) {
      var postBody = pbx_queue;

      // verify the required parameter 'conversationPbxQueueUuid' is set
      if (conversationPbxQueueUuid === undefined || conversationPbxQueueUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxQueueUuid' when calling updatePbxQueue");
      }

      // verify the required parameter 'pbx_queue' is set
      if (pbx_queue === undefined || pbx_queue === null) {
        throw new Error("Missing the required parameter 'pbx_queue' when calling updatePbxQueue");
      }


      var pathParams = {
        'conversationPbxQueueUuid': conversationPbxQueueUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxQueueResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/queue/{conversationPbxQueueUuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePbxTimeBased operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~updatePbxTimeBasedCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeBasedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update pbx timeBased
     * Update a pbx timeBased 
     * @param {String} conversationPbxTimeBasedUuid 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeBased} pbx_timeBased Pbx TimeBased
     * @param {module:com.ultracart.admin.v2/ConversationApi~updatePbxTimeBasedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxTimeBasedResponse}
     */
    this.updatePbxTimeBased = function(conversationPbxTimeBasedUuid, pbx_timeBased, callback) {
      var postBody = pbx_timeBased;

      // verify the required parameter 'conversationPbxTimeBasedUuid' is set
      if (conversationPbxTimeBasedUuid === undefined || conversationPbxTimeBasedUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxTimeBasedUuid' when calling updatePbxTimeBased");
      }

      // verify the required parameter 'pbx_timeBased' is set
      if (pbx_timeBased === undefined || pbx_timeBased === null) {
        throw new Error("Missing the required parameter 'pbx_timeBased' when calling updatePbxTimeBased");
      }


      var pathParams = {
        'conversationPbxTimeBasedUuid': conversationPbxTimeBasedUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxTimeBasedResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/time_based/{conversationPbxTimeBasedUuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePbxTimeRange operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~updatePbxTimeRangeCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeRangeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update pbx timeRange
     * Update a pbx timeRange 
     * @param {String} conversationPbxTimeRangeUuid 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeRange} pbx_timeRange Pbx TimeRange
     * @param {module:com.ultracart.admin.v2/ConversationApi~updatePbxTimeRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxTimeRangeResponse}
     */
    this.updatePbxTimeRange = function(conversationPbxTimeRangeUuid, pbx_timeRange, callback) {
      var postBody = pbx_timeRange;

      // verify the required parameter 'conversationPbxTimeRangeUuid' is set
      if (conversationPbxTimeRangeUuid === undefined || conversationPbxTimeRangeUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxTimeRangeUuid' when calling updatePbxTimeRange");
      }

      // verify the required parameter 'pbx_timeRange' is set
      if (pbx_timeRange === undefined || pbx_timeRange === null) {
        throw new Error("Missing the required parameter 'pbx_timeRange' when calling updatePbxTimeRange");
      }


      var pathParams = {
        'conversationPbxTimeRangeUuid': conversationPbxTimeRangeUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxTimeRangeResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/time_range/{conversationPbxTimeRangeUuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePbxVoicemailMailbox operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~updatePbxVoicemailMailboxCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMailboxResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update pbx voicemailMailbox
     * Update a pbx voicemailMailbox 
     * @param {String} conversationPbxVoicemailMailboxUuid 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMailbox} pbx_voicemailMailbox Pbx VoicemailMailbox
     * @param {module:com.ultracart.admin.v2/ConversationApi~updatePbxVoicemailMailboxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMailboxResponse}
     */
    this.updatePbxVoicemailMailbox = function(conversationPbxVoicemailMailboxUuid, pbx_voicemailMailbox, callback) {
      var postBody = pbx_voicemailMailbox;

      // verify the required parameter 'conversationPbxVoicemailMailboxUuid' is set
      if (conversationPbxVoicemailMailboxUuid === undefined || conversationPbxVoicemailMailboxUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxVoicemailMailboxUuid' when calling updatePbxVoicemailMailbox");
      }

      // verify the required parameter 'pbx_voicemailMailbox' is set
      if (pbx_voicemailMailbox === undefined || pbx_voicemailMailbox === null) {
        throw new Error("Missing the required parameter 'pbx_voicemailMailbox' when calling updatePbxVoicemailMailbox");
      }


      var pathParams = {
        'conversationPbxVoicemailMailboxUuid': conversationPbxVoicemailMailboxUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ConversationPbxVoicemailMailboxResponse;

      return this.apiClient.callApi(
        '/conversation/pbx/voicemail_mailbox/{conversationPbxVoicemailMailboxUuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
