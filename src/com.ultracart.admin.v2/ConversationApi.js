/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConversationAgentAuthResponse from '../com.ultracart.admin.v2.models/ConversationAgentAuthResponse';
import ConversationAgentProfile from '../com.ultracart.admin.v2.models/ConversationAgentProfile';
import ConversationAgentProfileResponse from '../com.ultracart.admin.v2.models/ConversationAgentProfileResponse';
import ConversationAutocompleteRequest from '../com.ultracart.admin.v2.models/ConversationAutocompleteRequest';
import ConversationAutocompleteResponse from '../com.ultracart.admin.v2.models/ConversationAutocompleteResponse';
import ConversationCannedMessage from '../com.ultracart.admin.v2.models/ConversationCannedMessage';
import ConversationCannedMessageResponse from '../com.ultracart.admin.v2.models/ConversationCannedMessageResponse';
import ConversationCannedMessagesResponse from '../com.ultracart.admin.v2.models/ConversationCannedMessagesResponse';
import ConversationCannedMessagesSearch from '../com.ultracart.admin.v2.models/ConversationCannedMessagesSearch';
import ConversationDepartment from '../com.ultracart.admin.v2.models/ConversationDepartment';
import ConversationDepartmentMembersResponse from '../com.ultracart.admin.v2.models/ConversationDepartmentMembersResponse';
import ConversationDepartmentResponse from '../com.ultracart.admin.v2.models/ConversationDepartmentResponse';
import ConversationDepartmentsResponse from '../com.ultracart.admin.v2.models/ConversationDepartmentsResponse';
import ConversationEngagement from '../com.ultracart.admin.v2.models/ConversationEngagement';
import ConversationEngagementResponse from '../com.ultracart.admin.v2.models/ConversationEngagementResponse';
import ConversationEngagementsResponse from '../com.ultracart.admin.v2.models/ConversationEngagementsResponse';
import ConversationJoinRequest from '../com.ultracart.admin.v2.models/ConversationJoinRequest';
import ConversationLocationsResponse from '../com.ultracart.admin.v2.models/ConversationLocationsResponse';
import ConversationMessagesResponse from '../com.ultracart.admin.v2.models/ConversationMessagesResponse';
import ConversationMultimediaUploadUrlResponse from '../com.ultracart.admin.v2.models/ConversationMultimediaUploadUrlResponse';
import ConversationPbxAgent from '../com.ultracart.admin.v2.models/ConversationPbxAgent';
import ConversationPbxAgentResponse from '../com.ultracart.admin.v2.models/ConversationPbxAgentResponse';
import ConversationPbxAgentsResponse from '../com.ultracart.admin.v2.models/ConversationPbxAgentsResponse';
import ConversationPbxAudio from '../com.ultracart.admin.v2.models/ConversationPbxAudio';
import ConversationPbxAudioResponse from '../com.ultracart.admin.v2.models/ConversationPbxAudioResponse';
import ConversationPbxAudioUploadUrlResponse from '../com.ultracart.admin.v2.models/ConversationPbxAudioUploadUrlResponse';
import ConversationPbxAudioUsageResponse from '../com.ultracart.admin.v2.models/ConversationPbxAudioUsageResponse';
import ConversationPbxAudiosResponse from '../com.ultracart.admin.v2.models/ConversationPbxAudiosResponse';
import ConversationPbxCustomerSnapshotRequest from '../com.ultracart.admin.v2.models/ConversationPbxCustomerSnapshotRequest';
import ConversationPbxCustomerSnapshotResponse from '../com.ultracart.admin.v2.models/ConversationPbxCustomerSnapshotResponse';
import ConversationPbxMenu from '../com.ultracart.admin.v2.models/ConversationPbxMenu';
import ConversationPbxMenuResponse from '../com.ultracart.admin.v2.models/ConversationPbxMenuResponse';
import ConversationPbxMenusResponse from '../com.ultracart.admin.v2.models/ConversationPbxMenusResponse';
import ConversationPbxPhoneNumber from '../com.ultracart.admin.v2.models/ConversationPbxPhoneNumber';
import ConversationPbxPhoneNumberResponse from '../com.ultracart.admin.v2.models/ConversationPbxPhoneNumberResponse';
import ConversationPbxPhoneNumbersResponse from '../com.ultracart.admin.v2.models/ConversationPbxPhoneNumbersResponse';
import ConversationPbxQueue from '../com.ultracart.admin.v2.models/ConversationPbxQueue';
import ConversationPbxQueueResponse from '../com.ultracart.admin.v2.models/ConversationPbxQueueResponse';
import ConversationPbxQueuesResponse from '../com.ultracart.admin.v2.models/ConversationPbxQueuesResponse';
import ConversationPbxTimeBased from '../com.ultracart.admin.v2.models/ConversationPbxTimeBased';
import ConversationPbxTimeBasedResponse from '../com.ultracart.admin.v2.models/ConversationPbxTimeBasedResponse';
import ConversationPbxTimeBasedsResponse from '../com.ultracart.admin.v2.models/ConversationPbxTimeBasedsResponse';
import ConversationPbxTimeRange from '../com.ultracart.admin.v2.models/ConversationPbxTimeRange';
import ConversationPbxTimeRangeResponse from '../com.ultracart.admin.v2.models/ConversationPbxTimeRangeResponse';
import ConversationPbxTimeRangesResponse from '../com.ultracart.admin.v2.models/ConversationPbxTimeRangesResponse';
import ConversationPbxVoicemailMailbox from '../com.ultracart.admin.v2.models/ConversationPbxVoicemailMailbox';
import ConversationPbxVoicemailMailboxResponse from '../com.ultracart.admin.v2.models/ConversationPbxVoicemailMailboxResponse';
import ConversationPbxVoicemailMailboxesResponse from '../com.ultracart.admin.v2.models/ConversationPbxVoicemailMailboxesResponse';
import ConversationPbxVoicemailMessageResponse from '../com.ultracart.admin.v2.models/ConversationPbxVoicemailMessageResponse';
import ConversationPbxVoicemailMessageSummariesResponse from '../com.ultracart.admin.v2.models/ConversationPbxVoicemailMessageSummariesResponse';
import ConversationPermissionsResponse from '../com.ultracart.admin.v2.models/ConversationPermissionsResponse';
import ConversationResponse from '../com.ultracart.admin.v2.models/ConversationResponse';
import ConversationSearchRequest from '../com.ultracart.admin.v2.models/ConversationSearchRequest';
import ConversationSearchResponse from '../com.ultracart.admin.v2.models/ConversationSearchResponse';
import ConversationStartRequest from '../com.ultracart.admin.v2.models/ConversationStartRequest';
import ConversationStartResponse from '../com.ultracart.admin.v2.models/ConversationStartResponse';
import ConversationWebchatContext from '../com.ultracart.admin.v2.models/ConversationWebchatContext';
import ConversationWebchatQueueStatusUpdateRequest from '../com.ultracart.admin.v2.models/ConversationWebchatQueueStatusUpdateRequest';
import ConversationWebchatQueueStatusesResponse from '../com.ultracart.admin.v2.models/ConversationWebchatQueueStatusesResponse';
import ConversationsResponse from '../com.ultracart.admin.v2.models/ConversationsResponse';
import ErrorResponse from '../com.ultracart.admin.v2.models/ErrorResponse';

/**
* Conversation service.
* @module com.ultracart.admin.v2/ConversationApi
* @version 4.1.4
*/
export default class ConversationApi {

    /**
    * Constructs a new ConversationApi. 
    * @alias module:com.ultracart.admin.v2/ConversationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteConversationCannedMessage operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~deleteConversationCannedMessageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a conversation canned message
     * Delete a conversation canned message 
     * @param {Number} conversation_canned_message_oid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~deleteConversationCannedMessageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteConversationCannedMessage(conversation_canned_message_oid, callback) {
      let postBody = null;
      // verify the required parameter 'conversation_canned_message_oid' is set
      if (conversation_canned_message_oid === undefined || conversation_canned_message_oid === null) {
        throw new Error("Missing the required parameter 'conversation_canned_message_oid' when calling deleteConversationCannedMessage");
      }

      let pathParams = {
        'conversation_canned_message_oid': conversation_canned_message_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversation/canned_messages/{conversation_canned_message_oid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDepartment operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~deleteDepartmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a conversation department
     * Delete a conversation department 
     * @param {Number} conversation_department_oid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~deleteDepartmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDepartment(conversation_department_oid, callback) {
      let postBody = null;
      // verify the required parameter 'conversation_department_oid' is set
      if (conversation_department_oid === undefined || conversation_department_oid === null) {
        throw new Error("Missing the required parameter 'conversation_department_oid' when calling deleteDepartment");
      }

      let pathParams = {
        'conversation_department_oid': conversation_department_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversation/departments/{conversation_department_oid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEngagement operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~deleteEngagementCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a conversation engagement
     * Delete a conversation engagement 
     * @param {Number} conversation_engagement_oid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~deleteEngagementCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEngagement(conversation_engagement_oid, callback) {
      let postBody = null;
      // verify the required parameter 'conversation_engagement_oid' is set
      if (conversation_engagement_oid === undefined || conversation_engagement_oid === null) {
        throw new Error("Missing the required parameter 'conversation_engagement_oid' when calling deleteEngagement");
      }

      let pathParams = {
        'conversation_engagement_oid': conversation_engagement_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversation/engagements/{conversation_engagement_oid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePbxAgentVoicemail operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~deletePbxAgentVoicemailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Agent Voicemail
     * Delete pbx agent Voicemail 
     * @param {String} recording_sid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~deletePbxAgentVoicemailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePbxAgentVoicemail(recording_sid, callback) {
      let postBody = null;
      // verify the required parameter 'recording_sid' is set
      if (recording_sid === undefined || recording_sid === null) {
        throw new Error("Missing the required parameter 'recording_sid' when calling deletePbxAgentVoicemail");
      }

      let pathParams = {
        'recording_sid': recording_sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversation/pbx/agent/voicemails/{recording_sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePbxAudio operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~deletePbxAudioCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxAudioResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete pbx audio
     * Delete a pbx audio 
     * @param {String} conversationPbxAudioUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~deletePbxAudioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxAudioResponse}
     */
    deletePbxAudio(conversationPbxAudioUuid, callback) {
      let postBody = null;
      // verify the required parameter 'conversationPbxAudioUuid' is set
      if (conversationPbxAudioUuid === undefined || conversationPbxAudioUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxAudioUuid' when calling deletePbxAudio");
      }

      let pathParams = {
        'conversationPbxAudioUuid': conversationPbxAudioUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxAudioResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/audio/{conversationPbxAudioUuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePbxMenu operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~deletePbxMenuCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxMenuResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete pbx menu
     * Delete a pbx menu 
     * @param {String} conversationPbxMenuUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~deletePbxMenuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxMenuResponse}
     */
    deletePbxMenu(conversationPbxMenuUuid, callback) {
      let postBody = null;
      // verify the required parameter 'conversationPbxMenuUuid' is set
      if (conversationPbxMenuUuid === undefined || conversationPbxMenuUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxMenuUuid' when calling deletePbxMenu");
      }

      let pathParams = {
        'conversationPbxMenuUuid': conversationPbxMenuUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxMenuResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/menu/{conversationPbxMenuUuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePbxQueue operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~deletePbxQueueCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxQueueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete pbx queue
     * Delete a pbx queue 
     * @param {String} conversationPbxQueueUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~deletePbxQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxQueueResponse}
     */
    deletePbxQueue(conversationPbxQueueUuid, callback) {
      let postBody = null;
      // verify the required parameter 'conversationPbxQueueUuid' is set
      if (conversationPbxQueueUuid === undefined || conversationPbxQueueUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxQueueUuid' when calling deletePbxQueue");
      }

      let pathParams = {
        'conversationPbxQueueUuid': conversationPbxQueueUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxQueueResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/queue/{conversationPbxQueueUuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePbxQueueVoicemail operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~deletePbxQueueVoicemailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Queue Voicemail
     * Delete pbx queue Voicemail 
     * @param {String} queue_uuid 
     * @param {String} recording_sid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~deletePbxQueueVoicemailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePbxQueueVoicemail(queue_uuid, recording_sid, callback) {
      let postBody = null;
      // verify the required parameter 'queue_uuid' is set
      if (queue_uuid === undefined || queue_uuid === null) {
        throw new Error("Missing the required parameter 'queue_uuid' when calling deletePbxQueueVoicemail");
      }
      // verify the required parameter 'recording_sid' is set
      if (recording_sid === undefined || recording_sid === null) {
        throw new Error("Missing the required parameter 'recording_sid' when calling deletePbxQueueVoicemail");
      }

      let pathParams = {
        'queue_uuid': queue_uuid,
        'recording_sid': recording_sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversation/pbx/queues/{queue_uuid}/voicemails/{recording_sid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePbxTimeBased operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~deletePbxTimeBasedCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeBasedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete pbx timeBased
     * Delete a pbx timeBased 
     * @param {String} conversationPbxTimeBasedUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~deletePbxTimeBasedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxTimeBasedResponse}
     */
    deletePbxTimeBased(conversationPbxTimeBasedUuid, callback) {
      let postBody = null;
      // verify the required parameter 'conversationPbxTimeBasedUuid' is set
      if (conversationPbxTimeBasedUuid === undefined || conversationPbxTimeBasedUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxTimeBasedUuid' when calling deletePbxTimeBased");
      }

      let pathParams = {
        'conversationPbxTimeBasedUuid': conversationPbxTimeBasedUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxTimeBasedResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/time_based/{conversationPbxTimeBasedUuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePbxTimeRange operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~deletePbxTimeRangeCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeRangeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete pbx timeRange
     * Delete a pbx timeRange 
     * @param {String} conversationPbxTimeRangeUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~deletePbxTimeRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxTimeRangeResponse}
     */
    deletePbxTimeRange(conversationPbxTimeRangeUuid, callback) {
      let postBody = null;
      // verify the required parameter 'conversationPbxTimeRangeUuid' is set
      if (conversationPbxTimeRangeUuid === undefined || conversationPbxTimeRangeUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxTimeRangeUuid' when calling deletePbxTimeRange");
      }

      let pathParams = {
        'conversationPbxTimeRangeUuid': conversationPbxTimeRangeUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxTimeRangeResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/time_range/{conversationPbxTimeRangeUuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePbxVoicemailMailbox operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~deletePbxVoicemailMailboxCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMailboxResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete pbx voicemailMailbox
     * Delete a pbx voicemailMailbox 
     * @param {String} conversationPbxVoicemailMailboxUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~deletePbxVoicemailMailboxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMailboxResponse}
     */
    deletePbxVoicemailMailbox(conversationPbxVoicemailMailboxUuid, callback) {
      let postBody = null;
      // verify the required parameter 'conversationPbxVoicemailMailboxUuid' is set
      if (conversationPbxVoicemailMailboxUuid === undefined || conversationPbxVoicemailMailboxUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxVoicemailMailboxUuid' when calling deletePbxVoicemailMailbox");
      }

      let pathParams = {
        'conversationPbxVoicemailMailboxUuid': conversationPbxVoicemailMailboxUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxVoicemailMailboxResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/voicemail_mailbox/{conversationPbxVoicemailMailboxUuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAgentKeepAlive operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getAgentKeepAliveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Agent keep alive
     * Called periodically by the conversation API to keep the session alive. 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getAgentKeepAliveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAgentKeepAlive(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversation/agent/keepalive', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAgentProfile operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getAgentProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationAgentProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get agent profile
     * Retrieve the agents profile 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getAgentProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationAgentProfileResponse}
     */
    getAgentProfile(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationAgentProfileResponse;
      return this.apiClient.callApi(
        '/conversation/agent/profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAgentWebsocketAuthorization operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getAgentWebsocketAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationAgentAuthResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get agent websocket authorization
     * Retrieve a JWT to authorize an agent to make a websocket connection. 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getAgentWebsocketAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationAgentAuthResponse}
     */
    getAgentWebsocketAuthorization(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationAgentAuthResponse;
      return this.apiClient.callApi(
        '/conversation/agent/auth', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversation operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a conversation
     * Retrieve a conversation including the participants and messages 
     * @param {String} conversation_uuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationResponse}
     */
    getConversation(conversation_uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversation_uuid' is set
      if (conversation_uuid === undefined || conversation_uuid === null) {
        throw new Error("Missing the required parameter 'conversation_uuid' when calling getConversation");
      }

      let pathParams = {
        'conversation_uuid': conversation_uuid
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationResponse;
      return this.apiClient.callApi(
        '/conversation/conversations/{conversation_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationCannedMessages operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationCannedMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationCannedMessagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of canned messages ordered by short_code
     * Retrieve a list of canned messages ordered by short_code 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationCannedMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationCannedMessagesResponse}
     */
    getConversationCannedMessages(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationCannedMessagesResponse;
      return this.apiClient.callApi(
        '/conversation/canned_messages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationContext operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationContextCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationWebchatContext} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a webchat conversation context
     * Get a webchat conversation context 
     * @param {String} conversation_uuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationContextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationWebchatContext}
     */
    getConversationContext(conversation_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'conversation_uuid' is set
      if (conversation_uuid === undefined || conversation_uuid === null) {
        throw new Error("Missing the required parameter 'conversation_uuid' when calling getConversationContext");
      }

      let pathParams = {
        'conversation_uuid': conversation_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationWebchatContext;
      return this.apiClient.callApi(
        '/conversation/conversations/{conversation_uuid}/context', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationDepartmentMemberList operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationDepartmentMemberListCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationDepartmentMembersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of possible department members
     * Retrieve a list of possible department members 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationDepartmentMemberListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationDepartmentMembersResponse}
     */
    getConversationDepartmentMemberList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationDepartmentMembersResponse;
      return this.apiClient.callApi(
        '/conversation/department_members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationDepartments operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationDepartmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationDepartmentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of departments ordered by name
     * Retrieve a list of departments ordered by name 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationDepartmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationDepartmentsResponse}
     */
    getConversationDepartments(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationDepartmentsResponse;
      return this.apiClient.callApi(
        '/conversation/departments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationEngagement operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationEngagementCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationEngagementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an engagement
     * Retrieve an engagement 
     * @param {Number} conversation_engagement_oid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationEngagementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationEngagementResponse}
     */
    getConversationEngagement(conversation_engagement_oid, callback) {
      let postBody = null;
      // verify the required parameter 'conversation_engagement_oid' is set
      if (conversation_engagement_oid === undefined || conversation_engagement_oid === null) {
        throw new Error("Missing the required parameter 'conversation_engagement_oid' when calling getConversationEngagement");
      }

      let pathParams = {
        'conversation_engagement_oid': conversation_engagement_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationEngagementResponse;
      return this.apiClient.callApi(
        '/conversation/engagements/{conversation_engagement_oid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationEngagements operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationEngagementsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationEngagementsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of engagements ordered by name
     * Retrieve a list of engagements ordered by name 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationEngagementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationEngagementsResponse}
     */
    getConversationEngagements(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationEngagementsResponse;
      return this.apiClient.callApi(
        '/conversation/engagements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationMessages operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationMessagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve conversation messages
     * Retrieve conversation messages since a particular time 
     * @param {String} conversation_uuid 
     * @param {Number} since 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationMessagesResponse}
     */
    getConversationMessages(conversation_uuid, since, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversation_uuid' is set
      if (conversation_uuid === undefined || conversation_uuid === null) {
        throw new Error("Missing the required parameter 'conversation_uuid' when calling getConversationMessages");
      }
      // verify the required parameter 'since' is set
      if (since === undefined || since === null) {
        throw new Error("Missing the required parameter 'since' when calling getConversationMessages");
      }

      let pathParams = {
        'conversation_uuid': conversation_uuid,
        'since': since
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationMessagesResponse;
      return this.apiClient.callApi(
        '/conversation/conversations/{conversation_uuid}/messages/{since}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationMultimediaUploadUrl operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationMultimediaUploadUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationMultimediaUploadUrlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a presigned conversation multimedia upload URL
     * Get a presigned conversation multimedia upload URL 
     * @param {String} extension 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationMultimediaUploadUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationMultimediaUploadUrlResponse}
     */
    getConversationMultimediaUploadUrl(extension, callback) {
      let postBody = null;
      // verify the required parameter 'extension' is set
      if (extension === undefined || extension === null) {
        throw new Error("Missing the required parameter 'extension' when calling getConversationMultimediaUploadUrl");
      }

      let pathParams = {
        'extension': extension
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationMultimediaUploadUrlResponse;
      return this.apiClient.callApi(
        '/conversation/upload_url/{extension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationPbxAudioUploadUrl operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationPbxAudioUploadUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxAudioUploadUrlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a pre-signed conversation multimedia upload URL
     * Get a pre-signed conversation multimedia upload URL 
     * @param {String} extension 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationPbxAudioUploadUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxAudioUploadUrlResponse}
     */
    getConversationPbxAudioUploadUrl(extension, callback) {
      let postBody = null;
      // verify the required parameter 'extension' is set
      if (extension === undefined || extension === null) {
        throw new Error("Missing the required parameter 'extension' when calling getConversationPbxAudioUploadUrl");
      }

      let pathParams = {
        'extension': extension
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxAudioUploadUrlResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/audio/upload_url/{extension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationPbxCustomerSnapshot operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationPbxCustomerSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxCustomerSnapshotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get orders and customer information for a phone number
     * Retrieves all the orders, auto orders, and customer profile for a given phone number 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxCustomerSnapshotRequest} pbx_customer_snapshot_request Conversation pbx customer snapshot request
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationPbxCustomerSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxCustomerSnapshotResponse}
     */
    getConversationPbxCustomerSnapshot(pbx_customer_snapshot_request, callback) {
      let postBody = pbx_customer_snapshot_request;
      // verify the required parameter 'pbx_customer_snapshot_request' is set
      if (pbx_customer_snapshot_request === undefined || pbx_customer_snapshot_request === null) {
        throw new Error("Missing the required parameter 'pbx_customer_snapshot_request' when calling getConversationPbxCustomerSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversationPbxCustomerSnapshotResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/customer_snapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationPermissions operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPermissionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve conversation permissions
     * Retrieve conversation permissions 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPermissionsResponse}
     */
    getConversationPermissions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPermissionsResponse;
      return this.apiClient.callApi(
        '/conversation/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationWebchatQueueStatuses operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationWebchatQueueStatusesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationWebchatQueueStatusesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a conversation webchat queue statuses
     * Retrieve a conversation webchat queue statuses including agent status and queue entries 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationWebchatQueueStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationWebchatQueueStatusesResponse}
     */
    getConversationWebchatQueueStatuses(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationWebchatQueueStatusesResponse;
      return this.apiClient.callApi(
        '/conversation/conversations/queues/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversations operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of conversation summaries newest to oldest
     * Retrieve a list of conversation summaries that are ordered newest to oldest, include the most recent message and whether its been read. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.medium 
     * @param {String} opts.before 
     * @param {Number} opts._limit The maximum number of records to return on this one API call. (Max 200) (default to 100)
     * @param {Number} opts._offset Pagination of the record set.  Offset is a zero based index. (default to 0)
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationsResponse}
     */
    getConversations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'medium': opts['medium'],
        'before': opts['before'],
        '_limit': opts['_limit'],
        '_offset': opts['_offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationsResponse;
      return this.apiClient.callApi(
        '/conversation/conversations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationsAutocomplete operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationsAutocompleteCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationAutocompleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of matching terms for a search field
     * Retrieve a list of matching terms for a search field 
     * @param {module:com.ultracart.admin.v2.models/ConversationAutocompleteRequest} autocomplete_request Autocomplete Request
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationsAutocompleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationAutocompleteResponse}
     */
    getConversationsAutocomplete(autocomplete_request, callback) {
      let postBody = autocomplete_request;
      // verify the required parameter 'autocomplete_request' is set
      if (autocomplete_request === undefined || autocomplete_request === null) {
        throw new Error("Missing the required parameter 'autocomplete_request' when calling getConversationsAutocomplete");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversationAutocompleteResponse;
      return this.apiClient.callApi(
        '/conversation/conversations/autocomplete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationsSearch operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getConversationsSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search conversations
     * Search conversations 
     * @param {module:com.ultracart.admin.v2.models/ConversationSearchRequest} search_request Search Request
     * @param {module:com.ultracart.admin.v2/ConversationApi~getConversationsSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationSearchResponse}
     */
    getConversationsSearch(search_request, callback) {
      let postBody = search_request;
      // verify the required parameter 'search_request' is set
      if (search_request === undefined || search_request === null) {
        throw new Error("Missing the required parameter 'search_request' when calling getConversationsSearch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversationSearchResponse;
      return this.apiClient.callApi(
        '/conversation/conversations/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLocationsForEngagement operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getLocationsForEngagementCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationLocationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get location data for engagement configuration
     * Get location data for engagement configuration 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getLocationsForEngagementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationLocationsResponse}
     */
    getLocationsForEngagement(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationLocationsResponse;
      return this.apiClient.callApi(
        '/conversation/locations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxAgent operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxAgentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxAgentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx agent
     * Retrieve a pbx agent 
     * @param {String} conversationPbxAgentUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxAgentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxAgentResponse}
     */
    getPbxAgent(conversationPbxAgentUuid, callback) {
      let postBody = null;
      // verify the required parameter 'conversationPbxAgentUuid' is set
      if (conversationPbxAgentUuid === undefined || conversationPbxAgentUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxAgentUuid' when calling getPbxAgent");
      }

      let pathParams = {
        'conversationPbxAgentUuid': conversationPbxAgentUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxAgentResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/agent/{conversationPbxAgentUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxAgentVoicemail operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxAgentVoicemailCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Agent Voicemail
     * Retrieve pbx agent Voicemail 
     * @param {String} recording_sid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxAgentVoicemailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMessageResponse}
     */
    getPbxAgentVoicemail(recording_sid, callback) {
      let postBody = null;
      // verify the required parameter 'recording_sid' is set
      if (recording_sid === undefined || recording_sid === null) {
        throw new Error("Missing the required parameter 'recording_sid' when calling getPbxAgentVoicemail");
      }

      let pathParams = {
        'recording_sid': recording_sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxVoicemailMessageResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/agent/voicemails/{recording_sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxAgentVoicemails operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxAgentVoicemailsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMessageSummariesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Agent Voicemails
     * Retrieve pbx agent Voicemails 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxAgentVoicemailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMessageSummariesResponse}
     */
    getPbxAgentVoicemails(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxVoicemailMessageSummariesResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/agent/voicemails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxAgents operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxAgentsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxAgentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx agents
     * Retrieve pbx agents 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxAgentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxAgentsResponse}
     */
    getPbxAgents(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxAgentsResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/agent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxAudio operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxAudioCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxAudioResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx audio
     * Retrieve a pbx audio 
     * @param {String} conversationPbxAudioUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxAudioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxAudioResponse}
     */
    getPbxAudio(conversationPbxAudioUuid, callback) {
      let postBody = null;
      // verify the required parameter 'conversationPbxAudioUuid' is set
      if (conversationPbxAudioUuid === undefined || conversationPbxAudioUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxAudioUuid' when calling getPbxAudio");
      }

      let pathParams = {
        'conversationPbxAudioUuid': conversationPbxAudioUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxAudioResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/audio/{conversationPbxAudioUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxAudioUsage operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxAudioUsageCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxAudioUsageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx audio usage
     * Retrieve a pbx audio usage 
     * @param {String} conversationPbxAudioUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxAudioUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxAudioUsageResponse}
     */
    getPbxAudioUsage(conversationPbxAudioUuid, callback) {
      let postBody = null;
      // verify the required parameter 'conversationPbxAudioUuid' is set
      if (conversationPbxAudioUuid === undefined || conversationPbxAudioUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxAudioUuid' when calling getPbxAudioUsage");
      }

      let pathParams = {
        'conversationPbxAudioUuid': conversationPbxAudioUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxAudioUsageResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/audio/{conversationPbxAudioUuid}/usage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxAudios operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxAudiosCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxAudiosResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx audios
     * Retrieve pbx audios 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxAudiosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxAudiosResponse}
     */
    getPbxAudios(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxAudiosResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/audio', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxMenu operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxMenuCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxMenuResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx menu
     * Retrieve a pbx menu 
     * @param {String} conversationPbxMenuUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxMenuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxMenuResponse}
     */
    getPbxMenu(conversationPbxMenuUuid, callback) {
      let postBody = null;
      // verify the required parameter 'conversationPbxMenuUuid' is set
      if (conversationPbxMenuUuid === undefined || conversationPbxMenuUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxMenuUuid' when calling getPbxMenu");
      }

      let pathParams = {
        'conversationPbxMenuUuid': conversationPbxMenuUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxMenuResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/menu/{conversationPbxMenuUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxMenus operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxMenusCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxMenusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx menus
     * Retrieve pbx menus 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxMenusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxMenusResponse}
     */
    getPbxMenus(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxMenusResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/menu', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxPhoneNumber operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxPhoneNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxPhoneNumberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx phoneNumber
     * Retrieve a pbx phoneNumber 
     * @param {String} conversationPbxPhoneNumberUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxPhoneNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxPhoneNumberResponse}
     */
    getPbxPhoneNumber(conversationPbxPhoneNumberUuid, callback) {
      let postBody = null;
      // verify the required parameter 'conversationPbxPhoneNumberUuid' is set
      if (conversationPbxPhoneNumberUuid === undefined || conversationPbxPhoneNumberUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxPhoneNumberUuid' when calling getPbxPhoneNumber");
      }

      let pathParams = {
        'conversationPbxPhoneNumberUuid': conversationPbxPhoneNumberUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxPhoneNumberResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/phone_number/{conversationPbxPhoneNumberUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxPhoneNumbers operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxPhoneNumbersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxPhoneNumbersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx phoneNumbers
     * Retrieve pbx phoneNumbers 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxPhoneNumbersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxPhoneNumbersResponse}
     */
    getPbxPhoneNumbers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxPhoneNumbersResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/phone_number', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxQueue operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxQueueCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxQueueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx queue
     * Retrieve a pbx queue 
     * @param {String} conversationPbxQueueUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxQueueResponse}
     */
    getPbxQueue(conversationPbxQueueUuid, callback) {
      let postBody = null;
      // verify the required parameter 'conversationPbxQueueUuid' is set
      if (conversationPbxQueueUuid === undefined || conversationPbxQueueUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxQueueUuid' when calling getPbxQueue");
      }

      let pathParams = {
        'conversationPbxQueueUuid': conversationPbxQueueUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxQueueResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/queue/{conversationPbxQueueUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxQueueVoicemail operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxQueueVoicemailCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Queue Voicemail
     * Retrieve pbx queue Voicemail 
     * @param {String} queue_uuid 
     * @param {String} recording_sid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxQueueVoicemailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMessageResponse}
     */
    getPbxQueueVoicemail(queue_uuid, recording_sid, callback) {
      let postBody = null;
      // verify the required parameter 'queue_uuid' is set
      if (queue_uuid === undefined || queue_uuid === null) {
        throw new Error("Missing the required parameter 'queue_uuid' when calling getPbxQueueVoicemail");
      }
      // verify the required parameter 'recording_sid' is set
      if (recording_sid === undefined || recording_sid === null) {
        throw new Error("Missing the required parameter 'recording_sid' when calling getPbxQueueVoicemail");
      }

      let pathParams = {
        'queue_uuid': queue_uuid,
        'recording_sid': recording_sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxVoicemailMessageResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/queues/{queue_uuid}/voicemails/{recording_sid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxQueueVoicemails operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxQueueVoicemailsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMessageSummariesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Queue Voicemails
     * Retrieve pbx queue voicemails 
     * @param {String} queue_uuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxQueueVoicemailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMessageSummariesResponse}
     */
    getPbxQueueVoicemails(queue_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'queue_uuid' is set
      if (queue_uuid === undefined || queue_uuid === null) {
        throw new Error("Missing the required parameter 'queue_uuid' when calling getPbxQueueVoicemails");
      }

      let pathParams = {
        'queue_uuid': queue_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxVoicemailMessageSummariesResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/queues/{queue_uuid}/voicemails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxQueues operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxQueuesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxQueuesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx queues
     * Retrieve pbx queues 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxQueuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxQueuesResponse}
     */
    getPbxQueues(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxQueuesResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/queue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxTimeBased operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxTimeBasedCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeBasedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx timeBased
     * Retrieve a pbx timeBased 
     * @param {String} conversationPbxTimeBasedUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxTimeBasedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxTimeBasedResponse}
     */
    getPbxTimeBased(conversationPbxTimeBasedUuid, callback) {
      let postBody = null;
      // verify the required parameter 'conversationPbxTimeBasedUuid' is set
      if (conversationPbxTimeBasedUuid === undefined || conversationPbxTimeBasedUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxTimeBasedUuid' when calling getPbxTimeBased");
      }

      let pathParams = {
        'conversationPbxTimeBasedUuid': conversationPbxTimeBasedUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxTimeBasedResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/time_based/{conversationPbxTimeBasedUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxTimeBaseds operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxTimeBasedsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeBasedsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx timeBaseds
     * Retrieve pbx timeBaseds 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxTimeBasedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxTimeBasedsResponse}
     */
    getPbxTimeBaseds(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxTimeBasedsResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/time_based', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxTimeRange operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxTimeRangeCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeRangeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx timeRange
     * Retrieve a pbx timeRange 
     * @param {String} conversationPbxTimeRangeUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxTimeRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxTimeRangeResponse}
     */
    getPbxTimeRange(conversationPbxTimeRangeUuid, callback) {
      let postBody = null;
      // verify the required parameter 'conversationPbxTimeRangeUuid' is set
      if (conversationPbxTimeRangeUuid === undefined || conversationPbxTimeRangeUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxTimeRangeUuid' when calling getPbxTimeRange");
      }

      let pathParams = {
        'conversationPbxTimeRangeUuid': conversationPbxTimeRangeUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxTimeRangeResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/time_range/{conversationPbxTimeRangeUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxTimeRanges operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxTimeRangesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeRangesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx timeRanges
     * Retrieve pbx timeRanges 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxTimeRangesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxTimeRangesResponse}
     */
    getPbxTimeRanges(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxTimeRangesResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/time_range', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxVoicemailMailbox operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxVoicemailMailboxCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMailboxResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx voicemailMailbox
     * Retrieve a pbx voicemailMailbox 
     * @param {String} conversationPbxVoicemailMailboxUuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxVoicemailMailboxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMailboxResponse}
     */
    getPbxVoicemailMailbox(conversationPbxVoicemailMailboxUuid, callback) {
      let postBody = null;
      // verify the required parameter 'conversationPbxVoicemailMailboxUuid' is set
      if (conversationPbxVoicemailMailboxUuid === undefined || conversationPbxVoicemailMailboxUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxVoicemailMailboxUuid' when calling getPbxVoicemailMailbox");
      }

      let pathParams = {
        'conversationPbxVoicemailMailboxUuid': conversationPbxVoicemailMailboxUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxVoicemailMailboxResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/voicemail_mailbox/{conversationPbxVoicemailMailboxUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPbxVoicemailMailboxes operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~getPbxVoicemailMailboxesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMailboxesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pbx voicemailMailboxes
     * Retrieve pbx voicemailMailboxes 
     * @param {module:com.ultracart.admin.v2/ConversationApi~getPbxVoicemailMailboxesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMailboxesResponse}
     */
    getPbxVoicemailMailboxes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConversationPbxVoicemailMailboxesResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/voicemail_mailbox', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertConversationCannedMessage operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~insertConversationCannedMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationCannedMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a canned message
     * Insert a canned message 
     * @param {module:com.ultracart.admin.v2.models/ConversationCannedMessage} canned_message Canned message
     * @param {module:com.ultracart.admin.v2/ConversationApi~insertConversationCannedMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationCannedMessageResponse}
     */
    insertConversationCannedMessage(canned_message, callback) {
      let postBody = canned_message;
      // verify the required parameter 'canned_message' is set
      if (canned_message === undefined || canned_message === null) {
        throw new Error("Missing the required parameter 'canned_message' when calling insertConversationCannedMessage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversationCannedMessageResponse;
      return this.apiClient.callApi(
        '/conversation/canned_messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertConversationDepartment operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~insertConversationDepartmentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationDepartmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a department
     * Insert a department 
     * @param {module:com.ultracart.admin.v2.models/ConversationDepartment} department Department
     * @param {module:com.ultracart.admin.v2/ConversationApi~insertConversationDepartmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationDepartmentResponse}
     */
    insertConversationDepartment(department, callback) {
      let postBody = department;
      // verify the required parameter 'department' is set
      if (department === undefined || department === null) {
        throw new Error("Missing the required parameter 'department' when calling insertConversationDepartment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversationDepartmentResponse;
      return this.apiClient.callApi(
        '/conversation/departments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertConversationEngagement operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~insertConversationEngagementCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationEngagementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert a engagement
     * Insert a engagement 
     * @param {module:com.ultracart.admin.v2.models/ConversationEngagement} engagement Engagement
     * @param {module:com.ultracart.admin.v2/ConversationApi~insertConversationEngagementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationEngagementResponse}
     */
    insertConversationEngagement(engagement, callback) {
      let postBody = engagement;
      // verify the required parameter 'engagement' is set
      if (engagement === undefined || engagement === null) {
        throw new Error("Missing the required parameter 'engagement' when calling insertConversationEngagement");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversationEngagementResponse;
      return this.apiClient.callApi(
        '/conversation/engagements', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertPbxAudio operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~insertPbxAudioCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxAudioResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert pbx audio
     * Insert a pbx audio 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxAudio} pbx_audio Pbx Audio
     * @param {module:com.ultracart.admin.v2/ConversationApi~insertPbxAudioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxAudioResponse}
     */
    insertPbxAudio(pbx_audio, callback) {
      let postBody = pbx_audio;
      // verify the required parameter 'pbx_audio' is set
      if (pbx_audio === undefined || pbx_audio === null) {
        throw new Error("Missing the required parameter 'pbx_audio' when calling insertPbxAudio");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversationPbxAudioResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/audio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertPbxMenu operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~insertPbxMenuCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxMenuResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert pbx menu
     * Insert a pbx menu 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxMenu} pbx_menu Pbx Menu
     * @param {module:com.ultracart.admin.v2/ConversationApi~insertPbxMenuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxMenuResponse}
     */
    insertPbxMenu(pbx_menu, callback) {
      let postBody = pbx_menu;
      // verify the required parameter 'pbx_menu' is set
      if (pbx_menu === undefined || pbx_menu === null) {
        throw new Error("Missing the required parameter 'pbx_menu' when calling insertPbxMenu");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversationPbxMenuResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/menu', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertPbxQueue operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~insertPbxQueueCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxQueueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert pbx queue
     * Insert a pbx queue 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxQueue} pbx_queue Pbx Queue
     * @param {module:com.ultracart.admin.v2/ConversationApi~insertPbxQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxQueueResponse}
     */
    insertPbxQueue(pbx_queue, callback) {
      let postBody = pbx_queue;
      // verify the required parameter 'pbx_queue' is set
      if (pbx_queue === undefined || pbx_queue === null) {
        throw new Error("Missing the required parameter 'pbx_queue' when calling insertPbxQueue");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversationPbxQueueResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/queue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertPbxTimeBased operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~insertPbxTimeBasedCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeBasedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert pbx timeBased
     * Insert a pbx timeBased 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeBased} pbx_timeBased Pbx TimeBased
     * @param {module:com.ultracart.admin.v2/ConversationApi~insertPbxTimeBasedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxTimeBasedResponse}
     */
    insertPbxTimeBased(pbx_timeBased, callback) {
      let postBody = pbx_timeBased;
      // verify the required parameter 'pbx_timeBased' is set
      if (pbx_timeBased === undefined || pbx_timeBased === null) {
        throw new Error("Missing the required parameter 'pbx_timeBased' when calling insertPbxTimeBased");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversationPbxTimeBasedResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/time_based', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertPbxTimeRange operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~insertPbxTimeRangeCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeRangeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert pbx timeRange
     * Insert a pbx timeRange 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeRange} pbx_timeRange Pbx TimeRange
     * @param {module:com.ultracart.admin.v2/ConversationApi~insertPbxTimeRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxTimeRangeResponse}
     */
    insertPbxTimeRange(pbx_timeRange, callback) {
      let postBody = pbx_timeRange;
      // verify the required parameter 'pbx_timeRange' is set
      if (pbx_timeRange === undefined || pbx_timeRange === null) {
        throw new Error("Missing the required parameter 'pbx_timeRange' when calling insertPbxTimeRange");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversationPbxTimeRangeResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/time_range', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertPbxVoicemailMailbox operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~insertPbxVoicemailMailboxCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMailboxResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert pbx voicemailMailbox
     * Insert a pbx voicemailMailbox 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMailbox} pbx_voicemailMailbox Pbx VoicemailMailbox
     * @param {module:com.ultracart.admin.v2/ConversationApi~insertPbxVoicemailMailboxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMailboxResponse}
     */
    insertPbxVoicemailMailbox(pbx_voicemailMailbox, callback) {
      let postBody = pbx_voicemailMailbox;
      // verify the required parameter 'pbx_voicemailMailbox' is set
      if (pbx_voicemailMailbox === undefined || pbx_voicemailMailbox === null) {
        throw new Error("Missing the required parameter 'pbx_voicemailMailbox' when calling insertPbxVoicemailMailbox");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversationPbxVoicemailMailboxResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/voicemail_mailbox', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the joinConversation operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~joinConversationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Join a conversation
     * Join a conversation 
     * @param {String} conversation_uuid 
     * @param {Object} opts Optional parameters
     * @param {module:com.ultracart.admin.v2.models/ConversationJoinRequest} opts.join_request Join request
     * @param {module:com.ultracart.admin.v2/ConversationApi~joinConversationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    joinConversation(conversation_uuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['join_request'];
      // verify the required parameter 'conversation_uuid' is set
      if (conversation_uuid === undefined || conversation_uuid === null) {
        throw new Error("Missing the required parameter 'conversation_uuid' when calling joinConversation");
      }

      let pathParams = {
        'conversation_uuid': conversation_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversation/conversations/{conversation_uuid}/join', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leaveConversation operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~leaveConversationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Leave a conversation
     * Leave a conversation 
     * @param {String} conversation_uuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~leaveConversationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    leaveConversation(conversation_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'conversation_uuid' is set
      if (conversation_uuid === undefined || conversation_uuid === null) {
        throw new Error("Missing the required parameter 'conversation_uuid' when calling leaveConversation");
      }

      let pathParams = {
        'conversation_uuid': conversation_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversation/conversations/{conversation_uuid}/leave', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listenedPbxAgentVoicemail operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~listenedPbxAgentVoicemailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listened Agent Voicemail
     * Listened pbx agent Voicemail 
     * @param {String} recording_sid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~listenedPbxAgentVoicemailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listenedPbxAgentVoicemail(recording_sid, callback) {
      let postBody = null;
      // verify the required parameter 'recording_sid' is set
      if (recording_sid === undefined || recording_sid === null) {
        throw new Error("Missing the required parameter 'recording_sid' when calling listenedPbxAgentVoicemail");
      }

      let pathParams = {
        'recording_sid': recording_sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversation/pbx/agent/voicemails/{recording_sid}/listened', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listenedPbxQueueVoicemail operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~listenedPbxQueueVoicemailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Listened Queue Voicemail
     * Listened pbx queue Voicemail 
     * @param {String} queue_uuid 
     * @param {String} recording_sid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~listenedPbxQueueVoicemailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listenedPbxQueueVoicemail(queue_uuid, recording_sid, callback) {
      let postBody = null;
      // verify the required parameter 'queue_uuid' is set
      if (queue_uuid === undefined || queue_uuid === null) {
        throw new Error("Missing the required parameter 'queue_uuid' when calling listenedPbxQueueVoicemail");
      }
      // verify the required parameter 'recording_sid' is set
      if (recording_sid === undefined || recording_sid === null) {
        throw new Error("Missing the required parameter 'recording_sid' when calling listenedPbxQueueVoicemail");
      }

      let pathParams = {
        'queue_uuid': queue_uuid,
        'recording_sid': recording_sid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversation/pbx/queues/{queue_uuid}/voicemails/{recording_sid}/listened', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the markReadConversation operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~markReadConversationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark a conversation as read
     * Mark a conversation as read 
     * @param {String} conversation_uuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~markReadConversationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    markReadConversation(conversation_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'conversation_uuid' is set
      if (conversation_uuid === undefined || conversation_uuid === null) {
        throw new Error("Missing the required parameter 'conversation_uuid' when calling markReadConversation");
      }

      let pathParams = {
        'conversation_uuid': conversation_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversation/conversations/{conversation_uuid}/markread', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetConversationPbxQueueStatistics operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~resetConversationPbxQueueStatisticsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * reset statistics within the queue
     * reset statistics within the queue 
     * @param {String} queue_uuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~resetConversationPbxQueueStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetConversationPbxQueueStatistics(queue_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'queue_uuid' is set
      if (queue_uuid === undefined || queue_uuid === null) {
        throw new Error("Missing the required parameter 'queue_uuid' when calling resetConversationPbxQueueStatistics");
      }

      let pathParams = {
        'queue_uuid': queue_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversation/pbx/queues/{queue_uuid}/reset_statistics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchConversationCannedMessages operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~searchConversationCannedMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationCannedMessagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for canned messages by short_code
     * Search for canned messages by short_code 
     * @param {module:com.ultracart.admin.v2.models/ConversationCannedMessagesSearch} search_request Search request
     * @param {module:com.ultracart.admin.v2/ConversationApi~searchConversationCannedMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationCannedMessagesResponse}
     */
    searchConversationCannedMessages(search_request, callback) {
      let postBody = search_request;
      // verify the required parameter 'search_request' is set
      if (search_request === undefined || search_request === null) {
        throw new Error("Missing the required parameter 'search_request' when calling searchConversationCannedMessages");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversationCannedMessagesResponse;
      return this.apiClient.callApi(
        '/conversation/canned_messages/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the smsUnsubscribeConversation operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~smsUnsubscribeConversationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unsubscribe any SMS participants in this conversation
     * Unsubscribe any SMS participants in this conversation 
     * @param {String} conversation_uuid 
     * @param {module:com.ultracart.admin.v2/ConversationApi~smsUnsubscribeConversationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    smsUnsubscribeConversation(conversation_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'conversation_uuid' is set
      if (conversation_uuid === undefined || conversation_uuid === null) {
        throw new Error("Missing the required parameter 'conversation_uuid' when calling smsUnsubscribeConversation");
      }

      let pathParams = {
        'conversation_uuid': conversation_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversation/conversations/{conversation_uuid}/sms_unsubscribe', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startConversation operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~startConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationStartResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a conversation
     * Start a new conversation 
     * @param {module:com.ultracart.admin.v2.models/ConversationStartRequest} start_request Start request
     * @param {module:com.ultracart.admin.v2/ConversationApi~startConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationStartResponse}
     */
    startConversation(start_request, callback) {
      let postBody = start_request;
      // verify the required parameter 'start_request' is set
      if (start_request === undefined || start_request === null) {
        throw new Error("Missing the required parameter 'start_request' when calling startConversation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversationStartResponse;
      return this.apiClient.callApi(
        '/conversation/conversations', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAgentProfile operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~updateAgentProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationAgentProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update agent profile
     * Update agent profile 
     * @param {module:com.ultracart.admin.v2.models/ConversationAgentProfile} profile_request Profile request
     * @param {module:com.ultracart.admin.v2/ConversationApi~updateAgentProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationAgentProfileResponse}
     */
    updateAgentProfile(profile_request, callback) {
      let postBody = profile_request;
      // verify the required parameter 'profile_request' is set
      if (profile_request === undefined || profile_request === null) {
        throw new Error("Missing the required parameter 'profile_request' when calling updateAgentProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversationAgentProfileResponse;
      return this.apiClient.callApi(
        '/conversation/agent/profile', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConversationCannedMessage operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~updateConversationCannedMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationCannedMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a canned message
     * Update a canned message 
     * @param {Number} conversation_canned_message_oid 
     * @param {module:com.ultracart.admin.v2.models/ConversationCannedMessage} canned_message Canned message
     * @param {module:com.ultracart.admin.v2/ConversationApi~updateConversationCannedMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationCannedMessageResponse}
     */
    updateConversationCannedMessage(conversation_canned_message_oid, canned_message, callback) {
      let postBody = canned_message;
      // verify the required parameter 'conversation_canned_message_oid' is set
      if (conversation_canned_message_oid === undefined || conversation_canned_message_oid === null) {
        throw new Error("Missing the required parameter 'conversation_canned_message_oid' when calling updateConversationCannedMessage");
      }
      // verify the required parameter 'canned_message' is set
      if (canned_message === undefined || canned_message === null) {
        throw new Error("Missing the required parameter 'canned_message' when calling updateConversationCannedMessage");
      }

      let pathParams = {
        'conversation_canned_message_oid': conversation_canned_message_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversationCannedMessageResponse;
      return this.apiClient.callApi(
        '/conversation/canned_messages/{conversation_canned_message_oid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConversationDepartment operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~updateConversationDepartmentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationDepartmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a department
     * Update a department 
     * @param {Number} conversation_department_oid 
     * @param {module:com.ultracart.admin.v2.models/ConversationDepartment} department Department
     * @param {module:com.ultracart.admin.v2/ConversationApi~updateConversationDepartmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationDepartmentResponse}
     */
    updateConversationDepartment(conversation_department_oid, department, callback) {
      let postBody = department;
      // verify the required parameter 'conversation_department_oid' is set
      if (conversation_department_oid === undefined || conversation_department_oid === null) {
        throw new Error("Missing the required parameter 'conversation_department_oid' when calling updateConversationDepartment");
      }
      // verify the required parameter 'department' is set
      if (department === undefined || department === null) {
        throw new Error("Missing the required parameter 'department' when calling updateConversationDepartment");
      }

      let pathParams = {
        'conversation_department_oid': conversation_department_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversationDepartmentResponse;
      return this.apiClient.callApi(
        '/conversation/departments/{conversation_department_oid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConversationEngagement operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~updateConversationEngagementCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationEngagementResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a engagement
     * Update a engagement 
     * @param {Number} conversation_engagement_oid 
     * @param {module:com.ultracart.admin.v2.models/ConversationEngagement} engagement Engagement
     * @param {module:com.ultracart.admin.v2/ConversationApi~updateConversationEngagementCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationEngagementResponse}
     */
    updateConversationEngagement(conversation_engagement_oid, engagement, callback) {
      let postBody = engagement;
      // verify the required parameter 'conversation_engagement_oid' is set
      if (conversation_engagement_oid === undefined || conversation_engagement_oid === null) {
        throw new Error("Missing the required parameter 'conversation_engagement_oid' when calling updateConversationEngagement");
      }
      // verify the required parameter 'engagement' is set
      if (engagement === undefined || engagement === null) {
        throw new Error("Missing the required parameter 'engagement' when calling updateConversationEngagement");
      }

      let pathParams = {
        'conversation_engagement_oid': conversation_engagement_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversationEngagementResponse;
      return this.apiClient.callApi(
        '/conversation/engagements/{conversation_engagement_oid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConversationWebchatQueueStatus operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~updateConversationWebchatQueueStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update status within the queue
     * Update status within the queue 
     * @param {String} queue_name 
     * @param {module:com.ultracart.admin.v2.models/ConversationWebchatQueueStatusUpdateRequest} status_request Status request
     * @param {module:com.ultracart.admin.v2/ConversationApi~updateConversationWebchatQueueStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateConversationWebchatQueueStatus(queue_name, status_request, callback) {
      let postBody = status_request;
      // verify the required parameter 'queue_name' is set
      if (queue_name === undefined || queue_name === null) {
        throw new Error("Missing the required parameter 'queue_name' when calling updateConversationWebchatQueueStatus");
      }
      // verify the required parameter 'status_request' is set
      if (status_request === undefined || status_request === null) {
        throw new Error("Missing the required parameter 'status_request' when calling updateConversationWebchatQueueStatus");
      }

      let pathParams = {
        'queue_name': queue_name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversation/conversations/queues/{queue_name}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePbxAgent operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~updatePbxAgentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxAgentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update pbx agent
     * Update a pbx agent 
     * @param {String} conversationPbxAgentUuid 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxAgent} pbx_agent Pbx Agent
     * @param {module:com.ultracart.admin.v2/ConversationApi~updatePbxAgentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxAgentResponse}
     */
    updatePbxAgent(conversationPbxAgentUuid, pbx_agent, callback) {
      let postBody = pbx_agent;
      // verify the required parameter 'conversationPbxAgentUuid' is set
      if (conversationPbxAgentUuid === undefined || conversationPbxAgentUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxAgentUuid' when calling updatePbxAgent");
      }
      // verify the required parameter 'pbx_agent' is set
      if (pbx_agent === undefined || pbx_agent === null) {
        throw new Error("Missing the required parameter 'pbx_agent' when calling updatePbxAgent");
      }

      let pathParams = {
        'conversationPbxAgentUuid': conversationPbxAgentUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversationPbxAgentResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/agent/{conversationPbxAgentUuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePbxAudio operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~updatePbxAudioCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxAudioResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update pbx audio
     * Update a pbx audio 
     * @param {String} conversationPbxAudioUuid 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxAudio} pbx_audio Pbx Audio
     * @param {module:com.ultracart.admin.v2/ConversationApi~updatePbxAudioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxAudioResponse}
     */
    updatePbxAudio(conversationPbxAudioUuid, pbx_audio, callback) {
      let postBody = pbx_audio;
      // verify the required parameter 'conversationPbxAudioUuid' is set
      if (conversationPbxAudioUuid === undefined || conversationPbxAudioUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxAudioUuid' when calling updatePbxAudio");
      }
      // verify the required parameter 'pbx_audio' is set
      if (pbx_audio === undefined || pbx_audio === null) {
        throw new Error("Missing the required parameter 'pbx_audio' when calling updatePbxAudio");
      }

      let pathParams = {
        'conversationPbxAudioUuid': conversationPbxAudioUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversationPbxAudioResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/audio/{conversationPbxAudioUuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePbxMenu operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~updatePbxMenuCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxMenuResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update pbx menu
     * Update a pbx menu 
     * @param {String} conversationPbxMenuUuid 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxMenu} pbx_menu Pbx Menu
     * @param {module:com.ultracart.admin.v2/ConversationApi~updatePbxMenuCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxMenuResponse}
     */
    updatePbxMenu(conversationPbxMenuUuid, pbx_menu, callback) {
      let postBody = pbx_menu;
      // verify the required parameter 'conversationPbxMenuUuid' is set
      if (conversationPbxMenuUuid === undefined || conversationPbxMenuUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxMenuUuid' when calling updatePbxMenu");
      }
      // verify the required parameter 'pbx_menu' is set
      if (pbx_menu === undefined || pbx_menu === null) {
        throw new Error("Missing the required parameter 'pbx_menu' when calling updatePbxMenu");
      }

      let pathParams = {
        'conversationPbxMenuUuid': conversationPbxMenuUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversationPbxMenuResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/menu/{conversationPbxMenuUuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePbxPhoneNumber operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~updatePbxPhoneNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxPhoneNumberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update pbx phoneNumber
     * Update a pbx phoneNumber 
     * @param {String} conversationPbxPhoneNumberUuid 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxPhoneNumber} pbx_phoneNumber Pbx PhoneNumber
     * @param {module:com.ultracart.admin.v2/ConversationApi~updatePbxPhoneNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxPhoneNumberResponse}
     */
    updatePbxPhoneNumber(conversationPbxPhoneNumberUuid, pbx_phoneNumber, callback) {
      let postBody = pbx_phoneNumber;
      // verify the required parameter 'conversationPbxPhoneNumberUuid' is set
      if (conversationPbxPhoneNumberUuid === undefined || conversationPbxPhoneNumberUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxPhoneNumberUuid' when calling updatePbxPhoneNumber");
      }
      // verify the required parameter 'pbx_phoneNumber' is set
      if (pbx_phoneNumber === undefined || pbx_phoneNumber === null) {
        throw new Error("Missing the required parameter 'pbx_phoneNumber' when calling updatePbxPhoneNumber");
      }

      let pathParams = {
        'conversationPbxPhoneNumberUuid': conversationPbxPhoneNumberUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversationPbxPhoneNumberResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/phone_number/{conversationPbxPhoneNumberUuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePbxQueue operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~updatePbxQueueCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxQueueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update pbx queue
     * Update a pbx queue 
     * @param {String} conversationPbxQueueUuid 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxQueue} pbx_queue Pbx Queue
     * @param {module:com.ultracart.admin.v2/ConversationApi~updatePbxQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxQueueResponse}
     */
    updatePbxQueue(conversationPbxQueueUuid, pbx_queue, callback) {
      let postBody = pbx_queue;
      // verify the required parameter 'conversationPbxQueueUuid' is set
      if (conversationPbxQueueUuid === undefined || conversationPbxQueueUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxQueueUuid' when calling updatePbxQueue");
      }
      // verify the required parameter 'pbx_queue' is set
      if (pbx_queue === undefined || pbx_queue === null) {
        throw new Error("Missing the required parameter 'pbx_queue' when calling updatePbxQueue");
      }

      let pathParams = {
        'conversationPbxQueueUuid': conversationPbxQueueUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversationPbxQueueResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/queue/{conversationPbxQueueUuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePbxTimeBased operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~updatePbxTimeBasedCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeBasedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update pbx timeBased
     * Update a pbx timeBased 
     * @param {String} conversationPbxTimeBasedUuid 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeBased} pbx_timeBased Pbx TimeBased
     * @param {module:com.ultracart.admin.v2/ConversationApi~updatePbxTimeBasedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxTimeBasedResponse}
     */
    updatePbxTimeBased(conversationPbxTimeBasedUuid, pbx_timeBased, callback) {
      let postBody = pbx_timeBased;
      // verify the required parameter 'conversationPbxTimeBasedUuid' is set
      if (conversationPbxTimeBasedUuid === undefined || conversationPbxTimeBasedUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxTimeBasedUuid' when calling updatePbxTimeBased");
      }
      // verify the required parameter 'pbx_timeBased' is set
      if (pbx_timeBased === undefined || pbx_timeBased === null) {
        throw new Error("Missing the required parameter 'pbx_timeBased' when calling updatePbxTimeBased");
      }

      let pathParams = {
        'conversationPbxTimeBasedUuid': conversationPbxTimeBasedUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversationPbxTimeBasedResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/time_based/{conversationPbxTimeBasedUuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePbxTimeRange operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~updatePbxTimeRangeCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeRangeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update pbx timeRange
     * Update a pbx timeRange 
     * @param {String} conversationPbxTimeRangeUuid 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxTimeRange} pbx_timeRange Pbx TimeRange
     * @param {module:com.ultracart.admin.v2/ConversationApi~updatePbxTimeRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxTimeRangeResponse}
     */
    updatePbxTimeRange(conversationPbxTimeRangeUuid, pbx_timeRange, callback) {
      let postBody = pbx_timeRange;
      // verify the required parameter 'conversationPbxTimeRangeUuid' is set
      if (conversationPbxTimeRangeUuid === undefined || conversationPbxTimeRangeUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxTimeRangeUuid' when calling updatePbxTimeRange");
      }
      // verify the required parameter 'pbx_timeRange' is set
      if (pbx_timeRange === undefined || pbx_timeRange === null) {
        throw new Error("Missing the required parameter 'pbx_timeRange' when calling updatePbxTimeRange");
      }

      let pathParams = {
        'conversationPbxTimeRangeUuid': conversationPbxTimeRangeUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversationPbxTimeRangeResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/time_range/{conversationPbxTimeRangeUuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePbxVoicemailMailbox operation.
     * @callback module:com.ultracart.admin.v2/ConversationApi~updatePbxVoicemailMailboxCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMailboxResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update pbx voicemailMailbox
     * Update a pbx voicemailMailbox 
     * @param {String} conversationPbxVoicemailMailboxUuid 
     * @param {module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMailbox} pbx_voicemailMailbox Pbx VoicemailMailbox
     * @param {module:com.ultracart.admin.v2/ConversationApi~updatePbxVoicemailMailboxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ConversationPbxVoicemailMailboxResponse}
     */
    updatePbxVoicemailMailbox(conversationPbxVoicemailMailboxUuid, pbx_voicemailMailbox, callback) {
      let postBody = pbx_voicemailMailbox;
      // verify the required parameter 'conversationPbxVoicemailMailboxUuid' is set
      if (conversationPbxVoicemailMailboxUuid === undefined || conversationPbxVoicemailMailboxUuid === null) {
        throw new Error("Missing the required parameter 'conversationPbxVoicemailMailboxUuid' when calling updatePbxVoicemailMailbox");
      }
      // verify the required parameter 'pbx_voicemailMailbox' is set
      if (pbx_voicemailMailbox === undefined || pbx_voicemailMailbox === null) {
        throw new Error("Missing the required parameter 'pbx_voicemailMailbox' when calling updatePbxVoicemailMailbox");
      }

      let pathParams = {
        'conversationPbxVoicemailMailboxUuid': conversationPbxVoicemailMailboxUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConversationPbxVoicemailMailboxResponse;
      return this.apiClient.callApi(
        '/conversation/pbx/voicemail_mailbox/{conversationPbxVoicemailMailboxUuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
