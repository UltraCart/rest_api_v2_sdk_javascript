/*
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.15-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'com.ultracart.admin.v2.models/AddLibraryItemRequest', 'com.ultracart.admin.v2.models/ApplyLibraryItemRequest', 'com.ultracart.admin.v2.models/ApplyLibraryItemResponse', 'com.ultracart.admin.v2.models/BaseResponse', 'com.ultracart.admin.v2.models/CountriesResponse', 'com.ultracart.admin.v2.models/EmailBaseTemplateListResponse', 'com.ultracart.admin.v2.models/EmailCampaign', 'com.ultracart.admin.v2.models/EmailCampaignResponse', 'com.ultracart.admin.v2.models/EmailCampaignsResponse', 'com.ultracart.admin.v2.models/EmailClicksResponse', 'com.ultracart.admin.v2.models/EmailCommseq', 'com.ultracart.admin.v2.models/EmailCommseqEmail', 'com.ultracart.admin.v2.models/EmailCommseqEmailResponse', 'com.ultracart.admin.v2.models/EmailCommseqEmailSendTestRequest', 'com.ultracart.admin.v2.models/EmailCommseqEmailSendTestResponse', 'com.ultracart.admin.v2.models/EmailCommseqEmailsRequest', 'com.ultracart.admin.v2.models/EmailCommseqEmailsResponse', 'com.ultracart.admin.v2.models/EmailCommseqPostcard', 'com.ultracart.admin.v2.models/EmailCommseqPostcardResponse', 'com.ultracart.admin.v2.models/EmailCommseqPostcardSendTestRequest', 'com.ultracart.admin.v2.models/EmailCommseqPostcardSendTestResponse', 'com.ultracart.admin.v2.models/EmailCommseqPostcardsRequest', 'com.ultracart.admin.v2.models/EmailCommseqPostcardsResponse', 'com.ultracart.admin.v2.models/EmailCommseqResponse', 'com.ultracart.admin.v2.models/EmailCommseqStatResponse', 'com.ultracart.admin.v2.models/EmailCommseqsResponse', 'com.ultracart.admin.v2.models/EmailCustomer', 'com.ultracart.admin.v2.models/EmailCustomerEditorUrlResponse', 'com.ultracart.admin.v2.models/EmailCustomersResponse', 'com.ultracart.admin.v2.models/EmailDashboardActivityResponse', 'com.ultracart.admin.v2.models/EmailDashboardStatsResponse', 'com.ultracart.admin.v2.models/EmailEditorTokenResponse', 'com.ultracart.admin.v2.models/EmailFlow', 'com.ultracart.admin.v2.models/EmailFlowBackPopulateRequest', 'com.ultracart.admin.v2.models/EmailFlowBackPopulateResponse', 'com.ultracart.admin.v2.models/EmailFlowResponse', 'com.ultracart.admin.v2.models/EmailFlowsResponse', 'com.ultracart.admin.v2.models/EmailGlobalSettings', 'com.ultracart.admin.v2.models/EmailGlobalSettingsResponse', 'com.ultracart.admin.v2.models/EmailGlobalUnsubscribeRequest', 'com.ultracart.admin.v2.models/EmailGlobalUnsubscribeResponse', 'com.ultracart.admin.v2.models/EmailHistogramPropertyNamesResponse', 'com.ultracart.admin.v2.models/EmailHistogramPropertyValuesResponse', 'com.ultracart.admin.v2.models/EmailList', 'com.ultracart.admin.v2.models/EmailListArchiveResponse', 'com.ultracart.admin.v2.models/EmailListCustomersResponse', 'com.ultracart.admin.v2.models/EmailListResponse', 'com.ultracart.admin.v2.models/EmailListSubscribeResponse', 'com.ultracart.admin.v2.models/EmailListsResponse', 'com.ultracart.admin.v2.models/EmailOrdersResponse', 'com.ultracart.admin.v2.models/EmailPerformanceResponse', 'com.ultracart.admin.v2.models/EmailPlan', 'com.ultracart.admin.v2.models/EmailPlanResponse', 'com.ultracart.admin.v2.models/EmailSegment', 'com.ultracart.admin.v2.models/EmailSegmentArchiveResponse', 'com.ultracart.admin.v2.models/EmailSegmentCustomersResponse', 'com.ultracart.admin.v2.models/EmailSegmentDownloadPrepareResponse', 'com.ultracart.admin.v2.models/EmailSegmentResponse', 'com.ultracart.admin.v2.models/EmailSegmentsResponse', 'com.ultracart.admin.v2.models/EmailSendingDomainResponse', 'com.ultracart.admin.v2.models/EmailSendingDomainsResponse', 'com.ultracart.admin.v2.models/EmailSettings', 'com.ultracart.admin.v2.models/EmailSettingsResponse', 'com.ultracart.admin.v2.models/EmailStatPostcardSummaryRequest', 'com.ultracart.admin.v2.models/EmailStatPostcardSummaryResponse', 'com.ultracart.admin.v2.models/EmailStatSummaryRequest', 'com.ultracart.admin.v2.models/EmailStatSummaryResponse', 'com.ultracart.admin.v2.models/EmailStepStatRequest', 'com.ultracart.admin.v2.models/EmailStepStatResponse', 'com.ultracart.admin.v2.models/EmailStepWaitingRequest', 'com.ultracart.admin.v2.models/EmailStepWaitingResponse', 'com.ultracart.admin.v2.models/EmailTemplate', 'com.ultracart.admin.v2.models/EmailTemplatesResponse', 'com.ultracart.admin.v2.models/EmailThirdPartyListImportRequest', 'com.ultracart.admin.v2.models/EmailThirdPartyProvidersResponse', 'com.ultracart.admin.v2.models/ErrorResponse', 'com.ultracart.admin.v2.models/Experiment', 'com.ultracart.admin.v2.models/ExperimentResponse', 'com.ultracart.admin.v2.models/ExperimentsResponse', 'com.ultracart.admin.v2.models/GeocodeRequest', 'com.ultracart.admin.v2.models/GeocodeResponse', 'com.ultracart.admin.v2.models/LibraryFilterValuesResponse', 'com.ultracart.admin.v2.models/LibraryItem', 'com.ultracart.admin.v2.models/LibraryItemQuery', 'com.ultracart.admin.v2.models/LibraryItemResponse', 'com.ultracart.admin.v2.models/LibraryItemsResponse', 'com.ultracart.admin.v2.models/LookupResponse', 'com.ultracart.admin.v2.models/ScreenshotsResponse', 'com.ultracart.admin.v2.models/ThumbnailParametersRequest', 'com.ultracart.admin.v2.models/ThumbnailParametersResponse', 'com.ultracart.admin.v2.models/TransactionEmail', 'com.ultracart.admin.v2.models/TransactionEmailListResponse', 'com.ultracart.admin.v2.models/TransactionEmailResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../com.ultracart.admin.v2.models/AddLibraryItemRequest'), require('../com.ultracart.admin.v2.models/ApplyLibraryItemRequest'), require('../com.ultracart.admin.v2.models/ApplyLibraryItemResponse'), require('../com.ultracart.admin.v2.models/BaseResponse'), require('../com.ultracart.admin.v2.models/CountriesResponse'), require('../com.ultracart.admin.v2.models/EmailBaseTemplateListResponse'), require('../com.ultracart.admin.v2.models/EmailCampaign'), require('../com.ultracart.admin.v2.models/EmailCampaignResponse'), require('../com.ultracart.admin.v2.models/EmailCampaignsResponse'), require('../com.ultracart.admin.v2.models/EmailClicksResponse'), require('../com.ultracart.admin.v2.models/EmailCommseq'), require('../com.ultracart.admin.v2.models/EmailCommseqEmail'), require('../com.ultracart.admin.v2.models/EmailCommseqEmailResponse'), require('../com.ultracart.admin.v2.models/EmailCommseqEmailSendTestRequest'), require('../com.ultracart.admin.v2.models/EmailCommseqEmailSendTestResponse'), require('../com.ultracart.admin.v2.models/EmailCommseqEmailsRequest'), require('../com.ultracart.admin.v2.models/EmailCommseqEmailsResponse'), require('../com.ultracart.admin.v2.models/EmailCommseqPostcard'), require('../com.ultracart.admin.v2.models/EmailCommseqPostcardResponse'), require('../com.ultracart.admin.v2.models/EmailCommseqPostcardSendTestRequest'), require('../com.ultracart.admin.v2.models/EmailCommseqPostcardSendTestResponse'), require('../com.ultracart.admin.v2.models/EmailCommseqPostcardsRequest'), require('../com.ultracart.admin.v2.models/EmailCommseqPostcardsResponse'), require('../com.ultracart.admin.v2.models/EmailCommseqResponse'), require('../com.ultracart.admin.v2.models/EmailCommseqStatResponse'), require('../com.ultracart.admin.v2.models/EmailCommseqsResponse'), require('../com.ultracart.admin.v2.models/EmailCustomer'), require('../com.ultracart.admin.v2.models/EmailCustomerEditorUrlResponse'), require('../com.ultracart.admin.v2.models/EmailCustomersResponse'), require('../com.ultracart.admin.v2.models/EmailDashboardActivityResponse'), require('../com.ultracart.admin.v2.models/EmailDashboardStatsResponse'), require('../com.ultracart.admin.v2.models/EmailEditorTokenResponse'), require('../com.ultracart.admin.v2.models/EmailFlow'), require('../com.ultracart.admin.v2.models/EmailFlowBackPopulateRequest'), require('../com.ultracart.admin.v2.models/EmailFlowBackPopulateResponse'), require('../com.ultracart.admin.v2.models/EmailFlowResponse'), require('../com.ultracart.admin.v2.models/EmailFlowsResponse'), require('../com.ultracart.admin.v2.models/EmailGlobalSettings'), require('../com.ultracart.admin.v2.models/EmailGlobalSettingsResponse'), require('../com.ultracart.admin.v2.models/EmailGlobalUnsubscribeRequest'), require('../com.ultracart.admin.v2.models/EmailGlobalUnsubscribeResponse'), require('../com.ultracart.admin.v2.models/EmailHistogramPropertyNamesResponse'), require('../com.ultracart.admin.v2.models/EmailHistogramPropertyValuesResponse'), require('../com.ultracart.admin.v2.models/EmailList'), require('../com.ultracart.admin.v2.models/EmailListArchiveResponse'), require('../com.ultracart.admin.v2.models/EmailListCustomersResponse'), require('../com.ultracart.admin.v2.models/EmailListResponse'), require('../com.ultracart.admin.v2.models/EmailListSubscribeResponse'), require('../com.ultracart.admin.v2.models/EmailListsResponse'), require('../com.ultracart.admin.v2.models/EmailOrdersResponse'), require('../com.ultracart.admin.v2.models/EmailPerformanceResponse'), require('../com.ultracart.admin.v2.models/EmailPlan'), require('../com.ultracart.admin.v2.models/EmailPlanResponse'), require('../com.ultracart.admin.v2.models/EmailSegment'), require('../com.ultracart.admin.v2.models/EmailSegmentArchiveResponse'), require('../com.ultracart.admin.v2.models/EmailSegmentCustomersResponse'), require('../com.ultracart.admin.v2.models/EmailSegmentDownloadPrepareResponse'), require('../com.ultracart.admin.v2.models/EmailSegmentResponse'), require('../com.ultracart.admin.v2.models/EmailSegmentsResponse'), require('../com.ultracart.admin.v2.models/EmailSendingDomainResponse'), require('../com.ultracart.admin.v2.models/EmailSendingDomainsResponse'), require('../com.ultracart.admin.v2.models/EmailSettings'), require('../com.ultracart.admin.v2.models/EmailSettingsResponse'), require('../com.ultracart.admin.v2.models/EmailStatPostcardSummaryRequest'), require('../com.ultracart.admin.v2.models/EmailStatPostcardSummaryResponse'), require('../com.ultracart.admin.v2.models/EmailStatSummaryRequest'), require('../com.ultracart.admin.v2.models/EmailStatSummaryResponse'), require('../com.ultracart.admin.v2.models/EmailStepStatRequest'), require('../com.ultracart.admin.v2.models/EmailStepStatResponse'), require('../com.ultracart.admin.v2.models/EmailStepWaitingRequest'), require('../com.ultracart.admin.v2.models/EmailStepWaitingResponse'), require('../com.ultracart.admin.v2.models/EmailTemplate'), require('../com.ultracart.admin.v2.models/EmailTemplatesResponse'), require('../com.ultracart.admin.v2.models/EmailThirdPartyListImportRequest'), require('../com.ultracart.admin.v2.models/EmailThirdPartyProvidersResponse'), require('../com.ultracart.admin.v2.models/ErrorResponse'), require('../com.ultracart.admin.v2.models/Experiment'), require('../com.ultracart.admin.v2.models/ExperimentResponse'), require('../com.ultracart.admin.v2.models/ExperimentsResponse'), require('../com.ultracart.admin.v2.models/GeocodeRequest'), require('../com.ultracart.admin.v2.models/GeocodeResponse'), require('../com.ultracart.admin.v2.models/LibraryFilterValuesResponse'), require('../com.ultracart.admin.v2.models/LibraryItem'), require('../com.ultracart.admin.v2.models/LibraryItemQuery'), require('../com.ultracart.admin.v2.models/LibraryItemResponse'), require('../com.ultracart.admin.v2.models/LibraryItemsResponse'), require('../com.ultracart.admin.v2.models/LookupResponse'), require('../com.ultracart.admin.v2.models/ScreenshotsResponse'), require('../com.ultracart.admin.v2.models/ThumbnailParametersRequest'), require('../com.ultracart.admin.v2.models/ThumbnailParametersResponse'), require('../com.ultracart.admin.v2.models/TransactionEmail'), require('../com.ultracart.admin.v2.models/TransactionEmailListResponse'), require('../com.ultracart.admin.v2.models/TransactionEmailResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.UltraCartRestApiV2) {
      root.UltraCartRestApiV2 = {};
    }
    root.UltraCartRestApiV2.StorefrontApi = factory(root.UltraCartRestApiV2.ApiClient, root.UltraCartRestApiV2.AddLibraryItemRequest, root.UltraCartRestApiV2.ApplyLibraryItemRequest, root.UltraCartRestApiV2.ApplyLibraryItemResponse, root.UltraCartRestApiV2.BaseResponse, root.UltraCartRestApiV2.CountriesResponse, root.UltraCartRestApiV2.EmailBaseTemplateListResponse, root.UltraCartRestApiV2.EmailCampaign, root.UltraCartRestApiV2.EmailCampaignResponse, root.UltraCartRestApiV2.EmailCampaignsResponse, root.UltraCartRestApiV2.EmailClicksResponse, root.UltraCartRestApiV2.EmailCommseq, root.UltraCartRestApiV2.EmailCommseqEmail, root.UltraCartRestApiV2.EmailCommseqEmailResponse, root.UltraCartRestApiV2.EmailCommseqEmailSendTestRequest, root.UltraCartRestApiV2.EmailCommseqEmailSendTestResponse, root.UltraCartRestApiV2.EmailCommseqEmailsRequest, root.UltraCartRestApiV2.EmailCommseqEmailsResponse, root.UltraCartRestApiV2.EmailCommseqPostcard, root.UltraCartRestApiV2.EmailCommseqPostcardResponse, root.UltraCartRestApiV2.EmailCommseqPostcardSendTestRequest, root.UltraCartRestApiV2.EmailCommseqPostcardSendTestResponse, root.UltraCartRestApiV2.EmailCommseqPostcardsRequest, root.UltraCartRestApiV2.EmailCommseqPostcardsResponse, root.UltraCartRestApiV2.EmailCommseqResponse, root.UltraCartRestApiV2.EmailCommseqStatResponse, root.UltraCartRestApiV2.EmailCommseqsResponse, root.UltraCartRestApiV2.EmailCustomer, root.UltraCartRestApiV2.EmailCustomerEditorUrlResponse, root.UltraCartRestApiV2.EmailCustomersResponse, root.UltraCartRestApiV2.EmailDashboardActivityResponse, root.UltraCartRestApiV2.EmailDashboardStatsResponse, root.UltraCartRestApiV2.EmailEditorTokenResponse, root.UltraCartRestApiV2.EmailFlow, root.UltraCartRestApiV2.EmailFlowBackPopulateRequest, root.UltraCartRestApiV2.EmailFlowBackPopulateResponse, root.UltraCartRestApiV2.EmailFlowResponse, root.UltraCartRestApiV2.EmailFlowsResponse, root.UltraCartRestApiV2.EmailGlobalSettings, root.UltraCartRestApiV2.EmailGlobalSettingsResponse, root.UltraCartRestApiV2.EmailGlobalUnsubscribeRequest, root.UltraCartRestApiV2.EmailGlobalUnsubscribeResponse, root.UltraCartRestApiV2.EmailHistogramPropertyNamesResponse, root.UltraCartRestApiV2.EmailHistogramPropertyValuesResponse, root.UltraCartRestApiV2.EmailList, root.UltraCartRestApiV2.EmailListArchiveResponse, root.UltraCartRestApiV2.EmailListCustomersResponse, root.UltraCartRestApiV2.EmailListResponse, root.UltraCartRestApiV2.EmailListSubscribeResponse, root.UltraCartRestApiV2.EmailListsResponse, root.UltraCartRestApiV2.EmailOrdersResponse, root.UltraCartRestApiV2.EmailPerformanceResponse, root.UltraCartRestApiV2.EmailPlan, root.UltraCartRestApiV2.EmailPlanResponse, root.UltraCartRestApiV2.EmailSegment, root.UltraCartRestApiV2.EmailSegmentArchiveResponse, root.UltraCartRestApiV2.EmailSegmentCustomersResponse, root.UltraCartRestApiV2.EmailSegmentDownloadPrepareResponse, root.UltraCartRestApiV2.EmailSegmentResponse, root.UltraCartRestApiV2.EmailSegmentsResponse, root.UltraCartRestApiV2.EmailSendingDomainResponse, root.UltraCartRestApiV2.EmailSendingDomainsResponse, root.UltraCartRestApiV2.EmailSettings, root.UltraCartRestApiV2.EmailSettingsResponse, root.UltraCartRestApiV2.EmailStatPostcardSummaryRequest, root.UltraCartRestApiV2.EmailStatPostcardSummaryResponse, root.UltraCartRestApiV2.EmailStatSummaryRequest, root.UltraCartRestApiV2.EmailStatSummaryResponse, root.UltraCartRestApiV2.EmailStepStatRequest, root.UltraCartRestApiV2.EmailStepStatResponse, root.UltraCartRestApiV2.EmailStepWaitingRequest, root.UltraCartRestApiV2.EmailStepWaitingResponse, root.UltraCartRestApiV2.EmailTemplate, root.UltraCartRestApiV2.EmailTemplatesResponse, root.UltraCartRestApiV2.EmailThirdPartyListImportRequest, root.UltraCartRestApiV2.EmailThirdPartyProvidersResponse, root.UltraCartRestApiV2.ErrorResponse, root.UltraCartRestApiV2.Experiment, root.UltraCartRestApiV2.ExperimentResponse, root.UltraCartRestApiV2.ExperimentsResponse, root.UltraCartRestApiV2.GeocodeRequest, root.UltraCartRestApiV2.GeocodeResponse, root.UltraCartRestApiV2.LibraryFilterValuesResponse, root.UltraCartRestApiV2.LibraryItem, root.UltraCartRestApiV2.LibraryItemQuery, root.UltraCartRestApiV2.LibraryItemResponse, root.UltraCartRestApiV2.LibraryItemsResponse, root.UltraCartRestApiV2.LookupResponse, root.UltraCartRestApiV2.ScreenshotsResponse, root.UltraCartRestApiV2.ThumbnailParametersRequest, root.UltraCartRestApiV2.ThumbnailParametersResponse, root.UltraCartRestApiV2.TransactionEmail, root.UltraCartRestApiV2.TransactionEmailListResponse, root.UltraCartRestApiV2.TransactionEmailResponse);
  }
}(this, function(ApiClient, AddLibraryItemRequest, ApplyLibraryItemRequest, ApplyLibraryItemResponse, BaseResponse, CountriesResponse, EmailBaseTemplateListResponse, EmailCampaign, EmailCampaignResponse, EmailCampaignsResponse, EmailClicksResponse, EmailCommseq, EmailCommseqEmail, EmailCommseqEmailResponse, EmailCommseqEmailSendTestRequest, EmailCommseqEmailSendTestResponse, EmailCommseqEmailsRequest, EmailCommseqEmailsResponse, EmailCommseqPostcard, EmailCommseqPostcardResponse, EmailCommseqPostcardSendTestRequest, EmailCommseqPostcardSendTestResponse, EmailCommseqPostcardsRequest, EmailCommseqPostcardsResponse, EmailCommseqResponse, EmailCommseqStatResponse, EmailCommseqsResponse, EmailCustomer, EmailCustomerEditorUrlResponse, EmailCustomersResponse, EmailDashboardActivityResponse, EmailDashboardStatsResponse, EmailEditorTokenResponse, EmailFlow, EmailFlowBackPopulateRequest, EmailFlowBackPopulateResponse, EmailFlowResponse, EmailFlowsResponse, EmailGlobalSettings, EmailGlobalSettingsResponse, EmailGlobalUnsubscribeRequest, EmailGlobalUnsubscribeResponse, EmailHistogramPropertyNamesResponse, EmailHistogramPropertyValuesResponse, EmailList, EmailListArchiveResponse, EmailListCustomersResponse, EmailListResponse, EmailListSubscribeResponse, EmailListsResponse, EmailOrdersResponse, EmailPerformanceResponse, EmailPlan, EmailPlanResponse, EmailSegment, EmailSegmentArchiveResponse, EmailSegmentCustomersResponse, EmailSegmentDownloadPrepareResponse, EmailSegmentResponse, EmailSegmentsResponse, EmailSendingDomainResponse, EmailSendingDomainsResponse, EmailSettings, EmailSettingsResponse, EmailStatPostcardSummaryRequest, EmailStatPostcardSummaryResponse, EmailStatSummaryRequest, EmailStatSummaryResponse, EmailStepStatRequest, EmailStepStatResponse, EmailStepWaitingRequest, EmailStepWaitingResponse, EmailTemplate, EmailTemplatesResponse, EmailThirdPartyListImportRequest, EmailThirdPartyProvidersResponse, ErrorResponse, Experiment, ExperimentResponse, ExperimentsResponse, GeocodeRequest, GeocodeResponse, LibraryFilterValuesResponse, LibraryItem, LibraryItemQuery, LibraryItemResponse, LibraryItemsResponse, LookupResponse, ScreenshotsResponse, ThumbnailParametersRequest, ThumbnailParametersResponse, TransactionEmail, TransactionEmailListResponse, TransactionEmailResponse) {
  'use strict';

  /**
   * Storefront service.
   * @module com.ultracart.admin.v2/StorefrontApi
   * @version 3.0.27
   */

  /**
   * Constructs a new StorefrontApi. 
   * @alias module:com.ultracart.admin.v2/StorefrontApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addToLibrary operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~addToLibraryCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/LibraryItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add to library
     * @param {module:com.ultracart.admin.v2.models/AddLibraryItemRequest} add_library_request New library item request
     * @param {module:com.ultracart.admin.v2/StorefrontApi~addToLibraryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/LibraryItemResponse}
     */
    this.addToLibrary = function(add_library_request, callback) {
      var postBody = add_library_request;

      // verify the required parameter 'add_library_request' is set
      if (add_library_request === undefined || add_library_request === null) {
        throw new Error("Missing the required parameter 'add_library_request' when calling addToLibrary");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LibraryItemResponse;

      return this.apiClient.callApi(
        '/storefront/code_library', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the applyToStoreFront operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~applyToStoreFrontCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ApplyLibraryItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Apply library item to storefront.
     * @param {module:com.ultracart.admin.v2.models/ApplyLibraryItemRequest} apply_library_request New library item
     * @param {module:com.ultracart.admin.v2/StorefrontApi~applyToStoreFrontCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ApplyLibraryItemResponse}
     */
    this.applyToStoreFront = function(apply_library_request, callback) {
      var postBody = apply_library_request;

      // verify the required parameter 'apply_library_request' is set
      if (apply_library_request === undefined || apply_library_request === null) {
        throw new Error("Missing the required parameter 'apply_library_request' when calling applyToStoreFront");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApplyLibraryItemResponse;

      return this.apiClient.callApi(
        '/storefront/code_library/apply', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the archiveEmailList operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~archiveEmailListCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListArchiveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive email list
     * @param {Number} storefront_oid 
     * @param {String} email_list_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~archiveEmailListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListArchiveResponse}
     */
    this.archiveEmailList = function(storefront_oid, email_list_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling archiveEmailList");
      }

      // verify the required parameter 'email_list_uuid' is set
      if (email_list_uuid === undefined || email_list_uuid === null) {
        throw new Error("Missing the required parameter 'email_list_uuid' when calling archiveEmailList");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_list_uuid': email_list_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailListArchiveResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/archive', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the archiveEmailSegment operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~archiveEmailSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSegmentArchiveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive email segment
     * @param {Number} storefront_oid 
     * @param {String} email_segment_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~archiveEmailSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSegmentArchiveResponse}
     */
    this.archiveEmailSegment = function(storefront_oid, email_segment_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling archiveEmailSegment");
      }

      // verify the required parameter 'email_segment_uuid' is set
      if (email_segment_uuid === undefined || email_segment_uuid === null) {
        throw new Error("Missing the required parameter 'email_segment_uuid' when calling archiveEmailSegment");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_segment_uuid': email_segment_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSegmentArchiveResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/archive', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the backPopulateEmailFlow operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~backPopulateEmailFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailFlowBackPopulateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Back populate email flow
     * @param {Number} storefront_oid 
     * @param {String} email_flow_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailFlowBackPopulateRequest} back_populate_request The request to back populate
     * @param {module:com.ultracart.admin.v2/StorefrontApi~backPopulateEmailFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailFlowBackPopulateResponse}
     */
    this.backPopulateEmailFlow = function(storefront_oid, email_flow_uuid, back_populate_request, callback) {
      var postBody = back_populate_request;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling backPopulateEmailFlow");
      }

      // verify the required parameter 'email_flow_uuid' is set
      if (email_flow_uuid === undefined || email_flow_uuid === null) {
        throw new Error("Missing the required parameter 'email_flow_uuid' when calling backPopulateEmailFlow");
      }

      // verify the required parameter 'back_populate_request' is set
      if (back_populate_request === undefined || back_populate_request === null) {
        throw new Error("Missing the required parameter 'back_populate_request' when calling backPopulateEmailFlow");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_flow_uuid': email_flow_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailFlowBackPopulateResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/backfill', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the checkDownloadEmailSegment operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~checkDownloadEmailSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSegmentDownloadPrepareResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check download of email segment
     * @param {Number} storefront_oid 
     * @param {String} email_segment_uuid 
     * @param {String} email_segment_rebuild_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~checkDownloadEmailSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSegmentDownloadPrepareResponse}
     */
    this.checkDownloadEmailSegment = function(storefront_oid, email_segment_uuid, email_segment_rebuild_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling checkDownloadEmailSegment");
      }

      // verify the required parameter 'email_segment_uuid' is set
      if (email_segment_uuid === undefined || email_segment_uuid === null) {
        throw new Error("Missing the required parameter 'email_segment_uuid' when calling checkDownloadEmailSegment");
      }

      // verify the required parameter 'email_segment_rebuild_uuid' is set
      if (email_segment_rebuild_uuid === undefined || email_segment_rebuild_uuid === null) {
        throw new Error("Missing the required parameter 'email_segment_rebuild_uuid' when calling checkDownloadEmailSegment");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_segment_uuid': email_segment_uuid,
        'email_segment_rebuild_uuid': email_segment_rebuild_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSegmentDownloadPrepareResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare/{email_segment_rebuild_uuid}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cloneEmailCampaign operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~cloneEmailCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone email campaign
     * @param {Number} storefront_oid 
     * @param {String} email_campaign_uuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.target_storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~cloneEmailCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCampaignResponse}
     */
    this.cloneEmailCampaign = function(storefront_oid, email_campaign_uuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling cloneEmailCampaign");
      }

      // verify the required parameter 'email_campaign_uuid' is set
      if (email_campaign_uuid === undefined || email_campaign_uuid === null) {
        throw new Error("Missing the required parameter 'email_campaign_uuid' when calling cloneEmailCampaign");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_campaign_uuid': email_campaign_uuid
      };
      var queryParams = {
        'target_storefront_oid': opts['target_storefront_oid'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCampaignResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/clone', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cloneEmailFlow operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~cloneEmailFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone email flow
     * @param {Number} storefront_oid 
     * @param {String} email_flow_uuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.target_storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~cloneEmailFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailFlowResponse}
     */
    this.cloneEmailFlow = function(storefront_oid, email_flow_uuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling cloneEmailFlow");
      }

      // verify the required parameter 'email_flow_uuid' is set
      if (email_flow_uuid === undefined || email_flow_uuid === null) {
        throw new Error("Missing the required parameter 'email_flow_uuid' when calling cloneEmailFlow");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_flow_uuid': email_flow_uuid
      };
      var queryParams = {
        'target_storefront_oid': opts['target_storefront_oid'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailFlowResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/clone', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createEmailSendingDomain operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~createEmailSendingDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSendingDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create email campaign
     * @param {String} domain 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~createEmailSendingDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSendingDomainResponse}
     */
    this.createEmailSendingDomain = function(domain, callback) {
      var postBody = null;

      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling createEmailSendingDomain");
      }


      var pathParams = {
        'domain': domain
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSendingDomainResponse;

      return this.apiClient.callApi(
        '/storefront/email/sending_domains/{domain}/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailCommseqStat operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~deleteEmailCommseqStatCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete communication sequence stats
     * @param {Number} storefront_oid 
     * @param {String} commseq_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~deleteEmailCommseqStatCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteEmailCommseqStat = function(storefront_oid, commseq_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling deleteEmailCommseqStat");
      }

      // verify the required parameter 'commseq_uuid' is set
      if (commseq_uuid === undefined || commseq_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_uuid' when calling deleteEmailCommseqStat");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_uuid': commseq_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailEmail operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~deleteEmailEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete email email
     * @param {Number} storefront_oid 
     * @param {String} commseq_email_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~deleteEmailEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/BaseResponse}
     */
    this.deleteEmailEmail = function(storefront_oid, commseq_email_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling deleteEmailEmail");
      }

      // verify the required parameter 'commseq_email_uuid' is set
      if (commseq_email_uuid === undefined || commseq_email_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_email_uuid' when calling deleteEmailEmail");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_email_uuid': commseq_email_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailListCustomer operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~deleteEmailListCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete email list customer
     * @param {Number} storefront_oid 
     * @param {String} email_list_uuid 
     * @param {String} email_customer_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~deleteEmailListCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/BaseResponse}
     */
    this.deleteEmailListCustomer = function(storefront_oid, email_list_uuid, email_customer_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling deleteEmailListCustomer");
      }

      // verify the required parameter 'email_list_uuid' is set
      if (email_list_uuid === undefined || email_list_uuid === null) {
        throw new Error("Missing the required parameter 'email_list_uuid' when calling deleteEmailListCustomer");
      }

      // verify the required parameter 'email_customer_uuid' is set
      if (email_customer_uuid === undefined || email_customer_uuid === null) {
        throw new Error("Missing the required parameter 'email_customer_uuid' when calling deleteEmailListCustomer");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_list_uuid': email_list_uuid,
        'email_customer_uuid': email_customer_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailPostcard operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~deleteEmailPostcardCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete email postcard
     * @param {Number} storefront_oid 
     * @param {String} commseq_postcard_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~deleteEmailPostcardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/BaseResponse}
     */
    this.deleteEmailPostcard = function(storefront_oid, commseq_postcard_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling deleteEmailPostcard");
      }

      // verify the required parameter 'commseq_postcard_uuid' is set
      if (commseq_postcard_uuid === undefined || commseq_postcard_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_postcard_uuid' when calling deleteEmailPostcard");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_postcard_uuid': commseq_postcard_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailSendingDomain operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~deleteEmailSendingDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete email campaign
     * @param {String} domain 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~deleteEmailSendingDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/BaseResponse}
     */
    this.deleteEmailSendingDomain = function(domain, callback) {
      var postBody = null;

      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling deleteEmailSendingDomain");
      }


      var pathParams = {
        'domain': domain
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponse;

      return this.apiClient.callApi(
        '/storefront/email/sending_domains/{domain}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExperiment operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~deleteExperimentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete experiment
     * @param {Number} storefront_oid 
     * @param {Number} storefront_experiment_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~deleteExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteExperiment = function(storefront_oid, storefront_experiment_oid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling deleteExperiment");
      }

      // verify the required parameter 'storefront_experiment_oid' is set
      if (storefront_experiment_oid === undefined || storefront_experiment_oid === null) {
        throw new Error("Missing the required parameter 'storefront_experiment_oid' when calling deleteExperiment");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'storefront_experiment_oid': storefront_experiment_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLibraryItem operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~deleteLibraryItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete library item
     * @param {Number} library_item_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~deleteLibraryItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteLibraryItem = function(library_item_oid, callback) {
      var postBody = null;

      // verify the required parameter 'library_item_oid' is set
      if (library_item_oid === undefined || library_item_oid === null) {
        throw new Error("Missing the required parameter 'library_item_oid' when calling deleteLibraryItem");
      }


      var pathParams = {
        'library_item_oid': library_item_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/storefront/code_library/{library_item_oid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the duplicateLibraryItem operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~duplicateLibraryItemCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/LibraryItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Duplicate library item.
     * @param {Number} library_item_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~duplicateLibraryItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/LibraryItemResponse}
     */
    this.duplicateLibraryItem = function(library_item_oid, callback) {
      var postBody = null;

      // verify the required parameter 'library_item_oid' is set
      if (library_item_oid === undefined || library_item_oid === null) {
        throw new Error("Missing the required parameter 'library_item_oid' when calling duplicateLibraryItem");
      }


      var pathParams = {
        'library_item_oid': library_item_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LibraryItemResponse;

      return this.apiClient.callApi(
        '/storefront/code_library/{library_item_oid}/duplicate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the geocodeAddress operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~geocodeAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/GeocodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtain lat/long for an address
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/GeocodeRequest} geocode_request geocode request
     * @param {module:com.ultracart.admin.v2/StorefrontApi~geocodeAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/GeocodeResponse}
     */
    this.geocodeAddress = function(storefront_oid, geocode_request, callback) {
      var postBody = geocode_request;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling geocodeAddress");
      }

      // verify the required parameter 'geocode_request' is set
      if (geocode_request === undefined || geocode_request === null) {
        throw new Error("Missing the required parameter 'geocode_request' when calling geocodeAddress");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GeocodeResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/geocode', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCountries operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getCountriesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CountriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get countries
     * Obtain a list of all the countries 
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getCountriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CountriesResponse}
     */
    this.getCountries = function(storefront_oid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getCountries");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CountriesResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/countries', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEditorToken operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEditorTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailEditorTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets editor token
     * Fetches a temporary authentication token for the editor 
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEditorTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailEditorTokenResponse}
     */
    this.getEditorToken = function(storefront_oid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEditorToken");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailEditorTokenResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/editor_token', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailBaseTemplates operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailBaseTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailBaseTemplateListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email communication base templates
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailBaseTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailBaseTemplateListResponse}
     */
    this.getEmailBaseTemplates = function(storefront_oid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailBaseTemplates");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailBaseTemplateListResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/baseTemplates', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCampaign operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email campaign
     * @param {Number} storefront_oid 
     * @param {String} email_campaign_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCampaignResponse}
     */
    this.getEmailCampaign = function(storefront_oid, email_campaign_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCampaign");
      }

      // verify the required parameter 'email_campaign_uuid' is set
      if (email_campaign_uuid === undefined || email_campaign_uuid === null) {
        throw new Error("Missing the required parameter 'email_campaign_uuid' when calling getEmailCampaign");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_campaign_uuid': email_campaign_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCampaignResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCampaignScreenshots operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCampaignScreenshotsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ScreenshotsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email campaign screenshots
     * @param {Number} storefront_oid 
     * @param {String} email_campaign_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCampaignScreenshotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ScreenshotsResponse}
     */
    this.getEmailCampaignScreenshots = function(storefront_oid, email_campaign_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCampaignScreenshots");
      }

      // verify the required parameter 'email_campaign_uuid' is set
      if (email_campaign_uuid === undefined || email_campaign_uuid === null) {
        throw new Error("Missing the required parameter 'email_campaign_uuid' when calling getEmailCampaignScreenshots");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_campaign_uuid': email_campaign_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ScreenshotsResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/screenshots', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCampaigns operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCampaignsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCampaignsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email campaigns
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCampaignsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCampaignsResponse}
     */
    this.getEmailCampaigns = function(storefront_oid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCampaigns");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCampaignsResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaigns', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCampaignsWithStats operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCampaignsWithStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCampaignsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email campaigns with stats
     * @param {Number} storefront_oid 
     * @param {String} stat_days 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCampaignsWithStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCampaignsResponse}
     */
    this.getEmailCampaignsWithStats = function(storefront_oid, stat_days, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCampaignsWithStats");
      }

      // verify the required parameter 'stat_days' is set
      if (stat_days === undefined || stat_days === null) {
        throw new Error("Missing the required parameter 'stat_days' when calling getEmailCampaignsWithStats");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'stat_days': stat_days
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCampaignsResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaignsWithStats/{stat_days}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCommseq operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email commseq
     * @param {Number} storefront_oid 
     * @param {String} commseq_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqResponse}
     */
    this.getEmailCommseq = function(storefront_oid, commseq_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCommseq");
      }

      // verify the required parameter 'commseq_uuid' is set
      if (commseq_uuid === undefined || commseq_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_uuid' when calling getEmailCommseq");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_uuid': commseq_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCommseqEmailStats operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqEmailStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailStatSummaryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email communication sequence emails stats
     * @param {Number} storefront_oid 
     * @param {String} commseq_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailStatSummaryRequest} statsRequest StatsRequest
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqEmailStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailStatSummaryResponse}
     */
    this.getEmailCommseqEmailStats = function(storefront_oid, commseq_uuid, statsRequest, callback) {
      var postBody = statsRequest;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCommseqEmailStats");
      }

      // verify the required parameter 'commseq_uuid' is set
      if (commseq_uuid === undefined || commseq_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_uuid' when calling getEmailCommseqEmailStats");
      }

      // verify the required parameter 'statsRequest' is set
      if (statsRequest === undefined || statsRequest === null) {
        throw new Error("Missing the required parameter 'statsRequest' when calling getEmailCommseqEmailStats");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_uuid': commseq_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailStatSummaryResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/emailStats', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCommseqPostcardStats operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqPostcardStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailStatPostcardSummaryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email communication sequence postcard stats
     * @param {Number} storefront_oid 
     * @param {String} commseq_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailStatPostcardSummaryRequest} statsRequest StatsRequest
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqPostcardStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailStatPostcardSummaryResponse}
     */
    this.getEmailCommseqPostcardStats = function(storefront_oid, commseq_uuid, statsRequest, callback) {
      var postBody = statsRequest;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCommseqPostcardStats");
      }

      // verify the required parameter 'commseq_uuid' is set
      if (commseq_uuid === undefined || commseq_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_uuid' when calling getEmailCommseqPostcardStats");
      }

      // verify the required parameter 'statsRequest' is set
      if (statsRequest === undefined || statsRequest === null) {
        throw new Error("Missing the required parameter 'statsRequest' when calling getEmailCommseqPostcardStats");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_uuid': commseq_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailStatPostcardSummaryResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/postcardStats', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCommseqStatOverall operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqStatOverallCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqStatResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get communication sequence stats overall
     * @param {Number} storefront_oid 
     * @param {String} commseq_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqStatOverallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqStatResponse}
     */
    this.getEmailCommseqStatOverall = function(storefront_oid, commseq_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCommseqStatOverall");
      }

      // verify the required parameter 'commseq_uuid' is set
      if (commseq_uuid === undefined || commseq_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_uuid' when calling getEmailCommseqStatOverall");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_uuid': commseq_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqStatResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCommseqStepStats operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqStepStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailStepStatResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email communication sequence step stats
     * @param {Number} storefront_oid 
     * @param {String} commseq_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailStepStatRequest} statsRequest StatsRequest
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqStepStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailStepStatResponse}
     */
    this.getEmailCommseqStepStats = function(storefront_oid, commseq_uuid, statsRequest, callback) {
      var postBody = statsRequest;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCommseqStepStats");
      }

      // verify the required parameter 'commseq_uuid' is set
      if (commseq_uuid === undefined || commseq_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_uuid' when calling getEmailCommseqStepStats");
      }

      // verify the required parameter 'statsRequest' is set
      if (statsRequest === undefined || statsRequest === null) {
        throw new Error("Missing the required parameter 'statsRequest' when calling getEmailCommseqStepStats");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_uuid': commseq_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailStepStatResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stepStats', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCommseqStepWaiting operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqStepWaitingCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailStepWaitingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email communication sequence customers waiting at each requested step
     * @param {Number} storefront_oid 
     * @param {String} commseq_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailStepWaitingRequest} waitingRequest WaitingRequest
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqStepWaitingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailStepWaitingResponse}
     */
    this.getEmailCommseqStepWaiting = function(storefront_oid, commseq_uuid, waitingRequest, callback) {
      var postBody = waitingRequest;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCommseqStepWaiting");
      }

      // verify the required parameter 'commseq_uuid' is set
      if (commseq_uuid === undefined || commseq_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_uuid' when calling getEmailCommseqStepWaiting");
      }

      // verify the required parameter 'waitingRequest' is set
      if (waitingRequest === undefined || waitingRequest === null) {
        throw new Error("Missing the required parameter 'waitingRequest' when calling getEmailCommseqStepWaiting");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_uuid': commseq_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailStepWaitingResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCommseqs operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email commseqs
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqsResponse}
     */
    this.getEmailCommseqs = function(storefront_oid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCommseqs");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqsResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCustomerEditorUrl operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCustomerEditorUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCustomerEditorUrlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get customers editor URL
     * @param {Number} storefront_oid 
     * @param {String} email_customer_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCustomerEditorUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCustomerEditorUrlResponse}
     */
    this.getEmailCustomerEditorUrl = function(storefront_oid, email_customer_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCustomerEditorUrl");
      }

      // verify the required parameter 'email_customer_uuid' is set
      if (email_customer_uuid === undefined || email_customer_uuid === null) {
        throw new Error("Missing the required parameter 'email_customer_uuid' when calling getEmailCustomerEditorUrl");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_customer_uuid': email_customer_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCustomerEditorUrlResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/customers/{email_customer_uuid}/editor_url', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCustomers operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCustomersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCustomersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email customers
     * @param {Number} storefront_oid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageNumber 
     * @param {Number} opts.pageSize 
     * @param {String} opts.searchEmailPrefix 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCustomersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCustomersResponse}
     */
    this.getEmailCustomers = function(storefront_oid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCustomers");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
        'pageNumber': opts['pageNumber'],
        'pageSize': opts['pageSize'],
        'searchEmailPrefix': opts['searchEmailPrefix'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCustomersResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/customers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailDashboardActivity operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailDashboardActivityCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailDashboardActivityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email dashboard activity
     * @param {Number} storefront_oid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.last_records 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailDashboardActivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailDashboardActivityResponse}
     */
    this.getEmailDashboardActivity = function(storefront_oid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailDashboardActivity");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
        'last_records': opts['last_records'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailDashboardActivityResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/dashboard_activity', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailDashboardStats operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailDashboardStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailDashboardStatsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get dashboard stats
     * @param {Number} storefront_oid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.days 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailDashboardStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailDashboardStatsResponse}
     */
    this.getEmailDashboardStats = function(storefront_oid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailDashboardStats");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
        'days': opts['days'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailDashboardStatsResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/dashboard_stats', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailEmail operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email email
     * @param {Number} storefront_oid 
     * @param {String} commseq_email_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqEmailResponse}
     */
    this.getEmailEmail = function(storefront_oid, commseq_email_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailEmail");
      }

      // verify the required parameter 'commseq_email_uuid' is set
      if (commseq_email_uuid === undefined || commseq_email_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_email_uuid' when calling getEmailEmail");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_email_uuid': commseq_email_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqEmailResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailEmailClicks operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailClicksCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailClicksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email email clicks
     * @param {Number} storefront_oid 
     * @param {String} commseq_uuid 
     * @param {String} commseq_step_uuid 
     * @param {String} commseq_email_uuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.days 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailClicksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailClicksResponse}
     */
    this.getEmailEmailClicks = function(storefront_oid, commseq_uuid, commseq_step_uuid, commseq_email_uuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailEmailClicks");
      }

      // verify the required parameter 'commseq_uuid' is set
      if (commseq_uuid === undefined || commseq_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_uuid' when calling getEmailEmailClicks");
      }

      // verify the required parameter 'commseq_step_uuid' is set
      if (commseq_step_uuid === undefined || commseq_step_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_step_uuid' when calling getEmailEmailClicks");
      }

      // verify the required parameter 'commseq_email_uuid' is set
      if (commseq_email_uuid === undefined || commseq_email_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_email_uuid' when calling getEmailEmailClicks");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_uuid': commseq_uuid,
        'commseq_step_uuid': commseq_step_uuid,
        'commseq_email_uuid': commseq_email_uuid
      };
      var queryParams = {
        'days': opts['days'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailClicksResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/emails/{commseq_email_uuid}/clicks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailEmailCustomerEditorUrl operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailCustomerEditorUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCustomerEditorUrlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email order customer editor url
     * @param {Number} storefront_oid 
     * @param {String} commseq_email_uuid 
     * @param {String} order_id 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailCustomerEditorUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCustomerEditorUrlResponse}
     */
    this.getEmailEmailCustomerEditorUrl = function(storefront_oid, commseq_email_uuid, order_id, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailEmailCustomerEditorUrl");
      }

      // verify the required parameter 'commseq_email_uuid' is set
      if (commseq_email_uuid === undefined || commseq_email_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_email_uuid' when calling getEmailEmailCustomerEditorUrl");
      }

      // verify the required parameter 'order_id' is set
      if (order_id === undefined || order_id === null) {
        throw new Error("Missing the required parameter 'order_id' when calling getEmailEmailCustomerEditorUrl");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_email_uuid': commseq_email_uuid,
        'order_id': order_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCustomerEditorUrlResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/orders/{order_id}/editor_url', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailEmailOrders operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailOrdersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email email orders
     * @param {Number} storefront_oid 
     * @param {String} commseq_uuid 
     * @param {String} commseq_step_uuid 
     * @param {String} commseq_email_uuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.days 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailOrdersResponse}
     */
    this.getEmailEmailOrders = function(storefront_oid, commseq_uuid, commseq_step_uuid, commseq_email_uuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailEmailOrders");
      }

      // verify the required parameter 'commseq_uuid' is set
      if (commseq_uuid === undefined || commseq_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_uuid' when calling getEmailEmailOrders");
      }

      // verify the required parameter 'commseq_step_uuid' is set
      if (commseq_step_uuid === undefined || commseq_step_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_step_uuid' when calling getEmailEmailOrders");
      }

      // verify the required parameter 'commseq_email_uuid' is set
      if (commseq_email_uuid === undefined || commseq_email_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_email_uuid' when calling getEmailEmailOrders");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_uuid': commseq_uuid,
        'commseq_step_uuid': commseq_step_uuid,
        'commseq_email_uuid': commseq_email_uuid
      };
      var queryParams = {
        'days': opts['days'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailOrdersResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/emails/{commseq_email_uuid}/orders', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailEmails operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email emails
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqEmailsResponse}
     */
    this.getEmailEmails = function(storefront_oid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailEmails");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqEmailsResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/emails', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailEmailsMultiple operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailsMultipleCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email emails multiple
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmailsRequest} email_commseq_emails_request Request of email uuids
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailsMultipleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqEmailsResponse}
     */
    this.getEmailEmailsMultiple = function(storefront_oid, email_commseq_emails_request, callback) {
      var postBody = email_commseq_emails_request;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailEmailsMultiple");
      }

      // verify the required parameter 'email_commseq_emails_request' is set
      if (email_commseq_emails_request === undefined || email_commseq_emails_request === null) {
        throw new Error("Missing the required parameter 'email_commseq_emails_request' when calling getEmailEmailsMultiple");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqEmailsResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/emails/multiple', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailFlow operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email flow
     * @param {Number} storefront_oid 
     * @param {String} email_flow_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailFlowResponse}
     */
    this.getEmailFlow = function(storefront_oid, email_flow_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailFlow");
      }

      // verify the required parameter 'email_flow_uuid' is set
      if (email_flow_uuid === undefined || email_flow_uuid === null) {
        throw new Error("Missing the required parameter 'email_flow_uuid' when calling getEmailFlow");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_flow_uuid': email_flow_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailFlowResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailFlowScreenshots operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailFlowScreenshotsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ScreenshotsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email flow screenshots
     * @param {Number} storefront_oid 
     * @param {String} email_flow_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailFlowScreenshotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ScreenshotsResponse}
     */
    this.getEmailFlowScreenshots = function(storefront_oid, email_flow_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailFlowScreenshots");
      }

      // verify the required parameter 'email_flow_uuid' is set
      if (email_flow_uuid === undefined || email_flow_uuid === null) {
        throw new Error("Missing the required parameter 'email_flow_uuid' when calling getEmailFlowScreenshots");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_flow_uuid': email_flow_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ScreenshotsResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/screenshots', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailFlows operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailFlowsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailFlowsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email flows
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailFlowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailFlowsResponse}
     */
    this.getEmailFlows = function(storefront_oid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailFlows");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailFlowsResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/flows', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailGlobalSettings operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailGlobalSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailGlobalSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email globalsettings
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailGlobalSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailGlobalSettingsResponse}
     */
    this.getEmailGlobalSettings = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailGlobalSettingsResponse;

      return this.apiClient.callApi(
        '/storefront/email/global_settings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailList operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailListCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email list
     * @param {Number} storefront_oid 
     * @param {String} email_list_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListResponse}
     */
    this.getEmailList = function(storefront_oid, email_list_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailList");
      }

      // verify the required parameter 'email_list_uuid' is set
      if (email_list_uuid === undefined || email_list_uuid === null) {
        throw new Error("Missing the required parameter 'email_list_uuid' when calling getEmailList");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_list_uuid': email_list_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailListResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists/{email_list_uuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailListCustomerEditorUrl operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailListCustomerEditorUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCustomerEditorUrlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email list customer editor url
     * @param {Number} storefront_oid 
     * @param {String} email_list_uuid 
     * @param {String} email_customer_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailListCustomerEditorUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCustomerEditorUrlResponse}
     */
    this.getEmailListCustomerEditorUrl = function(storefront_oid, email_list_uuid, email_customer_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailListCustomerEditorUrl");
      }

      // verify the required parameter 'email_list_uuid' is set
      if (email_list_uuid === undefined || email_list_uuid === null) {
        throw new Error("Missing the required parameter 'email_list_uuid' when calling getEmailListCustomerEditorUrl");
      }

      // verify the required parameter 'email_customer_uuid' is set
      if (email_customer_uuid === undefined || email_customer_uuid === null) {
        throw new Error("Missing the required parameter 'email_customer_uuid' when calling getEmailListCustomerEditorUrl");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_list_uuid': email_list_uuid,
        'email_customer_uuid': email_customer_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCustomerEditorUrlResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}/editor_url', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailListCustomers operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailListCustomersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListCustomersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email list customers
     * @param {Number} storefront_oid 
     * @param {String} email_list_uuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageNumber 
     * @param {Number} opts.pageSize 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailListCustomersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListCustomersResponse}
     */
    this.getEmailListCustomers = function(storefront_oid, email_list_uuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailListCustomers");
      }

      // verify the required parameter 'email_list_uuid' is set
      if (email_list_uuid === undefined || email_list_uuid === null) {
        throw new Error("Missing the required parameter 'email_list_uuid' when calling getEmailListCustomers");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_list_uuid': email_list_uuid
      };
      var queryParams = {
        'pageNumber': opts['pageNumber'],
        'pageSize': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailListCustomersResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailLists operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailListsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email lists
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListsResponse}
     */
    this.getEmailLists = function(storefront_oid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailLists");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailListsResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailPerformance operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailPerformanceCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailPerformanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email performance
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailPerformanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailPerformanceResponse}
     */
    this.getEmailPerformance = function(storefront_oid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailPerformance");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailPerformanceResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/performance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailPlan operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailPlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email plan
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailPlanResponse}
     */
    this.getEmailPlan = function(storefront_oid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailPlan");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailPlanResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/plan', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailPostcard operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailPostcardCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqPostcardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email postcard
     * @param {Number} storefront_oid 
     * @param {String} commseq_postcard_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailPostcardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqPostcardResponse}
     */
    this.getEmailPostcard = function(storefront_oid, commseq_postcard_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailPostcard");
      }

      // verify the required parameter 'commseq_postcard_uuid' is set
      if (commseq_postcard_uuid === undefined || commseq_postcard_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_postcard_uuid' when calling getEmailPostcard");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_postcard_uuid': commseq_postcard_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqPostcardResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailPostcards operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailPostcardsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqPostcardsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email postcards
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailPostcardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqPostcardsResponse}
     */
    this.getEmailPostcards = function(storefront_oid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailPostcards");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqPostcardsResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/postcards', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailPostcardsMultiple operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailPostcardsMultipleCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqPostcardsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email postcards multiple
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqPostcardsRequest} email_commseq_postcards_request Request of postcard uuids
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailPostcardsMultipleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqPostcardsResponse}
     */
    this.getEmailPostcardsMultiple = function(storefront_oid, email_commseq_postcards_request, callback) {
      var postBody = email_commseq_postcards_request;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailPostcardsMultiple");
      }

      // verify the required parameter 'email_commseq_postcards_request' is set
      if (email_commseq_postcards_request === undefined || email_commseq_postcards_request === null) {
        throw new Error("Missing the required parameter 'email_commseq_postcards_request' when calling getEmailPostcardsMultiple");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqPostcardsResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/postcards/multiple', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailSegment operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSegmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email segment
     * @param {Number} storefront_oid 
     * @param {String} email_segment_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSegmentResponse}
     */
    this.getEmailSegment = function(storefront_oid, email_segment_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailSegment");
      }

      // verify the required parameter 'email_segment_uuid' is set
      if (email_segment_uuid === undefined || email_segment_uuid === null) {
        throw new Error("Missing the required parameter 'email_segment_uuid' when calling getEmailSegment");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_segment_uuid': email_segment_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSegmentResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailSegmentCustomerEditorUrl operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailSegmentCustomerEditorUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCustomerEditorUrlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email segment customers editor URL
     * @param {Number} storefront_oid 
     * @param {String} email_segment_uuid 
     * @param {String} email_customer_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailSegmentCustomerEditorUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCustomerEditorUrlResponse}
     */
    this.getEmailSegmentCustomerEditorUrl = function(storefront_oid, email_segment_uuid, email_customer_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailSegmentCustomerEditorUrl");
      }

      // verify the required parameter 'email_segment_uuid' is set
      if (email_segment_uuid === undefined || email_segment_uuid === null) {
        throw new Error("Missing the required parameter 'email_segment_uuid' when calling getEmailSegmentCustomerEditorUrl");
      }

      // verify the required parameter 'email_customer_uuid' is set
      if (email_customer_uuid === undefined || email_customer_uuid === null) {
        throw new Error("Missing the required parameter 'email_customer_uuid' when calling getEmailSegmentCustomerEditorUrl");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_segment_uuid': email_segment_uuid,
        'email_customer_uuid': email_customer_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCustomerEditorUrlResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers/{email_customer_uuid}/editor_url', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailSegmentCustomers operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailSegmentCustomersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSegmentCustomersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email segment customers
     * @param {Number} storefront_oid 
     * @param {String} email_segment_uuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageNumber 
     * @param {Number} opts.pageSize 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailSegmentCustomersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSegmentCustomersResponse}
     */
    this.getEmailSegmentCustomers = function(storefront_oid, email_segment_uuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailSegmentCustomers");
      }

      // verify the required parameter 'email_segment_uuid' is set
      if (email_segment_uuid === undefined || email_segment_uuid === null) {
        throw new Error("Missing the required parameter 'email_segment_uuid' when calling getEmailSegmentCustomers");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_segment_uuid': email_segment_uuid
      };
      var queryParams = {
        'pageNumber': opts['pageNumber'],
        'pageSize': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSegmentCustomersResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailSegments operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailSegmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSegmentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email segments
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailSegmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSegmentsResponse}
     */
    this.getEmailSegments = function(storefront_oid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailSegments");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSegmentsResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailSendingDomain operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailSendingDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSendingDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email sending domain
     * @param {String} domain 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailSendingDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSendingDomainResponse}
     */
    this.getEmailSendingDomain = function(domain, callback) {
      var postBody = null;

      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling getEmailSendingDomain");
      }


      var pathParams = {
        'domain': domain
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSendingDomainResponse;

      return this.apiClient.callApi(
        '/storefront/email/sending_domain/{domain}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailSendingDomainStatus operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailSendingDomainStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSendingDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email sending domain status
     * @param {String} domain 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailSendingDomainStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSendingDomainResponse}
     */
    this.getEmailSendingDomainStatus = function(domain, callback) {
      var postBody = null;

      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling getEmailSendingDomainStatus");
      }


      var pathParams = {
        'domain': domain
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSendingDomainResponse;

      return this.apiClient.callApi(
        '/storefront/email/sending_domains/{domain}/status', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailSendingDomains operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailSendingDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSendingDomainsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email sending domains
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailSendingDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSendingDomainsResponse}
     */
    this.getEmailSendingDomains = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSendingDomainsResponse;

      return this.apiClient.callApi(
        '/storefront/email/sending_domains', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailSettings operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email settings
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSettingsResponse}
     */
    this.getEmailSettings = function(storefront_oid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailSettings");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSettingsResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/settings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailTemplate operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email template
     * @param {Number} storefront_oid 
     * @param {Number} email_template_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailTemplate}
     */
    this.getEmailTemplate = function(storefront_oid, email_template_oid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailTemplate");
      }

      // verify the required parameter 'email_template_oid' is set
      if (email_template_oid === undefined || email_template_oid === null) {
        throw new Error("Missing the required parameter 'email_template_oid' when calling getEmailTemplate");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_template_oid': email_template_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailTemplate;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/templates/{email_template_oid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailTemplates operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailTemplatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email templates
     * @param {Number} storefront_oid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.trigger_type 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailTemplatesResponse}
     */
    this.getEmailTemplates = function(storefront_oid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailTemplates");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
        'trigger_type': opts['trigger_type'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailTemplatesResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/templates', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailThirdPartyProviders operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailThirdPartyProvidersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailThirdPartyProvidersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of third party email providers
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailThirdPartyProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailThirdPartyProvidersResponse}
     */
    this.getEmailThirdPartyProviders = function(storefront_oid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailThirdPartyProviders");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailThirdPartyProvidersResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/third_party_providers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getExperiments operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getExperimentsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ExperimentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get experiments
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getExperimentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ExperimentsResponse}
     */
    this.getExperiments = function(storefront_oid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getExperiments");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ExperimentsResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/experiments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHistogramPropertyNames operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getHistogramPropertyNamesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailHistogramPropertyNamesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get histogram property names
     * Obtain a list of property names for a given property type 
     * @param {Number} storefront_oid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.property_type 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getHistogramPropertyNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailHistogramPropertyNamesResponse}
     */
    this.getHistogramPropertyNames = function(storefront_oid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getHistogramPropertyNames");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
        'property_type': opts['property_type'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailHistogramPropertyNamesResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/histogram/property_names', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getHistogramPropertyValues operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getHistogramPropertyValuesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailHistogramPropertyValuesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get histogram property values
     * Obtain a list of property values for a given property name and type 
     * @param {Number} storefront_oid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.property_name 
     * @param {String} opts.property_type 
     * @param {Number} opts.limit 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getHistogramPropertyValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailHistogramPropertyValuesResponse}
     */
    this.getHistogramPropertyValues = function(storefront_oid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getHistogramPropertyValues");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
        'property_name': opts['property_name'],
        'property_type': opts['property_type'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailHistogramPropertyValuesResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/histogram/property_values', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLibraryFilterValues operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getLibraryFilterValuesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/LibraryFilterValuesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get library values used to populate drop down boxes for filtering.
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getLibraryFilterValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/LibraryFilterValuesResponse}
     */
    this.getLibraryFilterValues = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LibraryFilterValuesResponse;

      return this.apiClient.callApi(
        '/storefront/code_library/filter_values', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLibraryItem operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getLibraryItemCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/LibraryItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get library item.
     * @param {Number} library_item_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getLibraryItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/LibraryItemResponse}
     */
    this.getLibraryItem = function(library_item_oid, callback) {
      var postBody = null;

      // verify the required parameter 'library_item_oid' is set
      if (library_item_oid === undefined || library_item_oid === null) {
        throw new Error("Missing the required parameter 'library_item_oid' when calling getLibraryItem");
      }


      var pathParams = {
        'library_item_oid': library_item_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LibraryItemResponse;

      return this.apiClient.callApi(
        '/storefront/code_library/{library_item_oid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getThumbnailParameters operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getThumbnailParametersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ThumbnailParametersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get thumbnail parameters
     * @param {module:com.ultracart.admin.v2.models/ThumbnailParametersRequest} thumbnail_parameters Thumbnail Parameters
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getThumbnailParametersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ThumbnailParametersResponse}
     */
    this.getThumbnailParameters = function(thumbnail_parameters, callback) {
      var postBody = thumbnail_parameters;

      // verify the required parameter 'thumbnail_parameters' is set
      if (thumbnail_parameters === undefined || thumbnail_parameters === null) {
        throw new Error("Missing the required parameter 'thumbnail_parameters' when calling getThumbnailParameters");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ThumbnailParametersResponse;

      return this.apiClient.callApi(
        '/storefront/thumbnailParameters', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionEmail operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getTransactionEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/TransactionEmailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a transaction email object
     * Fetch a transactional email 
     * @param {Number} storefront_oid 
     * @param {String} email_id 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getTransactionEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/TransactionEmailResponse}
     */
    this.getTransactionEmail = function(storefront_oid, email_id, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getTransactionEmail");
      }

      // verify the required parameter 'email_id' is set
      if (email_id === undefined || email_id === null) {
        throw new Error("Missing the required parameter 'email_id' when calling getTransactionEmail");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_id': email_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TransactionEmailResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/transaction_email/list/{email_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionEmailList operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getTransactionEmailListCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/TransactionEmailListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of transaction email names
     * Obtain a list of all transactional emails and return back just their names 
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getTransactionEmailListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/TransactionEmailListResponse}
     */
    this.getTransactionEmailList = function(storefront_oid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getTransactionEmailList");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TransactionEmailListResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/transaction_email/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the globalUnsubscribe operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~globalUnsubscribeCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailGlobalUnsubscribeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Globally unsubscribe a customer
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailGlobalUnsubscribeRequest} unsubscribe Unsubscribe
     * @param {module:com.ultracart.admin.v2/StorefrontApi~globalUnsubscribeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailGlobalUnsubscribeResponse}
     */
    this.globalUnsubscribe = function(storefront_oid, unsubscribe, callback) {
      var postBody = unsubscribe;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling globalUnsubscribe");
      }

      // verify the required parameter 'unsubscribe' is set
      if (unsubscribe === undefined || unsubscribe === null) {
        throw new Error("Missing the required parameter 'unsubscribe' when calling globalUnsubscribe");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailGlobalUnsubscribeResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/globalUnsubscribe', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importEmailThirdPartyProviderList operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~importEmailThirdPartyProviderListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import a third party provider list
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailThirdPartyListImportRequest} import_request lists to import
     * @param {module:com.ultracart.admin.v2/StorefrontApi~importEmailThirdPartyProviderListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.importEmailThirdPartyProviderList = function(storefront_oid, import_request, callback) {
      var postBody = import_request;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling importEmailThirdPartyProviderList");
      }

      // verify the required parameter 'import_request' is set
      if (import_request === undefined || import_request === null) {
        throw new Error("Missing the required parameter 'import_request' when calling importEmailThirdPartyProviderList");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/third_party_providers/import', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertEmailCampaign operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~insertEmailCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert email campaign
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailCampaign} email_campaign Email campaign
     * @param {module:com.ultracart.admin.v2/StorefrontApi~insertEmailCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCampaignResponse}
     */
    this.insertEmailCampaign = function(storefront_oid, email_campaign, callback) {
      var postBody = email_campaign;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling insertEmailCampaign");
      }

      // verify the required parameter 'email_campaign' is set
      if (email_campaign === undefined || email_campaign === null) {
        throw new Error("Missing the required parameter 'email_campaign' when calling insertEmailCampaign");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCampaignResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaigns', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertEmailCommseq operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~insertEmailCommseqCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert email commseq
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailCommseq} email_commseq Email commseq
     * @param {module:com.ultracart.admin.v2/StorefrontApi~insertEmailCommseqCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqResponse}
     */
    this.insertEmailCommseq = function(storefront_oid, email_commseq, callback) {
      var postBody = email_commseq;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling insertEmailCommseq");
      }

      // verify the required parameter 'email_commseq' is set
      if (email_commseq === undefined || email_commseq === null) {
        throw new Error("Missing the required parameter 'email_commseq' when calling insertEmailCommseq");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertEmailEmail operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~insertEmailEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert email email
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmail} email_commseq_email Email email
     * @param {module:com.ultracart.admin.v2/StorefrontApi~insertEmailEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqEmailResponse}
     */
    this.insertEmailEmail = function(storefront_oid, email_commseq_email, callback) {
      var postBody = email_commseq_email;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling insertEmailEmail");
      }

      // verify the required parameter 'email_commseq_email' is set
      if (email_commseq_email === undefined || email_commseq_email === null) {
        throw new Error("Missing the required parameter 'email_commseq_email' when calling insertEmailEmail");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqEmailResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/emails', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertEmailFlow operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~insertEmailFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert email flow
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailFlow} email_flow Email flow
     * @param {module:com.ultracart.admin.v2/StorefrontApi~insertEmailFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailFlowResponse}
     */
    this.insertEmailFlow = function(storefront_oid, email_flow, callback) {
      var postBody = email_flow;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling insertEmailFlow");
      }

      // verify the required parameter 'email_flow' is set
      if (email_flow === undefined || email_flow === null) {
        throw new Error("Missing the required parameter 'email_flow' when calling insertEmailFlow");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailFlowResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/flows', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertEmailList operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~insertEmailListCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert email list
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailList} email_list Email list
     * @param {module:com.ultracart.admin.v2/StorefrontApi~insertEmailListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListResponse}
     */
    this.insertEmailList = function(storefront_oid, email_list, callback) {
      var postBody = email_list;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling insertEmailList");
      }

      // verify the required parameter 'email_list' is set
      if (email_list === undefined || email_list === null) {
        throw new Error("Missing the required parameter 'email_list' when calling insertEmailList");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailListResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertEmailPostcard operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~insertEmailPostcardCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqPostcardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert email postcard
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqPostcard} email_commseq_postcard Email postcard
     * @param {module:com.ultracart.admin.v2/StorefrontApi~insertEmailPostcardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqPostcardResponse}
     */
    this.insertEmailPostcard = function(storefront_oid, email_commseq_postcard, callback) {
      var postBody = email_commseq_postcard;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling insertEmailPostcard");
      }

      // verify the required parameter 'email_commseq_postcard' is set
      if (email_commseq_postcard === undefined || email_commseq_postcard === null) {
        throw new Error("Missing the required parameter 'email_commseq_postcard' when calling insertEmailPostcard");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqPostcardResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/postcards', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertEmailSegment operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~insertEmailSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSegmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert email segment
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailSegment} email_segment Email segment
     * @param {module:com.ultracart.admin.v2/StorefrontApi~insertEmailSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSegmentResponse}
     */
    this.insertEmailSegment = function(storefront_oid, email_segment, callback) {
      var postBody = email_segment;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling insertEmailSegment");
      }

      // verify the required parameter 'email_segment' is set
      if (email_segment === undefined || email_segment === null) {
        throw new Error("Missing the required parameter 'email_segment' when calling insertEmailSegment");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSegmentResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the prepareDownloadEmailSegment operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~prepareDownloadEmailSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSegmentDownloadPrepareResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prepare download of email segment
     * @param {Number} storefront_oid 
     * @param {String} email_segment_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~prepareDownloadEmailSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSegmentDownloadPrepareResponse}
     */
    this.prepareDownloadEmailSegment = function(storefront_oid, email_segment_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling prepareDownloadEmailSegment");
      }

      // verify the required parameter 'email_segment_uuid' is set
      if (email_segment_uuid === undefined || email_segment_uuid === null) {
        throw new Error("Missing the required parameter 'email_segment_uuid' when calling prepareDownloadEmailSegment");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_segment_uuid': email_segment_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSegmentDownloadPrepareResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the publishLibraryItem operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~publishLibraryItemCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/LibraryItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publish library item.
     * @param {Number} library_item_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~publishLibraryItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/LibraryItemResponse}
     */
    this.publishLibraryItem = function(library_item_oid, callback) {
      var postBody = null;

      // verify the required parameter 'library_item_oid' is set
      if (library_item_oid === undefined || library_item_oid === null) {
        throw new Error("Missing the required parameter 'library_item_oid' when calling publishLibraryItem");
      }


      var pathParams = {
        'library_item_oid': library_item_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LibraryItemResponse;

      return this.apiClient.callApi(
        '/storefront/code_library/{library_item_oid}/publish', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the purchaseLibraryItem operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~purchaseLibraryItemCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/LibraryItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Purchase public library item, which creates a copy of the item in your personal code library
     * @param {Number} library_item_oid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~purchaseLibraryItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/LibraryItemResponse}
     */
    this.purchaseLibraryItem = function(library_item_oid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'library_item_oid' is set
      if (library_item_oid === undefined || library_item_oid === null) {
        throw new Error("Missing the required parameter 'library_item_oid' when calling purchaseLibraryItem");
      }


      var pathParams = {
        'library_item_oid': library_item_oid
      };
      var queryParams = {
        'storefront_oid': opts['storefront_oid'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LibraryItemResponse;

      return this.apiClient.callApi(
        '/storefront/code_library/{library_item_oid}/purchase', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the releaseEmailCommseqStepWaiting operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~releaseEmailCommseqStepWaitingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Release email communication sequence customers waiting at the specified step
     * @param {Number} storefront_oid 
     * @param {String} commseq_uuid 
     * @param {String} commseq_step_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~releaseEmailCommseqStepWaitingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.releaseEmailCommseqStepWaiting = function(storefront_oid, commseq_uuid, commseq_step_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling releaseEmailCommseqStepWaiting");
      }

      // verify the required parameter 'commseq_uuid' is set
      if (commseq_uuid === undefined || commseq_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_uuid' when calling releaseEmailCommseqStepWaiting");
      }

      // verify the required parameter 'commseq_step_uuid' is set
      if (commseq_step_uuid === undefined || commseq_step_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_step_uuid' when calling releaseEmailCommseqStepWaiting");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_uuid': commseq_uuid,
        'commseq_step_uuid': commseq_step_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting/{commseq_step_uuid}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the review operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~reviewCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmailSendTestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request a review of an email
     * @param {Number} storefront_oid 
     * @param {String} commseq_email_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmailSendTestRequest} email_commseq_email_review_request Email commseq email review request
     * @param {module:com.ultracart.admin.v2/StorefrontApi~reviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqEmailSendTestResponse}
     */
    this.review = function(storefront_oid, commseq_email_uuid, email_commseq_email_review_request, callback) {
      var postBody = email_commseq_email_review_request;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling review");
      }

      // verify the required parameter 'commseq_email_uuid' is set
      if (commseq_email_uuid === undefined || commseq_email_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_email_uuid' when calling review");
      }

      // verify the required parameter 'email_commseq_email_review_request' is set
      if (email_commseq_email_review_request === undefined || email_commseq_email_review_request === null) {
        throw new Error("Missing the required parameter 'email_commseq_email_review_request' when calling review");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_email_uuid': commseq_email_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqEmailSendTestResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/review', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the search operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~searchCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/LookupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for all matching values
     * @param {Object} opts Optional parameters
     * @param {String} opts.category 
     * @param {String} opts.matches 
     * @param {String} opts.storefront_oid 
     * @param {Number} opts.max_hits 
     * @param {String} opts.subcategory 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~searchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/LookupResponse}
     */
    this.search = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'category': opts['category'],
        'matches': opts['matches'],
        'storefront_oid': opts['storefront_oid'],
        'max_hits': opts['max_hits'],
        'subcategory': opts['subcategory'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LookupResponse;

      return this.apiClient.callApi(
        '/storefront/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchEmailListCustomers operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~searchEmailListCustomersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListCustomersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search email list customers
     * @param {Number} storefront_oid 
     * @param {String} email_list_uuid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startsWith 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~searchEmailListCustomersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListCustomersResponse}
     */
    this.searchEmailListCustomers = function(storefront_oid, email_list_uuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling searchEmailListCustomers");
      }

      // verify the required parameter 'email_list_uuid' is set
      if (email_list_uuid === undefined || email_list_uuid === null) {
        throw new Error("Missing the required parameter 'email_list_uuid' when calling searchEmailListCustomers");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_list_uuid': email_list_uuid
      };
      var queryParams = {
        'startsWith': opts['startsWith'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailListCustomersResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchEmailSegmentCustomers operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~searchEmailSegmentCustomersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSegmentCustomersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search email segment customers
     * @param {Number} storefront_oid 
     * @param {String} email_segment_uuid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startsWith 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~searchEmailSegmentCustomersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSegmentCustomersResponse}
     */
    this.searchEmailSegmentCustomers = function(storefront_oid, email_segment_uuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling searchEmailSegmentCustomers");
      }

      // verify the required parameter 'email_segment_uuid' is set
      if (email_segment_uuid === undefined || email_segment_uuid === null) {
        throw new Error("Missing the required parameter 'email_segment_uuid' when calling searchEmailSegmentCustomers");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_segment_uuid': email_segment_uuid
      };
      var queryParams = {
        'startsWith': opts['startsWith'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSegmentCustomersResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchLibraryItems operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~searchLibraryItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/LibraryItemsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve library items
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param {module:com.ultracart.admin.v2.models/LibraryItemQuery} item_query Item query
     * @param {Object} opts Optional parameters
     * @param {Number} opts._limit The maximum number of records to return on this one API call. (Maximum 10000) (default to 10000)
     * @param {Number} opts._offset Pagination of the record set.  Offset is a zero based index. (default to 0)
     * @param {String} opts._sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {module:com.ultracart.admin.v2/StorefrontApi~searchLibraryItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/LibraryItemsResponse}
     */
    this.searchLibraryItems = function(item_query, opts, callback) {
      opts = opts || {};
      var postBody = item_query;

      // verify the required parameter 'item_query' is set
      if (item_query === undefined || item_query === null) {
        throw new Error("Missing the required parameter 'item_query' when calling searchLibraryItems");
      }


      var pathParams = {
      };
      var queryParams = {
        '_limit': opts['_limit'],
        '_offset': opts['_offset'],
        '_sort': opts['_sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LibraryItemsResponse;

      return this.apiClient.callApi(
        '/storefront/code_library/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchPublishedItems operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~searchPublishedItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/LibraryItemsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve library items
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param {module:com.ultracart.admin.v2.models/LibraryItemQuery} item_query Item query
     * @param {Object} opts Optional parameters
     * @param {Number} opts._limit The maximum number of records to return on this one API call. (Maximum 10000) (default to 10000)
     * @param {Number} opts._offset Pagination of the record set.  Offset is a zero based index. (default to 0)
     * @param {String} opts._sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {module:com.ultracart.admin.v2/StorefrontApi~searchPublishedItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/LibraryItemsResponse}
     */
    this.searchPublishedItems = function(item_query, opts, callback) {
      opts = opts || {};
      var postBody = item_query;

      // verify the required parameter 'item_query' is set
      if (item_query === undefined || item_query === null) {
        throw new Error("Missing the required parameter 'item_query' when calling searchPublishedItems");
      }


      var pathParams = {
      };
      var queryParams = {
        '_limit': opts['_limit'],
        '_offset': opts['_offset'],
        '_sort': opts['_sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LibraryItemsResponse;

      return this.apiClient.callApi(
        '/storefront/code_library/search_published', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchSharedItems operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~searchSharedItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/LibraryItemsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve library items
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param {module:com.ultracart.admin.v2.models/LibraryItemQuery} item_query Item query
     * @param {Object} opts Optional parameters
     * @param {Number} opts._limit The maximum number of records to return on this one API call. (Maximum 10000) (default to 10000)
     * @param {Number} opts._offset Pagination of the record set.  Offset is a zero based index. (default to 0)
     * @param {String} opts._sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {module:com.ultracart.admin.v2/StorefrontApi~searchSharedItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/LibraryItemsResponse}
     */
    this.searchSharedItems = function(item_query, opts, callback) {
      opts = opts || {};
      var postBody = item_query;

      // verify the required parameter 'item_query' is set
      if (item_query === undefined || item_query === null) {
        throw new Error("Missing the required parameter 'item_query' when calling searchSharedItems");
      }


      var pathParams = {
      };
      var queryParams = {
        '_limit': opts['_limit'],
        '_offset': opts['_offset'],
        '_sort': opts['_sort'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LibraryItemsResponse;

      return this.apiClient.callApi(
        '/storefront/code_library/search_shared', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendEmailTest operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~sendEmailTestCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmailSendTestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send email test
     * @param {Number} storefront_oid 
     * @param {String} commseq_email_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmailSendTestRequest} email_commseq_email_test_request Email commseq email test request
     * @param {module:com.ultracart.admin.v2/StorefrontApi~sendEmailTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqEmailSendTestResponse}
     */
    this.sendEmailTest = function(storefront_oid, commseq_email_uuid, email_commseq_email_test_request, callback) {
      var postBody = email_commseq_email_test_request;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling sendEmailTest");
      }

      // verify the required parameter 'commseq_email_uuid' is set
      if (commseq_email_uuid === undefined || commseq_email_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_email_uuid' when calling sendEmailTest");
      }

      // verify the required parameter 'email_commseq_email_test_request' is set
      if (email_commseq_email_test_request === undefined || email_commseq_email_test_request === null) {
        throw new Error("Missing the required parameter 'email_commseq_email_test_request' when calling sendEmailTest");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_email_uuid': commseq_email_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqEmailSendTestResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/test', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendPostcardTest operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~sendPostcardTestCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqPostcardSendTestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send postcard test
     * @param {Number} storefront_oid 
     * @param {String} commseq_postcard_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqPostcardSendTestRequest} email_commseq_postcard_test_request Email commseq email test request
     * @param {module:com.ultracart.admin.v2/StorefrontApi~sendPostcardTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqPostcardSendTestResponse}
     */
    this.sendPostcardTest = function(storefront_oid, commseq_postcard_uuid, email_commseq_postcard_test_request, callback) {
      var postBody = email_commseq_postcard_test_request;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling sendPostcardTest");
      }

      // verify the required parameter 'commseq_postcard_uuid' is set
      if (commseq_postcard_uuid === undefined || commseq_postcard_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_postcard_uuid' when calling sendPostcardTest");
      }

      // verify the required parameter 'email_commseq_postcard_test_request' is set
      if (email_commseq_postcard_test_request === undefined || email_commseq_postcard_test_request === null) {
        throw new Error("Missing the required parameter 'email_commseq_postcard_test_request' when calling sendPostcardTest");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_postcard_uuid': commseq_postcard_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqPostcardSendTestResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}/test', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the startEmailCampaign operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~startEmailCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start email campaign
     * @param {Number} storefront_oid 
     * @param {String} email_campaign_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~startEmailCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/BaseResponse}
     */
    this.startEmailCampaign = function(storefront_oid, email_campaign_uuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling startEmailCampaign");
      }

      // verify the required parameter 'email_campaign_uuid' is set
      if (email_campaign_uuid === undefined || email_campaign_uuid === null) {
        throw new Error("Missing the required parameter 'email_campaign_uuid' when calling startEmailCampaign");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_campaign_uuid': email_campaign_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/start', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribeToEmailList operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~subscribeToEmailListCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListSubscribeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe customers to email list
     * @param {Number} storefront_oid 
     * @param {String} email_list_uuid 
     * @param {Array.<module:com.ultracart.admin.v2.models/EmailCustomer>} customers Customers
     * @param {module:com.ultracart.admin.v2/StorefrontApi~subscribeToEmailListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListSubscribeResponse}
     */
    this.subscribeToEmailList = function(storefront_oid, email_list_uuid, customers, callback) {
      var postBody = customers;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling subscribeToEmailList");
      }

      // verify the required parameter 'email_list_uuid' is set
      if (email_list_uuid === undefined || email_list_uuid === null) {
        throw new Error("Missing the required parameter 'email_list_uuid' when calling subscribeToEmailList");
      }

      // verify the required parameter 'customers' is set
      if (customers === undefined || customers === null) {
        throw new Error("Missing the required parameter 'customers' when calling subscribeToEmailList");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_list_uuid': email_list_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailListSubscribeResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/subscribe', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailCampaign operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email campaign
     * @param {Number} storefront_oid 
     * @param {String} email_campaign_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailCampaign} email_campaign Email campaign
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCampaignResponse}
     */
    this.updateEmailCampaign = function(storefront_oid, email_campaign_uuid, email_campaign, callback) {
      var postBody = email_campaign;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateEmailCampaign");
      }

      // verify the required parameter 'email_campaign_uuid' is set
      if (email_campaign_uuid === undefined || email_campaign_uuid === null) {
        throw new Error("Missing the required parameter 'email_campaign_uuid' when calling updateEmailCampaign");
      }

      // verify the required parameter 'email_campaign' is set
      if (email_campaign === undefined || email_campaign === null) {
        throw new Error("Missing the required parameter 'email_campaign' when calling updateEmailCampaign");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_campaign_uuid': email_campaign_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCampaignResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailCommseq operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailCommseqCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email commseq
     * @param {Number} storefront_oid 
     * @param {String} commseq_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailCommseq} email_commseq Email commseq
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailCommseqCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqResponse}
     */
    this.updateEmailCommseq = function(storefront_oid, commseq_uuid, email_commseq, callback) {
      var postBody = email_commseq;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateEmailCommseq");
      }

      // verify the required parameter 'commseq_uuid' is set
      if (commseq_uuid === undefined || commseq_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_uuid' when calling updateEmailCommseq");
      }

      // verify the required parameter 'email_commseq' is set
      if (email_commseq === undefined || email_commseq === null) {
        throw new Error("Missing the required parameter 'email_commseq' when calling updateEmailCommseq");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_uuid': commseq_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailCustomer operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailCustomerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email customer
     * @param {Number} storefront_oid 
     * @param {String} email_customer_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailCustomer} email_customer Email customer
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateEmailCustomer = function(storefront_oid, email_customer_uuid, email_customer, callback) {
      var postBody = email_customer;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateEmailCustomer");
      }

      // verify the required parameter 'email_customer_uuid' is set
      if (email_customer_uuid === undefined || email_customer_uuid === null) {
        throw new Error("Missing the required parameter 'email_customer_uuid' when calling updateEmailCustomer");
      }

      // verify the required parameter 'email_customer' is set
      if (email_customer === undefined || email_customer === null) {
        throw new Error("Missing the required parameter 'email_customer' when calling updateEmailCustomer");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_customer_uuid': email_customer_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/customers/{email_customer_uuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailEmail operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email email
     * @param {Number} storefront_oid 
     * @param {String} commseq_email_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmail} email_commseq_email Email commseq email
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqEmailResponse}
     */
    this.updateEmailEmail = function(storefront_oid, commseq_email_uuid, email_commseq_email, callback) {
      var postBody = email_commseq_email;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateEmailEmail");
      }

      // verify the required parameter 'commseq_email_uuid' is set
      if (commseq_email_uuid === undefined || commseq_email_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_email_uuid' when calling updateEmailEmail");
      }

      // verify the required parameter 'email_commseq_email' is set
      if (email_commseq_email === undefined || email_commseq_email === null) {
        throw new Error("Missing the required parameter 'email_commseq_email' when calling updateEmailEmail");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_email_uuid': commseq_email_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqEmailResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailFlow operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email flow
     * @param {Number} storefront_oid 
     * @param {String} email_flow_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailFlow} email_flow Email flow
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailFlowResponse}
     */
    this.updateEmailFlow = function(storefront_oid, email_flow_uuid, email_flow, callback) {
      var postBody = email_flow;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateEmailFlow");
      }

      // verify the required parameter 'email_flow_uuid' is set
      if (email_flow_uuid === undefined || email_flow_uuid === null) {
        throw new Error("Missing the required parameter 'email_flow_uuid' when calling updateEmailFlow");
      }

      // verify the required parameter 'email_flow' is set
      if (email_flow === undefined || email_flow === null) {
        throw new Error("Missing the required parameter 'email_flow' when calling updateEmailFlow");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_flow_uuid': email_flow_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailFlowResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailGlobalSettings operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailGlobalSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailGlobalSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email global settings
     * @param {module:com.ultracart.admin.v2.models/EmailGlobalSettings} global_settings global settings request
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailGlobalSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailGlobalSettingsResponse}
     */
    this.updateEmailGlobalSettings = function(global_settings, callback) {
      var postBody = global_settings;

      // verify the required parameter 'global_settings' is set
      if (global_settings === undefined || global_settings === null) {
        throw new Error("Missing the required parameter 'global_settings' when calling updateEmailGlobalSettings");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailGlobalSettingsResponse;

      return this.apiClient.callApi(
        '/storefront/email/global_settings', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailList operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailListCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email list
     * @param {Number} storefront_oid 
     * @param {String} email_list_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailList} email_list Email list
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListResponse}
     */
    this.updateEmailList = function(storefront_oid, email_list_uuid, email_list, callback) {
      var postBody = email_list;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateEmailList");
      }

      // verify the required parameter 'email_list_uuid' is set
      if (email_list_uuid === undefined || email_list_uuid === null) {
        throw new Error("Missing the required parameter 'email_list_uuid' when calling updateEmailList");
      }

      // verify the required parameter 'email_list' is set
      if (email_list === undefined || email_list === null) {
        throw new Error("Missing the required parameter 'email_list' when calling updateEmailList");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_list_uuid': email_list_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailListResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists/{email_list_uuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailPlan operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailPlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email plan
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailPlan} settings plan request
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailPlanResponse}
     */
    this.updateEmailPlan = function(storefront_oid, settings, callback) {
      var postBody = settings;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateEmailPlan");
      }

      // verify the required parameter 'settings' is set
      if (settings === undefined || settings === null) {
        throw new Error("Missing the required parameter 'settings' when calling updateEmailPlan");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailPlanResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/plan', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailPostcard operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailPostcardCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqPostcardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email postcard
     * @param {Number} storefront_oid 
     * @param {String} commseq_postcard_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqPostcard} email_commseq_postcard Email commseq postcard
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailPostcardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqPostcardResponse}
     */
    this.updateEmailPostcard = function(storefront_oid, commseq_postcard_uuid, email_commseq_postcard, callback) {
      var postBody = email_commseq_postcard;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateEmailPostcard");
      }

      // verify the required parameter 'commseq_postcard_uuid' is set
      if (commseq_postcard_uuid === undefined || commseq_postcard_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_postcard_uuid' when calling updateEmailPostcard");
      }

      // verify the required parameter 'email_commseq_postcard' is set
      if (email_commseq_postcard === undefined || email_commseq_postcard === null) {
        throw new Error("Missing the required parameter 'email_commseq_postcard' when calling updateEmailPostcard");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_postcard_uuid': commseq_postcard_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqPostcardResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailSegment operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSegmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email segment
     * @param {Number} storefront_oid 
     * @param {String} email_segment_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailSegment} email_segment Email segment
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSegmentResponse}
     */
    this.updateEmailSegment = function(storefront_oid, email_segment_uuid, email_segment, callback) {
      var postBody = email_segment;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateEmailSegment");
      }

      // verify the required parameter 'email_segment_uuid' is set
      if (email_segment_uuid === undefined || email_segment_uuid === null) {
        throw new Error("Missing the required parameter 'email_segment_uuid' when calling updateEmailSegment");
      }

      // verify the required parameter 'email_segment' is set
      if (email_segment === undefined || email_segment === null) {
        throw new Error("Missing the required parameter 'email_segment' when calling updateEmailSegment");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_segment_uuid': email_segment_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSegmentResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailSettings operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email settings
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailSettings} settings settings request
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSettingsResponse}
     */
    this.updateEmailSettings = function(storefront_oid, settings, callback) {
      var postBody = settings;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateEmailSettings");
      }

      // verify the required parameter 'settings' is set
      if (settings === undefined || settings === null) {
        throw new Error("Missing the required parameter 'settings' when calling updateEmailSettings");
      }


      var pathParams = {
        'storefront_oid': storefront_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSettingsResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/settings', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExperiment operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ExperimentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update experiment
     * @param {Number} storefront_oid 
     * @param {Number} storefront_experiment_oid 
     * @param {module:com.ultracart.admin.v2.models/Experiment} experiment Experiment
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ExperimentResponse}
     */
    this.updateExperiment = function(storefront_oid, storefront_experiment_oid, experiment, callback) {
      var postBody = experiment;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateExperiment");
      }

      // verify the required parameter 'storefront_experiment_oid' is set
      if (storefront_experiment_oid === undefined || storefront_experiment_oid === null) {
        throw new Error("Missing the required parameter 'storefront_experiment_oid' when calling updateExperiment");
      }

      // verify the required parameter 'experiment' is set
      if (experiment === undefined || experiment === null) {
        throw new Error("Missing the required parameter 'experiment' when calling updateExperiment");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'storefront_experiment_oid': storefront_experiment_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ExperimentResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLibraryItem operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateLibraryItemCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/LibraryItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update library item. Note that only certain fields may be updated via this method.
     * @param {Number} library_item_oid 
     * @param {module:com.ultracart.admin.v2.models/LibraryItem} library_item Library item
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateLibraryItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/LibraryItemResponse}
     */
    this.updateLibraryItem = function(library_item_oid, library_item, callback) {
      var postBody = library_item;

      // verify the required parameter 'library_item_oid' is set
      if (library_item_oid === undefined || library_item_oid === null) {
        throw new Error("Missing the required parameter 'library_item_oid' when calling updateLibraryItem");
      }

      // verify the required parameter 'library_item' is set
      if (library_item === undefined || library_item === null) {
        throw new Error("Missing the required parameter 'library_item' when calling updateLibraryItem");
      }


      var pathParams = {
        'library_item_oid': library_item_oid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LibraryItemResponse;

      return this.apiClient.callApi(
        '/storefront/code_library/{library_item_oid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTransactionEmail operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateTransactionEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/TransactionEmailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a transaction email object
     * Updates a transactional email 
     * @param {Number} storefront_oid 
     * @param {String} email_id 
     * @param {module:com.ultracart.admin.v2.models/TransactionEmail} transaction_email TransactionEmail
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateTransactionEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/TransactionEmailResponse}
     */
    this.updateTransactionEmail = function(storefront_oid, email_id, transaction_email, callback) {
      var postBody = transaction_email;

      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateTransactionEmail");
      }

      // verify the required parameter 'email_id' is set
      if (email_id === undefined || email_id === null) {
        throw new Error("Missing the required parameter 'email_id' when calling updateTransactionEmail");
      }

      // verify the required parameter 'transaction_email' is set
      if (transaction_email === undefined || transaction_email === null) {
        throw new Error("Missing the required parameter 'transaction_email' when calling updateTransactionEmail");
      }


      var pathParams = {
        'storefront_oid': storefront_oid,
        'email_id': email_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TransactionEmailResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/transaction_email/list/{email_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
