/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * OpenAPI spec version: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'com.ultracart.admin.v2.models/BaseResponse', 'com.ultracart.admin.v2.models/EmailBaseTemplateListResponse', 'com.ultracart.admin.v2.models/EmailCampaign', 'com.ultracart.admin.v2.models/EmailCampaignResponse', 'com.ultracart.admin.v2.models/EmailCampaignsResponse', 'com.ultracart.admin.v2.models/EmailCommseq', 'com.ultracart.admin.v2.models/EmailCommseqEmail', 'com.ultracart.admin.v2.models/EmailCommseqEmailResponse', 'com.ultracart.admin.v2.models/EmailCommseqEmailsRequest', 'com.ultracart.admin.v2.models/EmailCommseqEmailsResponse', 'com.ultracart.admin.v2.models/EmailCommseqResponse', 'com.ultracart.admin.v2.models/EmailCommseqStatResponse', 'com.ultracart.admin.v2.models/EmailCommseqsResponse', 'com.ultracart.admin.v2.models/EmailCustomer', 'com.ultracart.admin.v2.models/EmailCustomerEditorUrlResponse', 'com.ultracart.admin.v2.models/EmailDashboardActivityResponse', 'com.ultracart.admin.v2.models/EmailDashboardStatsResponse', 'com.ultracart.admin.v2.models/EmailFlow', 'com.ultracart.admin.v2.models/EmailFlowResponse', 'com.ultracart.admin.v2.models/EmailFlowsResponse', 'com.ultracart.admin.v2.models/EmailList', 'com.ultracart.admin.v2.models/EmailListArchiveResponse', 'com.ultracart.admin.v2.models/EmailListCustomersResponse', 'com.ultracart.admin.v2.models/EmailListResponse', 'com.ultracart.admin.v2.models/EmailListSubscribeResponse', 'com.ultracart.admin.v2.models/EmailListsResponse', 'com.ultracart.admin.v2.models/EmailSegment', 'com.ultracart.admin.v2.models/EmailSegmentArchiveResponse', 'com.ultracart.admin.v2.models/EmailSegmentCustomersResponse', 'com.ultracart.admin.v2.models/EmailSegmentResponse', 'com.ultracart.admin.v2.models/EmailSegmentsResponse', 'com.ultracart.admin.v2.models/EmailSendingDomainResponse', 'com.ultracart.admin.v2.models/EmailSendingDomainsResponse', 'com.ultracart.admin.v2.models/EmailStatSummaryRequest', 'com.ultracart.admin.v2.models/EmailStatSummaryResponse', 'com.ultracart.admin.v2.models/EmailStepWaitingRequest', 'com.ultracart.admin.v2.models/EmailStepWaitingResponse', 'com.ultracart.admin.v2.models/EmailTemplate', 'com.ultracart.admin.v2.models/EmailTemplatesResponse', 'com.ultracart.admin.v2.models/EmailThirdPartyListImportRequest', 'com.ultracart.admin.v2.models/EmailThirdPartyProvidersResponse', 'com.ultracart.admin.v2.models/ErrorResponse', 'com.ultracart.admin.v2.models/Experiment', 'com.ultracart.admin.v2.models/ExperimentResponse', 'com.ultracart.admin.v2.models/ExperimentsResponse', 'com.ultracart.admin.v2.models/LookupResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../com.ultracart.admin.v2.models/BaseResponse'), require('../com.ultracart.admin.v2.models/EmailBaseTemplateListResponse'), require('../com.ultracart.admin.v2.models/EmailCampaign'), require('../com.ultracart.admin.v2.models/EmailCampaignResponse'), require('../com.ultracart.admin.v2.models/EmailCampaignsResponse'), require('../com.ultracart.admin.v2.models/EmailCommseq'), require('../com.ultracart.admin.v2.models/EmailCommseqEmail'), require('../com.ultracart.admin.v2.models/EmailCommseqEmailResponse'), require('../com.ultracart.admin.v2.models/EmailCommseqEmailsRequest'), require('../com.ultracart.admin.v2.models/EmailCommseqEmailsResponse'), require('../com.ultracart.admin.v2.models/EmailCommseqResponse'), require('../com.ultracart.admin.v2.models/EmailCommseqStatResponse'), require('../com.ultracart.admin.v2.models/EmailCommseqsResponse'), require('../com.ultracart.admin.v2.models/EmailCustomer'), require('../com.ultracart.admin.v2.models/EmailCustomerEditorUrlResponse'), require('../com.ultracart.admin.v2.models/EmailDashboardActivityResponse'), require('../com.ultracart.admin.v2.models/EmailDashboardStatsResponse'), require('../com.ultracart.admin.v2.models/EmailFlow'), require('../com.ultracart.admin.v2.models/EmailFlowResponse'), require('../com.ultracart.admin.v2.models/EmailFlowsResponse'), require('../com.ultracart.admin.v2.models/EmailList'), require('../com.ultracart.admin.v2.models/EmailListArchiveResponse'), require('../com.ultracart.admin.v2.models/EmailListCustomersResponse'), require('../com.ultracart.admin.v2.models/EmailListResponse'), require('../com.ultracart.admin.v2.models/EmailListSubscribeResponse'), require('../com.ultracart.admin.v2.models/EmailListsResponse'), require('../com.ultracart.admin.v2.models/EmailSegment'), require('../com.ultracart.admin.v2.models/EmailSegmentArchiveResponse'), require('../com.ultracart.admin.v2.models/EmailSegmentCustomersResponse'), require('../com.ultracart.admin.v2.models/EmailSegmentResponse'), require('../com.ultracart.admin.v2.models/EmailSegmentsResponse'), require('../com.ultracart.admin.v2.models/EmailSendingDomainResponse'), require('../com.ultracart.admin.v2.models/EmailSendingDomainsResponse'), require('../com.ultracart.admin.v2.models/EmailStatSummaryRequest'), require('../com.ultracart.admin.v2.models/EmailStatSummaryResponse'), require('../com.ultracart.admin.v2.models/EmailStepWaitingRequest'), require('../com.ultracart.admin.v2.models/EmailStepWaitingResponse'), require('../com.ultracart.admin.v2.models/EmailTemplate'), require('../com.ultracart.admin.v2.models/EmailTemplatesResponse'), require('../com.ultracart.admin.v2.models/EmailThirdPartyListImportRequest'), require('../com.ultracart.admin.v2.models/EmailThirdPartyProvidersResponse'), require('../com.ultracart.admin.v2.models/ErrorResponse'), require('../com.ultracart.admin.v2.models/Experiment'), require('../com.ultracart.admin.v2.models/ExperimentResponse'), require('../com.ultracart.admin.v2.models/ExperimentsResponse'), require('../com.ultracart.admin.v2.models/LookupResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.UltraCartRestApiV2) {
      root.UltraCartRestApiV2 = {};
    }
    root.UltraCartRestApiV2.StorefrontApi = factory(root.UltraCartRestApiV2.ApiClient, root.UltraCartRestApiV2.BaseResponse, root.UltraCartRestApiV2.EmailBaseTemplateListResponse, root.UltraCartRestApiV2.EmailCampaign, root.UltraCartRestApiV2.EmailCampaignResponse, root.UltraCartRestApiV2.EmailCampaignsResponse, root.UltraCartRestApiV2.EmailCommseq, root.UltraCartRestApiV2.EmailCommseqEmail, root.UltraCartRestApiV2.EmailCommseqEmailResponse, root.UltraCartRestApiV2.EmailCommseqEmailsRequest, root.UltraCartRestApiV2.EmailCommseqEmailsResponse, root.UltraCartRestApiV2.EmailCommseqResponse, root.UltraCartRestApiV2.EmailCommseqStatResponse, root.UltraCartRestApiV2.EmailCommseqsResponse, root.UltraCartRestApiV2.EmailCustomer, root.UltraCartRestApiV2.EmailCustomerEditorUrlResponse, root.UltraCartRestApiV2.EmailDashboardActivityResponse, root.UltraCartRestApiV2.EmailDashboardStatsResponse, root.UltraCartRestApiV2.EmailFlow, root.UltraCartRestApiV2.EmailFlowResponse, root.UltraCartRestApiV2.EmailFlowsResponse, root.UltraCartRestApiV2.EmailList, root.UltraCartRestApiV2.EmailListArchiveResponse, root.UltraCartRestApiV2.EmailListCustomersResponse, root.UltraCartRestApiV2.EmailListResponse, root.UltraCartRestApiV2.EmailListSubscribeResponse, root.UltraCartRestApiV2.EmailListsResponse, root.UltraCartRestApiV2.EmailSegment, root.UltraCartRestApiV2.EmailSegmentArchiveResponse, root.UltraCartRestApiV2.EmailSegmentCustomersResponse, root.UltraCartRestApiV2.EmailSegmentResponse, root.UltraCartRestApiV2.EmailSegmentsResponse, root.UltraCartRestApiV2.EmailSendingDomainResponse, root.UltraCartRestApiV2.EmailSendingDomainsResponse, root.UltraCartRestApiV2.EmailStatSummaryRequest, root.UltraCartRestApiV2.EmailStatSummaryResponse, root.UltraCartRestApiV2.EmailStepWaitingRequest, root.UltraCartRestApiV2.EmailStepWaitingResponse, root.UltraCartRestApiV2.EmailTemplate, root.UltraCartRestApiV2.EmailTemplatesResponse, root.UltraCartRestApiV2.EmailThirdPartyListImportRequest, root.UltraCartRestApiV2.EmailThirdPartyProvidersResponse, root.UltraCartRestApiV2.ErrorResponse, root.UltraCartRestApiV2.Experiment, root.UltraCartRestApiV2.ExperimentResponse, root.UltraCartRestApiV2.ExperimentsResponse, root.UltraCartRestApiV2.LookupResponse);
  }
}(this, function(ApiClient, BaseResponse, EmailBaseTemplateListResponse, EmailCampaign, EmailCampaignResponse, EmailCampaignsResponse, EmailCommseq, EmailCommseqEmail, EmailCommseqEmailResponse, EmailCommseqEmailsRequest, EmailCommseqEmailsResponse, EmailCommseqResponse, EmailCommseqStatResponse, EmailCommseqsResponse, EmailCustomer, EmailCustomerEditorUrlResponse, EmailDashboardActivityResponse, EmailDashboardStatsResponse, EmailFlow, EmailFlowResponse, EmailFlowsResponse, EmailList, EmailListArchiveResponse, EmailListCustomersResponse, EmailListResponse, EmailListSubscribeResponse, EmailListsResponse, EmailSegment, EmailSegmentArchiveResponse, EmailSegmentCustomersResponse, EmailSegmentResponse, EmailSegmentsResponse, EmailSendingDomainResponse, EmailSendingDomainsResponse, EmailStatSummaryRequest, EmailStatSummaryResponse, EmailStepWaitingRequest, EmailStepWaitingResponse, EmailTemplate, EmailTemplatesResponse, EmailThirdPartyListImportRequest, EmailThirdPartyProvidersResponse, ErrorResponse, Experiment, ExperimentResponse, ExperimentsResponse, LookupResponse) {
  'use strict';

  /**
   * Storefront service.
   * @module com.ultracart.admin.v2/StorefrontApi
   * @version 2.4.42
   */

  /**
   * Constructs a new StorefrontApi. 
   * @alias module:com.ultracart.admin.v2/StorefrontApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the archiveEmailList operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~archiveEmailListCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListArchiveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive email list
     * @param {String} storefrontOid null
     * @param {String} emailListUuid null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~archiveEmailListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListArchiveResponse}
     */
    this.archiveEmailList = function(storefrontOid, emailListUuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling archiveEmailList");
      }

      // verify the required parameter 'emailListUuid' is set
      if (emailListUuid === undefined || emailListUuid === null) {
        throw new Error("Missing the required parameter 'emailListUuid' when calling archiveEmailList");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'email_list_uuid': emailListUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailListArchiveResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/archive', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the archiveEmailSegment operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~archiveEmailSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSegmentArchiveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive email segment
     * @param {String} storefrontOid null
     * @param {String} emailSegmentUuid null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~archiveEmailSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSegmentArchiveResponse}
     */
    this.archiveEmailSegment = function(storefrontOid, emailSegmentUuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling archiveEmailSegment");
      }

      // verify the required parameter 'emailSegmentUuid' is set
      if (emailSegmentUuid === undefined || emailSegmentUuid === null) {
        throw new Error("Missing the required parameter 'emailSegmentUuid' when calling archiveEmailSegment");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'email_segment_uuid': emailSegmentUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSegmentArchiveResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/archive', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cloneEmailCampaign operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~cloneEmailCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone email campaign
     * @param {String} storefrontOid null
     * @param {String} emailCampaignUuid null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~cloneEmailCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCampaignResponse}
     */
    this.cloneEmailCampaign = function(storefrontOid, emailCampaignUuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling cloneEmailCampaign");
      }

      // verify the required parameter 'emailCampaignUuid' is set
      if (emailCampaignUuid === undefined || emailCampaignUuid === null) {
        throw new Error("Missing the required parameter 'emailCampaignUuid' when calling cloneEmailCampaign");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'email_campaign_uuid': emailCampaignUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCampaignResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/clone', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cloneEmailFlow operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~cloneEmailFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone email flow
     * @param {String} storefrontOid null
     * @param {String} emailFlowUuid null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~cloneEmailFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailFlowResponse}
     */
    this.cloneEmailFlow = function(storefrontOid, emailFlowUuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling cloneEmailFlow");
      }

      // verify the required parameter 'emailFlowUuid' is set
      if (emailFlowUuid === undefined || emailFlowUuid === null) {
        throw new Error("Missing the required parameter 'emailFlowUuid' when calling cloneEmailFlow");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'email_flow_uuid': emailFlowUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailFlowResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/clone', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createEmailSendingDomain operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~createEmailSendingDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSendingDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create email campaign
     * @param {String} domain null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~createEmailSendingDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSendingDomainResponse}
     */
    this.createEmailSendingDomain = function(domain, callback) {
      var postBody = null;

      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling createEmailSendingDomain");
      }


      var pathParams = {
        'domain': domain
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSendingDomainResponse;

      return this.apiClient.callApi(
        '/storefront/email/sending_domains/{domain}/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailEmail operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~deleteEmailEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete email email
     * @param {String} storefrontOid null
     * @param {String} commseqEmailUuid null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~deleteEmailEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/BaseResponse}
     */
    this.deleteEmailEmail = function(storefrontOid, commseqEmailUuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling deleteEmailEmail");
      }

      // verify the required parameter 'commseqEmailUuid' is set
      if (commseqEmailUuid === undefined || commseqEmailUuid === null) {
        throw new Error("Missing the required parameter 'commseqEmailUuid' when calling deleteEmailEmail");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'commseq_email_uuid': commseqEmailUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailListCustomer operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~deleteEmailListCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete email list customer
     * @param {String} storefrontOid null
     * @param {String} emailListUuid null
     * @param {String} emailCustomerUuid null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~deleteEmailListCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/BaseResponse}
     */
    this.deleteEmailListCustomer = function(storefrontOid, emailListUuid, emailCustomerUuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling deleteEmailListCustomer");
      }

      // verify the required parameter 'emailListUuid' is set
      if (emailListUuid === undefined || emailListUuid === null) {
        throw new Error("Missing the required parameter 'emailListUuid' when calling deleteEmailListCustomer");
      }

      // verify the required parameter 'emailCustomerUuid' is set
      if (emailCustomerUuid === undefined || emailCustomerUuid === null) {
        throw new Error("Missing the required parameter 'emailCustomerUuid' when calling deleteEmailListCustomer");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'email_list_uuid': emailListUuid,
        'email_customer_uuid': emailCustomerUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailSendingDomain operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~deleteEmailSendingDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete email campaign
     * @param {String} domain null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~deleteEmailSendingDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/BaseResponse}
     */
    this.deleteEmailSendingDomain = function(domain, callback) {
      var postBody = null;

      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling deleteEmailSendingDomain");
      }


      var pathParams = {
        'domain': domain
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponse;

      return this.apiClient.callApi(
        '/storefront/email/sending_domains/{domain}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExperiment operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~deleteExperimentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete experiment
     * @param {String} storefrontOid null
     * @param {Number} storefrontExperimentOid null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~deleteExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteExperiment = function(storefrontOid, storefrontExperimentOid, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling deleteExperiment");
      }

      // verify the required parameter 'storefrontExperimentOid' is set
      if (storefrontExperimentOid === undefined || storefrontExperimentOid === null) {
        throw new Error("Missing the required parameter 'storefrontExperimentOid' when calling deleteExperiment");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'storefront_experiment_oid': storefrontExperimentOid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailBaseTemplates operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailBaseTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailBaseTemplateListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email communication base templates
     * @param {String} storefrontOid null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailBaseTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailBaseTemplateListResponse}
     */
    this.getEmailBaseTemplates = function(storefrontOid, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getEmailBaseTemplates");
      }


      var pathParams = {
        'storefront_oid': storefrontOid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailBaseTemplateListResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/baseTemplates', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCampaign operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email campaign
     * @param {String} storefrontOid null
     * @param {String} emailCampaignUuid null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCampaignResponse}
     */
    this.getEmailCampaign = function(storefrontOid, emailCampaignUuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getEmailCampaign");
      }

      // verify the required parameter 'emailCampaignUuid' is set
      if (emailCampaignUuid === undefined || emailCampaignUuid === null) {
        throw new Error("Missing the required parameter 'emailCampaignUuid' when calling getEmailCampaign");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'email_campaign_uuid': emailCampaignUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCampaignResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCampaigns operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCampaignsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCampaignsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email campaigns
     * @param {String} storefrontOid null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCampaignsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCampaignsResponse}
     */
    this.getEmailCampaigns = function(storefrontOid, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getEmailCampaigns");
      }


      var pathParams = {
        'storefront_oid': storefrontOid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCampaignsResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaigns', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCampaignsWithStats operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCampaignsWithStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCampaignsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email campaigns with stats
     * @param {String} storefrontOid null
     * @param {String} statDays null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCampaignsWithStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCampaignsResponse}
     */
    this.getEmailCampaignsWithStats = function(storefrontOid, statDays, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getEmailCampaignsWithStats");
      }

      // verify the required parameter 'statDays' is set
      if (statDays === undefined || statDays === null) {
        throw new Error("Missing the required parameter 'statDays' when calling getEmailCampaignsWithStats");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'stat_days': statDays
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCampaignsResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaignsWithStats/{stat_days}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCommseq operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email commseq
     * @param {String} storefrontOid null
     * @param {String} commseqUuid null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqResponse}
     */
    this.getEmailCommseq = function(storefrontOid, commseqUuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getEmailCommseq");
      }

      // verify the required parameter 'commseqUuid' is set
      if (commseqUuid === undefined || commseqUuid === null) {
        throw new Error("Missing the required parameter 'commseqUuid' when calling getEmailCommseq");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'commseq_uuid': commseqUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCommseqEmailStats operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqEmailStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailStatSummaryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email communication sequence emails stats
     * @param {String} storefrontOid null
     * @param {String} commseqUuid null
     * @param {module:com.ultracart.admin.v2.models/EmailStatSummaryRequest} statsRequest StatsRequest
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqEmailStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailStatSummaryResponse}
     */
    this.getEmailCommseqEmailStats = function(storefrontOid, commseqUuid, statsRequest, callback) {
      var postBody = statsRequest;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getEmailCommseqEmailStats");
      }

      // verify the required parameter 'commseqUuid' is set
      if (commseqUuid === undefined || commseqUuid === null) {
        throw new Error("Missing the required parameter 'commseqUuid' when calling getEmailCommseqEmailStats");
      }

      // verify the required parameter 'statsRequest' is set
      if (statsRequest === undefined || statsRequest === null) {
        throw new Error("Missing the required parameter 'statsRequest' when calling getEmailCommseqEmailStats");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'commseq_uuid': commseqUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailStatSummaryResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/emailStats', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCommseqStatOverall operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqStatOverallCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqStatResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get communication sequence stats overall
     * @param {String} storefrontOid null
     * @param {String} commseqUuid null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqStatOverallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqStatResponse}
     */
    this.getEmailCommseqStatOverall = function(storefrontOid, commseqUuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getEmailCommseqStatOverall");
      }

      // verify the required parameter 'commseqUuid' is set
      if (commseqUuid === undefined || commseqUuid === null) {
        throw new Error("Missing the required parameter 'commseqUuid' when calling getEmailCommseqStatOverall");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'commseq_uuid': commseqUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqStatResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCommseqStepWaiting operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqStepWaitingCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailStepWaitingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email communication sequence customers waiting at each requested step
     * @param {String} storefrontOid null
     * @param {String} commseqUuid null
     * @param {module:com.ultracart.admin.v2.models/EmailStepWaitingRequest} waitingRequest WaitingRequest
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqStepWaitingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailStepWaitingResponse}
     */
    this.getEmailCommseqStepWaiting = function(storefrontOid, commseqUuid, waitingRequest, callback) {
      var postBody = waitingRequest;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getEmailCommseqStepWaiting");
      }

      // verify the required parameter 'commseqUuid' is set
      if (commseqUuid === undefined || commseqUuid === null) {
        throw new Error("Missing the required parameter 'commseqUuid' when calling getEmailCommseqStepWaiting");
      }

      // verify the required parameter 'waitingRequest' is set
      if (waitingRequest === undefined || waitingRequest === null) {
        throw new Error("Missing the required parameter 'waitingRequest' when calling getEmailCommseqStepWaiting");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'commseq_uuid': commseqUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailStepWaitingResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCommseqs operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email commseqs
     * @param {String} storefrontOid null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqsResponse}
     */
    this.getEmailCommseqs = function(storefrontOid, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getEmailCommseqs");
      }


      var pathParams = {
        'storefront_oid': storefrontOid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqsResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailDashboardActivity operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailDashboardActivityCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailDashboardActivityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email dashboard activity
     * @param {String} storefrontOid null
     * @param {Object} opts Optional parameters
     * @param {Number} opts.lastRecords null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailDashboardActivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailDashboardActivityResponse}
     */
    this.getEmailDashboardActivity = function(storefrontOid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getEmailDashboardActivity");
      }


      var pathParams = {
        'storefront_oid': storefrontOid
      };
      var queryParams = {
        'last_records': opts['lastRecords'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailDashboardActivityResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/dashboard_activity', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailDashboardStats operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailDashboardStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailDashboardStatsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get dashboard stats
     * @param {String} storefrontOid null
     * @param {Object} opts Optional parameters
     * @param {Number} opts.days null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailDashboardStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailDashboardStatsResponse}
     */
    this.getEmailDashboardStats = function(storefrontOid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getEmailDashboardStats");
      }


      var pathParams = {
        'storefront_oid': storefrontOid
      };
      var queryParams = {
        'days': opts['days'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailDashboardStatsResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/dashboard_stats', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailEmail operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email email
     * @param {String} storefrontOid null
     * @param {String} commseqEmailUuid null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqEmailResponse}
     */
    this.getEmailEmail = function(storefrontOid, commseqEmailUuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getEmailEmail");
      }

      // verify the required parameter 'commseqEmailUuid' is set
      if (commseqEmailUuid === undefined || commseqEmailUuid === null) {
        throw new Error("Missing the required parameter 'commseqEmailUuid' when calling getEmailEmail");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'commseq_email_uuid': commseqEmailUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqEmailResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailEmails operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email emails
     * @param {String} storefrontOid null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqEmailsResponse}
     */
    this.getEmailEmails = function(storefrontOid, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getEmailEmails");
      }


      var pathParams = {
        'storefront_oid': storefrontOid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqEmailsResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/emails', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailEmailsMultiple operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailsMultipleCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email emails multiple
     * @param {String} storefrontOid null
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmailsRequest} emailCommseqEmailsRequest Request of email uuids
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailsMultipleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqEmailsResponse}
     */
    this.getEmailEmailsMultiple = function(storefrontOid, emailCommseqEmailsRequest, callback) {
      var postBody = emailCommseqEmailsRequest;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getEmailEmailsMultiple");
      }

      // verify the required parameter 'emailCommseqEmailsRequest' is set
      if (emailCommseqEmailsRequest === undefined || emailCommseqEmailsRequest === null) {
        throw new Error("Missing the required parameter 'emailCommseqEmailsRequest' when calling getEmailEmailsMultiple");
      }


      var pathParams = {
        'storefront_oid': storefrontOid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqEmailsResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/emails/multiple', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailFlow operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email flow
     * @param {String} storefrontOid null
     * @param {String} emailFlowUuid null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailFlowResponse}
     */
    this.getEmailFlow = function(storefrontOid, emailFlowUuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getEmailFlow");
      }

      // verify the required parameter 'emailFlowUuid' is set
      if (emailFlowUuid === undefined || emailFlowUuid === null) {
        throw new Error("Missing the required parameter 'emailFlowUuid' when calling getEmailFlow");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'email_flow_uuid': emailFlowUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailFlowResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailFlows operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailFlowsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailFlowsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email flows
     * @param {String} storefrontOid null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailFlowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailFlowsResponse}
     */
    this.getEmailFlows = function(storefrontOid, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getEmailFlows");
      }


      var pathParams = {
        'storefront_oid': storefrontOid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailFlowsResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/flows', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailList operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailListCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email list
     * @param {String} storefrontOid null
     * @param {String} emailListUuid null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListResponse}
     */
    this.getEmailList = function(storefrontOid, emailListUuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getEmailList");
      }

      // verify the required parameter 'emailListUuid' is set
      if (emailListUuid === undefined || emailListUuid === null) {
        throw new Error("Missing the required parameter 'emailListUuid' when calling getEmailList");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'email_list_uuid': emailListUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailListResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists/{email_list_uuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailListCustomerEditorUrl operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailListCustomerEditorUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCustomerEditorUrlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email list customers
     * @param {String} storefrontOid null
     * @param {String} emailListUuid null
     * @param {String} emailCustomerUuid null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailListCustomerEditorUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCustomerEditorUrlResponse}
     */
    this.getEmailListCustomerEditorUrl = function(storefrontOid, emailListUuid, emailCustomerUuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getEmailListCustomerEditorUrl");
      }

      // verify the required parameter 'emailListUuid' is set
      if (emailListUuid === undefined || emailListUuid === null) {
        throw new Error("Missing the required parameter 'emailListUuid' when calling getEmailListCustomerEditorUrl");
      }

      // verify the required parameter 'emailCustomerUuid' is set
      if (emailCustomerUuid === undefined || emailCustomerUuid === null) {
        throw new Error("Missing the required parameter 'emailCustomerUuid' when calling getEmailListCustomerEditorUrl");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'email_list_uuid': emailListUuid,
        'email_customer_uuid': emailCustomerUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCustomerEditorUrlResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}/editor_url', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailListCustomers operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailListCustomersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListCustomersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email list customers
     * @param {String} storefrontOid null
     * @param {String} emailListUuid null
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageNumber null
     * @param {Number} opts.pageSize null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailListCustomersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListCustomersResponse}
     */
    this.getEmailListCustomers = function(storefrontOid, emailListUuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getEmailListCustomers");
      }

      // verify the required parameter 'emailListUuid' is set
      if (emailListUuid === undefined || emailListUuid === null) {
        throw new Error("Missing the required parameter 'emailListUuid' when calling getEmailListCustomers");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'email_list_uuid': emailListUuid
      };
      var queryParams = {
        'pageNumber': opts['pageNumber'],
        'pageSize': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailListCustomersResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailLists operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailListsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email lists
     * @param {String} storefrontOid null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListsResponse}
     */
    this.getEmailLists = function(storefrontOid, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getEmailLists");
      }


      var pathParams = {
        'storefront_oid': storefrontOid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailListsResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailSegment operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSegmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email segment
     * @param {String} storefrontOid null
     * @param {String} emailSegmentUuid null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSegmentResponse}
     */
    this.getEmailSegment = function(storefrontOid, emailSegmentUuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getEmailSegment");
      }

      // verify the required parameter 'emailSegmentUuid' is set
      if (emailSegmentUuid === undefined || emailSegmentUuid === null) {
        throw new Error("Missing the required parameter 'emailSegmentUuid' when calling getEmailSegment");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'email_segment_uuid': emailSegmentUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSegmentResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailSegmentCustomerEditorUrl operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailSegmentCustomerEditorUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCustomerEditorUrlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email segment customers editor URL
     * @param {String} storefrontOid null
     * @param {String} emailSegmentUuid null
     * @param {String} emailCustomerUuid null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailSegmentCustomerEditorUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCustomerEditorUrlResponse}
     */
    this.getEmailSegmentCustomerEditorUrl = function(storefrontOid, emailSegmentUuid, emailCustomerUuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getEmailSegmentCustomerEditorUrl");
      }

      // verify the required parameter 'emailSegmentUuid' is set
      if (emailSegmentUuid === undefined || emailSegmentUuid === null) {
        throw new Error("Missing the required parameter 'emailSegmentUuid' when calling getEmailSegmentCustomerEditorUrl");
      }

      // verify the required parameter 'emailCustomerUuid' is set
      if (emailCustomerUuid === undefined || emailCustomerUuid === null) {
        throw new Error("Missing the required parameter 'emailCustomerUuid' when calling getEmailSegmentCustomerEditorUrl");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'email_segment_uuid': emailSegmentUuid,
        'email_customer_uuid': emailCustomerUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCustomerEditorUrlResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers/{email_customer_uuid}/editor_url', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailSegmentCustomers operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailSegmentCustomersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSegmentCustomersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email segment customers
     * @param {String} storefrontOid null
     * @param {String} emailSegmentUuid null
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageNumber null
     * @param {Number} opts.pageSize null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailSegmentCustomersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSegmentCustomersResponse}
     */
    this.getEmailSegmentCustomers = function(storefrontOid, emailSegmentUuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getEmailSegmentCustomers");
      }

      // verify the required parameter 'emailSegmentUuid' is set
      if (emailSegmentUuid === undefined || emailSegmentUuid === null) {
        throw new Error("Missing the required parameter 'emailSegmentUuid' when calling getEmailSegmentCustomers");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'email_segment_uuid': emailSegmentUuid
      };
      var queryParams = {
        'pageNumber': opts['pageNumber'],
        'pageSize': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSegmentCustomersResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailSegments operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailSegmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSegmentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email segments
     * @param {String} storefrontOid null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailSegmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSegmentsResponse}
     */
    this.getEmailSegments = function(storefrontOid, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getEmailSegments");
      }


      var pathParams = {
        'storefront_oid': storefrontOid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSegmentsResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailSendingDomain operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailSendingDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSendingDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email sending domain
     * @param {String} domain null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailSendingDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSendingDomainResponse}
     */
    this.getEmailSendingDomain = function(domain, callback) {
      var postBody = null;

      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling getEmailSendingDomain");
      }


      var pathParams = {
        'domain': domain
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSendingDomainResponse;

      return this.apiClient.callApi(
        '/storefront/email/sending_domain/{domain}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailSendingDomainStatus operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailSendingDomainStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSendingDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email sending domain status
     * @param {String} domain null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailSendingDomainStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSendingDomainResponse}
     */
    this.getEmailSendingDomainStatus = function(domain, callback) {
      var postBody = null;

      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling getEmailSendingDomainStatus");
      }


      var pathParams = {
        'domain': domain
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSendingDomainResponse;

      return this.apiClient.callApi(
        '/storefront/email/sending_domains/{domain}/status', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailSendingDomains operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailSendingDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSendingDomainsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email sending domains
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailSendingDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSendingDomainsResponse}
     */
    this.getEmailSendingDomains = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSendingDomainsResponse;

      return this.apiClient.callApi(
        '/storefront/email/sending_domains', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailTemplate operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email template
     * @param {String} storefrontOid null
     * @param {Number} emailTemplateOid null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailTemplate}
     */
    this.getEmailTemplate = function(storefrontOid, emailTemplateOid, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getEmailTemplate");
      }

      // verify the required parameter 'emailTemplateOid' is set
      if (emailTemplateOid === undefined || emailTemplateOid === null) {
        throw new Error("Missing the required parameter 'emailTemplateOid' when calling getEmailTemplate");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'email_template_oid': emailTemplateOid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailTemplate;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/templates/{email_template_oid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailTemplates operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailTemplatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email templates
     * @param {String} storefrontOid null
     * @param {Object} opts Optional parameters
     * @param {String} opts.triggerType null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailTemplatesResponse}
     */
    this.getEmailTemplates = function(storefrontOid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getEmailTemplates");
      }


      var pathParams = {
        'storefront_oid': storefrontOid
      };
      var queryParams = {
        'trigger_type': opts['triggerType'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailTemplatesResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/templates', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailThirdPartyProviders operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailThirdPartyProvidersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailThirdPartyProvidersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of third party email providers
     * @param {String} storefrontOid null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailThirdPartyProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailThirdPartyProvidersResponse}
     */
    this.getEmailThirdPartyProviders = function(storefrontOid, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getEmailThirdPartyProviders");
      }


      var pathParams = {
        'storefront_oid': storefrontOid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailThirdPartyProvidersResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/third_party_providers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getExperiments operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getExperimentsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ExperimentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get experiments
     * @param {String} storefrontOid null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getExperimentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ExperimentsResponse}
     */
    this.getExperiments = function(storefrontOid, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling getExperiments");
      }


      var pathParams = {
        'storefront_oid': storefrontOid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ExperimentsResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/experiments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importEmailThirdPartyProviderList operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~importEmailThirdPartyProviderListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import a third party provider list
     * @param {String} storefrontOid null
     * @param {module:com.ultracart.admin.v2.models/EmailThirdPartyListImportRequest} importRequest lists to import
     * @param {module:com.ultracart.admin.v2/StorefrontApi~importEmailThirdPartyProviderListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.importEmailThirdPartyProviderList = function(storefrontOid, importRequest, callback) {
      var postBody = importRequest;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling importEmailThirdPartyProviderList");
      }

      // verify the required parameter 'importRequest' is set
      if (importRequest === undefined || importRequest === null) {
        throw new Error("Missing the required parameter 'importRequest' when calling importEmailThirdPartyProviderList");
      }


      var pathParams = {
        'storefront_oid': storefrontOid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/third_party_providers/import', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertEmailCampaign operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~insertEmailCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert email campaign
     * @param {String} storefrontOid null
     * @param {module:com.ultracart.admin.v2.models/EmailCampaign} emailCampaign Email campaign
     * @param {module:com.ultracart.admin.v2/StorefrontApi~insertEmailCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCampaignResponse}
     */
    this.insertEmailCampaign = function(storefrontOid, emailCampaign, callback) {
      var postBody = emailCampaign;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling insertEmailCampaign");
      }

      // verify the required parameter 'emailCampaign' is set
      if (emailCampaign === undefined || emailCampaign === null) {
        throw new Error("Missing the required parameter 'emailCampaign' when calling insertEmailCampaign");
      }


      var pathParams = {
        'storefront_oid': storefrontOid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCampaignResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaigns', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertEmailCommseq operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~insertEmailCommseqCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert email commseq
     * @param {String} storefrontOid null
     * @param {module:com.ultracart.admin.v2.models/EmailCommseq} emailCommseq Email commseq
     * @param {module:com.ultracart.admin.v2/StorefrontApi~insertEmailCommseqCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqResponse}
     */
    this.insertEmailCommseq = function(storefrontOid, emailCommseq, callback) {
      var postBody = emailCommseq;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling insertEmailCommseq");
      }

      // verify the required parameter 'emailCommseq' is set
      if (emailCommseq === undefined || emailCommseq === null) {
        throw new Error("Missing the required parameter 'emailCommseq' when calling insertEmailCommseq");
      }


      var pathParams = {
        'storefront_oid': storefrontOid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertEmailEmail operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~insertEmailEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert email email
     * @param {String} storefrontOid null
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmail} emailCommseqEmail Email email
     * @param {module:com.ultracart.admin.v2/StorefrontApi~insertEmailEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqEmailResponse}
     */
    this.insertEmailEmail = function(storefrontOid, emailCommseqEmail, callback) {
      var postBody = emailCommseqEmail;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling insertEmailEmail");
      }

      // verify the required parameter 'emailCommseqEmail' is set
      if (emailCommseqEmail === undefined || emailCommseqEmail === null) {
        throw new Error("Missing the required parameter 'emailCommseqEmail' when calling insertEmailEmail");
      }


      var pathParams = {
        'storefront_oid': storefrontOid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqEmailResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/emails', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertEmailFlow operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~insertEmailFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert email flow
     * @param {String} storefrontOid null
     * @param {module:com.ultracart.admin.v2.models/EmailFlow} emailFlow Email flow
     * @param {module:com.ultracart.admin.v2/StorefrontApi~insertEmailFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailFlowResponse}
     */
    this.insertEmailFlow = function(storefrontOid, emailFlow, callback) {
      var postBody = emailFlow;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling insertEmailFlow");
      }

      // verify the required parameter 'emailFlow' is set
      if (emailFlow === undefined || emailFlow === null) {
        throw new Error("Missing the required parameter 'emailFlow' when calling insertEmailFlow");
      }


      var pathParams = {
        'storefront_oid': storefrontOid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailFlowResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/flows', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertEmailList operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~insertEmailListCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert email list
     * @param {String} storefrontOid null
     * @param {module:com.ultracart.admin.v2.models/EmailList} emailList Email list
     * @param {module:com.ultracart.admin.v2/StorefrontApi~insertEmailListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListResponse}
     */
    this.insertEmailList = function(storefrontOid, emailList, callback) {
      var postBody = emailList;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling insertEmailList");
      }

      // verify the required parameter 'emailList' is set
      if (emailList === undefined || emailList === null) {
        throw new Error("Missing the required parameter 'emailList' when calling insertEmailList");
      }


      var pathParams = {
        'storefront_oid': storefrontOid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailListResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the insertEmailSegment operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~insertEmailSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSegmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert email segment
     * @param {String} storefrontOid null
     * @param {module:com.ultracart.admin.v2.models/EmailSegment} emailSegment Email segment
     * @param {module:com.ultracart.admin.v2/StorefrontApi~insertEmailSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSegmentResponse}
     */
    this.insertEmailSegment = function(storefrontOid, emailSegment, callback) {
      var postBody = emailSegment;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling insertEmailSegment");
      }

      // verify the required parameter 'emailSegment' is set
      if (emailSegment === undefined || emailSegment === null) {
        throw new Error("Missing the required parameter 'emailSegment' when calling insertEmailSegment");
      }


      var pathParams = {
        'storefront_oid': storefrontOid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSegmentResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the search operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~searchCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/LookupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for all matching values
     * @param {Object} opts Optional parameters
     * @param {String} opts.category null
     * @param {String} opts.matches null
     * @param {Number} opts.maxHits null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~searchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/LookupResponse}
     */
    this.search = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'category': opts['category'],
        'matches': opts['matches'],
        'max_hits': opts['maxHits'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LookupResponse;

      return this.apiClient.callApi(
        '/storefront/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchEmailListCustomers operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~searchEmailListCustomersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListCustomersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search email list customers
     * @param {String} storefrontOid null
     * @param {String} emailListUuid null
     * @param {Object} opts Optional parameters
     * @param {String} opts.startsWith null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~searchEmailListCustomersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListCustomersResponse}
     */
    this.searchEmailListCustomers = function(storefrontOid, emailListUuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling searchEmailListCustomers");
      }

      // verify the required parameter 'emailListUuid' is set
      if (emailListUuid === undefined || emailListUuid === null) {
        throw new Error("Missing the required parameter 'emailListUuid' when calling searchEmailListCustomers");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'email_list_uuid': emailListUuid
      };
      var queryParams = {
        'startsWith': opts['startsWith'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailListCustomersResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchEmailSegmentCustomers operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~searchEmailSegmentCustomersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSegmentCustomersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search email segment customers
     * @param {String} storefrontOid null
     * @param {String} emailSegmentUuid null
     * @param {Object} opts Optional parameters
     * @param {String} opts.startsWith null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~searchEmailSegmentCustomersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSegmentCustomersResponse}
     */
    this.searchEmailSegmentCustomers = function(storefrontOid, emailSegmentUuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling searchEmailSegmentCustomers");
      }

      // verify the required parameter 'emailSegmentUuid' is set
      if (emailSegmentUuid === undefined || emailSegmentUuid === null) {
        throw new Error("Missing the required parameter 'emailSegmentUuid' when calling searchEmailSegmentCustomers");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'email_segment_uuid': emailSegmentUuid
      };
      var queryParams = {
        'startsWith': opts['startsWith'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSegmentCustomersResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the startEmailCampaign operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~startEmailCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start email campaign
     * @param {String} storefrontOid null
     * @param {String} emailCampaignUuid null
     * @param {module:com.ultracart.admin.v2/StorefrontApi~startEmailCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/BaseResponse}
     */
    this.startEmailCampaign = function(storefrontOid, emailCampaignUuid, callback) {
      var postBody = null;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling startEmailCampaign");
      }

      // verify the required parameter 'emailCampaignUuid' is set
      if (emailCampaignUuid === undefined || emailCampaignUuid === null) {
        throw new Error("Missing the required parameter 'emailCampaignUuid' when calling startEmailCampaign");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'email_campaign_uuid': emailCampaignUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BaseResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/start', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribeToEmailList operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~subscribeToEmailListCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListSubscribeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe customers to email list
     * @param {String} storefrontOid null
     * @param {String} emailListUuid null
     * @param {Array.<module:com.ultracart.admin.v2.models/EmailCustomer>} customers Customers
     * @param {module:com.ultracart.admin.v2/StorefrontApi~subscribeToEmailListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListSubscribeResponse}
     */
    this.subscribeToEmailList = function(storefrontOid, emailListUuid, customers, callback) {
      var postBody = customers;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling subscribeToEmailList");
      }

      // verify the required parameter 'emailListUuid' is set
      if (emailListUuid === undefined || emailListUuid === null) {
        throw new Error("Missing the required parameter 'emailListUuid' when calling subscribeToEmailList");
      }

      // verify the required parameter 'customers' is set
      if (customers === undefined || customers === null) {
        throw new Error("Missing the required parameter 'customers' when calling subscribeToEmailList");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'email_list_uuid': emailListUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailListSubscribeResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/subscribe', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailCampaign operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email campaign
     * @param {String} storefrontOid null
     * @param {String} emailCampaignUuid null
     * @param {module:com.ultracart.admin.v2.models/EmailCampaign} emailCampaign Email campaign
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCampaignResponse}
     */
    this.updateEmailCampaign = function(storefrontOid, emailCampaignUuid, emailCampaign, callback) {
      var postBody = emailCampaign;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling updateEmailCampaign");
      }

      // verify the required parameter 'emailCampaignUuid' is set
      if (emailCampaignUuid === undefined || emailCampaignUuid === null) {
        throw new Error("Missing the required parameter 'emailCampaignUuid' when calling updateEmailCampaign");
      }

      // verify the required parameter 'emailCampaign' is set
      if (emailCampaign === undefined || emailCampaign === null) {
        throw new Error("Missing the required parameter 'emailCampaign' when calling updateEmailCampaign");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'email_campaign_uuid': emailCampaignUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCampaignResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailCommseq operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailCommseqCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email commseq
     * @param {String} storefrontOid null
     * @param {String} commseqUuid null
     * @param {module:com.ultracart.admin.v2.models/EmailCommseq} emailCommseq Email commseq
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailCommseqCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqResponse}
     */
    this.updateEmailCommseq = function(storefrontOid, commseqUuid, emailCommseq, callback) {
      var postBody = emailCommseq;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling updateEmailCommseq");
      }

      // verify the required parameter 'commseqUuid' is set
      if (commseqUuid === undefined || commseqUuid === null) {
        throw new Error("Missing the required parameter 'commseqUuid' when calling updateEmailCommseq");
      }

      // verify the required parameter 'emailCommseq' is set
      if (emailCommseq === undefined || emailCommseq === null) {
        throw new Error("Missing the required parameter 'emailCommseq' when calling updateEmailCommseq");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'commseq_uuid': commseqUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailEmail operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email email
     * @param {String} storefrontOid null
     * @param {String} commseqEmailUuid null
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmail} emailCommseqEmail Email commseq email
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqEmailResponse}
     */
    this.updateEmailEmail = function(storefrontOid, commseqEmailUuid, emailCommseqEmail, callback) {
      var postBody = emailCommseqEmail;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling updateEmailEmail");
      }

      // verify the required parameter 'commseqEmailUuid' is set
      if (commseqEmailUuid === undefined || commseqEmailUuid === null) {
        throw new Error("Missing the required parameter 'commseqEmailUuid' when calling updateEmailEmail");
      }

      // verify the required parameter 'emailCommseqEmail' is set
      if (emailCommseqEmail === undefined || emailCommseqEmail === null) {
        throw new Error("Missing the required parameter 'emailCommseqEmail' when calling updateEmailEmail");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'commseq_email_uuid': commseqEmailUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailCommseqEmailResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailFlow operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email flow
     * @param {String} storefrontOid null
     * @param {String} emailFlowUuid null
     * @param {module:com.ultracart.admin.v2.models/EmailFlow} emailFlow Email flow
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailFlowResponse}
     */
    this.updateEmailFlow = function(storefrontOid, emailFlowUuid, emailFlow, callback) {
      var postBody = emailFlow;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling updateEmailFlow");
      }

      // verify the required parameter 'emailFlowUuid' is set
      if (emailFlowUuid === undefined || emailFlowUuid === null) {
        throw new Error("Missing the required parameter 'emailFlowUuid' when calling updateEmailFlow");
      }

      // verify the required parameter 'emailFlow' is set
      if (emailFlow === undefined || emailFlow === null) {
        throw new Error("Missing the required parameter 'emailFlow' when calling updateEmailFlow");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'email_flow_uuid': emailFlowUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailFlowResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailList operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailListCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email list
     * @param {String} storefrontOid null
     * @param {String} emailListUuid null
     * @param {module:com.ultracart.admin.v2.models/EmailList} emailList Email list
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListResponse}
     */
    this.updateEmailList = function(storefrontOid, emailListUuid, emailList, callback) {
      var postBody = emailList;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling updateEmailList");
      }

      // verify the required parameter 'emailListUuid' is set
      if (emailListUuid === undefined || emailListUuid === null) {
        throw new Error("Missing the required parameter 'emailListUuid' when calling updateEmailList");
      }

      // verify the required parameter 'emailList' is set
      if (emailList === undefined || emailList === null) {
        throw new Error("Missing the required parameter 'emailList' when calling updateEmailList");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'email_list_uuid': emailListUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailListResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists/{email_list_uuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailSegment operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSegmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email segment
     * @param {String} storefrontOid null
     * @param {String} emailSegmentUuid null
     * @param {module:com.ultracart.admin.v2.models/EmailSegment} emailSegment Email segment
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSegmentResponse}
     */
    this.updateEmailSegment = function(storefrontOid, emailSegmentUuid, emailSegment, callback) {
      var postBody = emailSegment;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling updateEmailSegment");
      }

      // verify the required parameter 'emailSegmentUuid' is set
      if (emailSegmentUuid === undefined || emailSegmentUuid === null) {
        throw new Error("Missing the required parameter 'emailSegmentUuid' when calling updateEmailSegment");
      }

      // verify the required parameter 'emailSegment' is set
      if (emailSegment === undefined || emailSegment === null) {
        throw new Error("Missing the required parameter 'emailSegment' when calling updateEmailSegment");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'email_segment_uuid': emailSegmentUuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmailSegmentResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExperiment operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ExperimentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update experiment
     * @param {String} storefrontOid null
     * @param {Number} storefrontExperimentOid null
     * @param {module:com.ultracart.admin.v2.models/Experiment} experiment Experiment
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ExperimentResponse}
     */
    this.updateExperiment = function(storefrontOid, storefrontExperimentOid, experiment, callback) {
      var postBody = experiment;

      // verify the required parameter 'storefrontOid' is set
      if (storefrontOid === undefined || storefrontOid === null) {
        throw new Error("Missing the required parameter 'storefrontOid' when calling updateExperiment");
      }

      // verify the required parameter 'storefrontExperimentOid' is set
      if (storefrontExperimentOid === undefined || storefrontExperimentOid === null) {
        throw new Error("Missing the required parameter 'storefrontExperimentOid' when calling updateExperiment");
      }

      // verify the required parameter 'experiment' is set
      if (experiment === undefined || experiment === null) {
        throw new Error("Missing the required parameter 'experiment' when calling updateExperiment");
      }


      var pathParams = {
        'storefront_oid': storefrontOid,
        'storefront_experiment_oid': storefrontExperimentOid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ExperimentResponse;

      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
