/**
 * UltraCart Rest API V2
 * UltraCart REST API Version 2
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@ultracart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddLibraryItemRequest from '../com.ultracart.admin.v2.models/AddLibraryItemRequest';
import ApplyLibraryItemRequest from '../com.ultracart.admin.v2.models/ApplyLibraryItemRequest';
import ApplyLibraryItemResponse from '../com.ultracart.admin.v2.models/ApplyLibraryItemResponse';
import BaseResponse from '../com.ultracart.admin.v2.models/BaseResponse';
import CountriesResponse from '../com.ultracart.admin.v2.models/CountriesResponse';
import EmailBaseTemplateListResponse from '../com.ultracart.admin.v2.models/EmailBaseTemplateListResponse';
import EmailCampaign from '../com.ultracart.admin.v2.models/EmailCampaign';
import EmailCampaignFolder from '../com.ultracart.admin.v2.models/EmailCampaignFolder';
import EmailCampaignFolderResponse from '../com.ultracart.admin.v2.models/EmailCampaignFolderResponse';
import EmailCampaignFoldersResponse from '../com.ultracart.admin.v2.models/EmailCampaignFoldersResponse';
import EmailCampaignResponse from '../com.ultracart.admin.v2.models/EmailCampaignResponse';
import EmailCampaignsResponse from '../com.ultracart.admin.v2.models/EmailCampaignsResponse';
import EmailClicksResponse from '../com.ultracart.admin.v2.models/EmailClicksResponse';
import EmailCommseq from '../com.ultracart.admin.v2.models/EmailCommseq';
import EmailCommseqEmail from '../com.ultracart.admin.v2.models/EmailCommseqEmail';
import EmailCommseqEmailResponse from '../com.ultracart.admin.v2.models/EmailCommseqEmailResponse';
import EmailCommseqEmailSendTestRequest from '../com.ultracart.admin.v2.models/EmailCommseqEmailSendTestRequest';
import EmailCommseqEmailSendTestResponse from '../com.ultracart.admin.v2.models/EmailCommseqEmailSendTestResponse';
import EmailCommseqEmailsRequest from '../com.ultracart.admin.v2.models/EmailCommseqEmailsRequest';
import EmailCommseqEmailsResponse from '../com.ultracart.admin.v2.models/EmailCommseqEmailsResponse';
import EmailCommseqPostcard from '../com.ultracart.admin.v2.models/EmailCommseqPostcard';
import EmailCommseqPostcardResponse from '../com.ultracart.admin.v2.models/EmailCommseqPostcardResponse';
import EmailCommseqPostcardSendTestRequest from '../com.ultracart.admin.v2.models/EmailCommseqPostcardSendTestRequest';
import EmailCommseqPostcardSendTestResponse from '../com.ultracart.admin.v2.models/EmailCommseqPostcardSendTestResponse';
import EmailCommseqPostcardsRequest from '../com.ultracart.admin.v2.models/EmailCommseqPostcardsRequest';
import EmailCommseqPostcardsResponse from '../com.ultracart.admin.v2.models/EmailCommseqPostcardsResponse';
import EmailCommseqResponse from '../com.ultracart.admin.v2.models/EmailCommseqResponse';
import EmailCommseqSequenceTestRequest from '../com.ultracart.admin.v2.models/EmailCommseqSequenceTestRequest';
import EmailCommseqSequenceTestResponse from '../com.ultracart.admin.v2.models/EmailCommseqSequenceTestResponse';
import EmailCommseqSmsSendTestRequest from '../com.ultracart.admin.v2.models/EmailCommseqSmsSendTestRequest';
import EmailCommseqSmsSendTestResponse from '../com.ultracart.admin.v2.models/EmailCommseqSmsSendTestResponse';
import EmailCommseqStatResponse from '../com.ultracart.admin.v2.models/EmailCommseqStatResponse';
import EmailCommseqStepLogsResponse from '../com.ultracart.admin.v2.models/EmailCommseqStepLogsResponse';
import EmailCommseqWebhookSendTestRequest from '../com.ultracart.admin.v2.models/EmailCommseqWebhookSendTestRequest';
import EmailCommseqWebhookSendTestResponse from '../com.ultracart.admin.v2.models/EmailCommseqWebhookSendTestResponse';
import EmailCommseqsResponse from '../com.ultracart.admin.v2.models/EmailCommseqsResponse';
import EmailCustomer from '../com.ultracart.admin.v2.models/EmailCustomer';
import EmailCustomerEditorUrlResponse from '../com.ultracart.admin.v2.models/EmailCustomerEditorUrlResponse';
import EmailCustomersResponse from '../com.ultracart.admin.v2.models/EmailCustomersResponse';
import EmailDashboardActivityResponse from '../com.ultracart.admin.v2.models/EmailDashboardActivityResponse';
import EmailDashboardStatsResponse from '../com.ultracart.admin.v2.models/EmailDashboardStatsResponse';
import EmailDomain from '../com.ultracart.admin.v2.models/EmailDomain';
import EmailEditorTokenResponse from '../com.ultracart.admin.v2.models/EmailEditorTokenResponse';
import EmailFlow from '../com.ultracart.admin.v2.models/EmailFlow';
import EmailFlowBackPopulateRequest from '../com.ultracart.admin.v2.models/EmailFlowBackPopulateRequest';
import EmailFlowBackPopulateResponse from '../com.ultracart.admin.v2.models/EmailFlowBackPopulateResponse';
import EmailFlowFolder from '../com.ultracart.admin.v2.models/EmailFlowFolder';
import EmailFlowFolderResponse from '../com.ultracart.admin.v2.models/EmailFlowFolderResponse';
import EmailFlowFoldersResponse from '../com.ultracart.admin.v2.models/EmailFlowFoldersResponse';
import EmailFlowResponse from '../com.ultracart.admin.v2.models/EmailFlowResponse';
import EmailFlowsResponse from '../com.ultracart.admin.v2.models/EmailFlowsResponse';
import EmailGlobalSettings from '../com.ultracart.admin.v2.models/EmailGlobalSettings';
import EmailGlobalSettingsResponse from '../com.ultracart.admin.v2.models/EmailGlobalSettingsResponse';
import EmailGlobalUnsubscribeRequest from '../com.ultracart.admin.v2.models/EmailGlobalUnsubscribeRequest';
import EmailGlobalUnsubscribeResponse from '../com.ultracart.admin.v2.models/EmailGlobalUnsubscribeResponse';
import EmailHistogramPropertyNamesResponse from '../com.ultracart.admin.v2.models/EmailHistogramPropertyNamesResponse';
import EmailHistogramPropertyValuesResponse from '../com.ultracart.admin.v2.models/EmailHistogramPropertyValuesResponse';
import EmailList from '../com.ultracart.admin.v2.models/EmailList';
import EmailListArchiveResponse from '../com.ultracart.admin.v2.models/EmailListArchiveResponse';
import EmailListCustomersResponse from '../com.ultracart.admin.v2.models/EmailListCustomersResponse';
import EmailListResponse from '../com.ultracart.admin.v2.models/EmailListResponse';
import EmailListSegmentFolder from '../com.ultracart.admin.v2.models/EmailListSegmentFolder';
import EmailListSegmentFolderResponse from '../com.ultracart.admin.v2.models/EmailListSegmentFolderResponse';
import EmailListSegmentFoldersResponse from '../com.ultracart.admin.v2.models/EmailListSegmentFoldersResponse';
import EmailListSubscribeResponse from '../com.ultracart.admin.v2.models/EmailListSubscribeResponse';
import EmailListsResponse from '../com.ultracart.admin.v2.models/EmailListsResponse';
import EmailOrdersResponse from '../com.ultracart.admin.v2.models/EmailOrdersResponse';
import EmailPerformanceResponse from '../com.ultracart.admin.v2.models/EmailPerformanceResponse';
import EmailPlan from '../com.ultracart.admin.v2.models/EmailPlan';
import EmailPlanResponse from '../com.ultracart.admin.v2.models/EmailPlanResponse';
import EmailPostcardTrackingResponse from '../com.ultracart.admin.v2.models/EmailPostcardTrackingResponse';
import EmailSegment from '../com.ultracart.admin.v2.models/EmailSegment';
import EmailSegmentArchiveResponse from '../com.ultracart.admin.v2.models/EmailSegmentArchiveResponse';
import EmailSegmentCustomersResponse from '../com.ultracart.admin.v2.models/EmailSegmentCustomersResponse';
import EmailSegmentDownloadPrepareResponse from '../com.ultracart.admin.v2.models/EmailSegmentDownloadPrepareResponse';
import EmailSegmentResponse from '../com.ultracart.admin.v2.models/EmailSegmentResponse';
import EmailSegmentsResponse from '../com.ultracart.admin.v2.models/EmailSegmentsResponse';
import EmailSendingDomainResponse from '../com.ultracart.admin.v2.models/EmailSendingDomainResponse';
import EmailSendingDomainsResponse from '../com.ultracart.admin.v2.models/EmailSendingDomainsResponse';
import EmailSettings from '../com.ultracart.admin.v2.models/EmailSettings';
import EmailSettingsResponse from '../com.ultracart.admin.v2.models/EmailSettingsResponse';
import EmailStatPostcardSummaryRequest from '../com.ultracart.admin.v2.models/EmailStatPostcardSummaryRequest';
import EmailStatPostcardSummaryResponse from '../com.ultracart.admin.v2.models/EmailStatPostcardSummaryResponse';
import EmailStatSummaryRequest from '../com.ultracart.admin.v2.models/EmailStatSummaryRequest';
import EmailStatSummaryResponse from '../com.ultracart.admin.v2.models/EmailStatSummaryResponse';
import EmailStepStatRequest from '../com.ultracart.admin.v2.models/EmailStepStatRequest';
import EmailStepStatResponse from '../com.ultracart.admin.v2.models/EmailStepStatResponse';
import EmailStepWaitingRequest from '../com.ultracart.admin.v2.models/EmailStepWaitingRequest';
import EmailStepWaitingResponse from '../com.ultracart.admin.v2.models/EmailStepWaitingResponse';
import EmailTemplate from '../com.ultracart.admin.v2.models/EmailTemplate';
import EmailTemplatesResponse from '../com.ultracart.admin.v2.models/EmailTemplatesResponse';
import EmailThirdPartyListImportRequest from '../com.ultracart.admin.v2.models/EmailThirdPartyListImportRequest';
import EmailThirdPartyProvidersResponse from '../com.ultracart.admin.v2.models/EmailThirdPartyProvidersResponse';
import EmailWebhookEditorValuesResponse from '../com.ultracart.admin.v2.models/EmailWebhookEditorValuesResponse';
import ErrorResponse from '../com.ultracart.admin.v2.models/ErrorResponse';
import Experiment from '../com.ultracart.admin.v2.models/Experiment';
import ExperimentResponse from '../com.ultracart.admin.v2.models/ExperimentResponse';
import ExperimentsResponse from '../com.ultracart.admin.v2.models/ExperimentsResponse';
import FileManagerPageResponse from '../com.ultracart.admin.v2.models/FileManagerPageResponse';
import FileManagerUploadRequest from '../com.ultracart.admin.v2.models/FileManagerUploadRequest';
import FileManagerUploadUrlResponse from '../com.ultracart.admin.v2.models/FileManagerUploadUrlResponse';
import GeocodeRequest from '../com.ultracart.admin.v2.models/GeocodeRequest';
import GeocodeResponse from '../com.ultracart.admin.v2.models/GeocodeResponse';
import LibraryFilterValuesResponse from '../com.ultracart.admin.v2.models/LibraryFilterValuesResponse';
import LibraryItem from '../com.ultracart.admin.v2.models/LibraryItem';
import LibraryItemQuery from '../com.ultracart.admin.v2.models/LibraryItemQuery';
import LibraryItemResponse from '../com.ultracart.admin.v2.models/LibraryItemResponse';
import LibraryItemsResponse from '../com.ultracart.admin.v2.models/LibraryItemsResponse';
import LookupRequest from '../com.ultracart.admin.v2.models/LookupRequest';
import LookupResponse from '../com.ultracart.admin.v2.models/LookupResponse';
import PricingTiersResponse from '../com.ultracart.admin.v2.models/PricingTiersResponse';
import PublishLibraryItemRequest from '../com.ultracart.admin.v2.models/PublishLibraryItemRequest';
import RulerValidationRequest from '../com.ultracart.admin.v2.models/RulerValidationRequest';
import RulerValidationResponse from '../com.ultracart.admin.v2.models/RulerValidationResponse';
import ScreenRecordingHeatmapIndexRequest from '../com.ultracart.admin.v2.models/ScreenRecordingHeatmapIndexRequest';
import ScreenRecordingHeatmapIndexResponse from '../com.ultracart.admin.v2.models/ScreenRecordingHeatmapIndexResponse';
import ScreenRecordingHeatmapRequest from '../com.ultracart.admin.v2.models/ScreenRecordingHeatmapRequest';
import ScreenRecordingHeatmapReset from '../com.ultracart.admin.v2.models/ScreenRecordingHeatmapReset';
import ScreenRecordingHeatmapResponse from '../com.ultracart.admin.v2.models/ScreenRecordingHeatmapResponse';
import ScreenRecordingMerchantNotesRequest from '../com.ultracart.admin.v2.models/ScreenRecordingMerchantNotesRequest';
import ScreenRecordingPageViewDataResponse from '../com.ultracart.admin.v2.models/ScreenRecordingPageViewDataResponse';
import ScreenRecordingQueryRequest from '../com.ultracart.admin.v2.models/ScreenRecordingQueryRequest';
import ScreenRecordingQueryResponse from '../com.ultracart.admin.v2.models/ScreenRecordingQueryResponse';
import ScreenRecordingResponse from '../com.ultracart.admin.v2.models/ScreenRecordingResponse';
import ScreenRecordingSegment from '../com.ultracart.admin.v2.models/ScreenRecordingSegment';
import ScreenRecordingSegmentResponse from '../com.ultracart.admin.v2.models/ScreenRecordingSegmentResponse';
import ScreenRecordingSegmentsResponse from '../com.ultracart.admin.v2.models/ScreenRecordingSegmentsResponse';
import ScreenRecordingSettings from '../com.ultracart.admin.v2.models/ScreenRecordingSettings';
import ScreenRecordingSettingsResponse from '../com.ultracart.admin.v2.models/ScreenRecordingSettingsResponse';
import ScreenRecordingTagsRequest from '../com.ultracart.admin.v2.models/ScreenRecordingTagsRequest';
import ScreenRecordingTagsResponse from '../com.ultracart.admin.v2.models/ScreenRecordingTagsResponse';
import ScreenshotsResponse from '../com.ultracart.admin.v2.models/ScreenshotsResponse';
import StoreFrontsResponse from '../com.ultracart.admin.v2.models/StoreFrontsResponse';
import ThumbnailParametersRequest from '../com.ultracart.admin.v2.models/ThumbnailParametersRequest';
import ThumbnailParametersResponse from '../com.ultracart.admin.v2.models/ThumbnailParametersResponse';
import TransactionEmail from '../com.ultracart.admin.v2.models/TransactionEmail';
import TransactionEmailListResponse from '../com.ultracart.admin.v2.models/TransactionEmailListResponse';
import TransactionEmailResponse from '../com.ultracart.admin.v2.models/TransactionEmailResponse';
import Twilio from '../com.ultracart.admin.v2.models/Twilio';
import TwilioResponse from '../com.ultracart.admin.v2.models/TwilioResponse';
import TwiliosResponse from '../com.ultracart.admin.v2.models/TwiliosResponse';

/**
* Storefront service.
* @module com.ultracart.admin.v2/StorefrontApi
* @version 4.0.81-RC
*/
export default class StorefrontApi {

    /**
    * Constructs a new StorefrontApi. 
    * @alias module:com.ultracart.admin.v2/StorefrontApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addToLibrary operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~addToLibraryCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/LibraryItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add to library
     * @param {module:com.ultracart.admin.v2.models/AddLibraryItemRequest} add_library_request New library item request
     * @param {module:com.ultracart.admin.v2/StorefrontApi~addToLibraryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/LibraryItemResponse}
     */
    addToLibrary(add_library_request, callback) {
      let postBody = add_library_request;
      // verify the required parameter 'add_library_request' is set
      if (add_library_request === undefined || add_library_request === null) {
        throw new Error("Missing the required parameter 'add_library_request' when calling addToLibrary");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LibraryItemResponse;
      return this.apiClient.callApi(
        '/storefront/code_library', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applyToStoreFront operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~applyToStoreFrontCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ApplyLibraryItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Apply library item to storefront.
     * @param {module:com.ultracart.admin.v2.models/ApplyLibraryItemRequest} apply_library_request New library item
     * @param {module:com.ultracart.admin.v2/StorefrontApi~applyToStoreFrontCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ApplyLibraryItemResponse}
     */
    applyToStoreFront(apply_library_request, callback) {
      let postBody = apply_library_request;
      // verify the required parameter 'apply_library_request' is set
      if (apply_library_request === undefined || apply_library_request === null) {
        throw new Error("Missing the required parameter 'apply_library_request' when calling applyToStoreFront");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApplyLibraryItemResponse;
      return this.apiClient.callApi(
        '/storefront/code_library/apply', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the archiveEmailList operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~archiveEmailListCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListArchiveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive email list
     * @param {Number} storefront_oid 
     * @param {String} email_list_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~archiveEmailListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListArchiveResponse}
     */
    archiveEmailList(storefront_oid, email_list_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling archiveEmailList");
      }
      // verify the required parameter 'email_list_uuid' is set
      if (email_list_uuid === undefined || email_list_uuid === null) {
        throw new Error("Missing the required parameter 'email_list_uuid' when calling archiveEmailList");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_list_uuid': email_list_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailListArchiveResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the archiveEmailSegment operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~archiveEmailSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSegmentArchiveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive email segment
     * @param {Number} storefront_oid 
     * @param {String} email_segment_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~archiveEmailSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSegmentArchiveResponse}
     */
    archiveEmailSegment(storefront_oid, email_segment_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling archiveEmailSegment");
      }
      // verify the required parameter 'email_segment_uuid' is set
      if (email_segment_uuid === undefined || email_segment_uuid === null) {
        throw new Error("Missing the required parameter 'email_segment_uuid' when calling archiveEmailSegment");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_segment_uuid': email_segment_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailSegmentArchiveResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the backPopulateEmailFlow operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~backPopulateEmailFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailFlowBackPopulateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Back populate email flow
     * @param {Number} storefront_oid 
     * @param {String} email_flow_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailFlowBackPopulateRequest} back_populate_request The request to back populate
     * @param {module:com.ultracart.admin.v2/StorefrontApi~backPopulateEmailFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailFlowBackPopulateResponse}
     */
    backPopulateEmailFlow(storefront_oid, email_flow_uuid, back_populate_request, callback) {
      let postBody = back_populate_request;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling backPopulateEmailFlow");
      }
      // verify the required parameter 'email_flow_uuid' is set
      if (email_flow_uuid === undefined || email_flow_uuid === null) {
        throw new Error("Missing the required parameter 'email_flow_uuid' when calling backPopulateEmailFlow");
      }
      // verify the required parameter 'back_populate_request' is set
      if (back_populate_request === undefined || back_populate_request === null) {
        throw new Error("Missing the required parameter 'back_populate_request' when calling backPopulateEmailFlow");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_flow_uuid': email_flow_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailFlowBackPopulateResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/backfill', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkDownloadEmailSegment operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~checkDownloadEmailSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSegmentDownloadPrepareResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check download of email segment
     * @param {Number} storefront_oid 
     * @param {String} email_segment_uuid 
     * @param {String} email_segment_rebuild_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~checkDownloadEmailSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSegmentDownloadPrepareResponse}
     */
    checkDownloadEmailSegment(storefront_oid, email_segment_uuid, email_segment_rebuild_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling checkDownloadEmailSegment");
      }
      // verify the required parameter 'email_segment_uuid' is set
      if (email_segment_uuid === undefined || email_segment_uuid === null) {
        throw new Error("Missing the required parameter 'email_segment_uuid' when calling checkDownloadEmailSegment");
      }
      // verify the required parameter 'email_segment_rebuild_uuid' is set
      if (email_segment_rebuild_uuid === undefined || email_segment_rebuild_uuid === null) {
        throw new Error("Missing the required parameter 'email_segment_rebuild_uuid' when calling checkDownloadEmailSegment");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_segment_uuid': email_segment_uuid,
        'email_segment_rebuild_uuid': email_segment_rebuild_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailSegmentDownloadPrepareResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare/{email_segment_rebuild_uuid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloneEmailCampaign operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~cloneEmailCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone email campaign
     * @param {Number} storefront_oid 
     * @param {String} email_campaign_uuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.target_storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~cloneEmailCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCampaignResponse}
     */
    cloneEmailCampaign(storefront_oid, email_campaign_uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling cloneEmailCampaign");
      }
      // verify the required parameter 'email_campaign_uuid' is set
      if (email_campaign_uuid === undefined || email_campaign_uuid === null) {
        throw new Error("Missing the required parameter 'email_campaign_uuid' when calling cloneEmailCampaign");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_campaign_uuid': email_campaign_uuid
      };
      let queryParams = {
        'target_storefront_oid': opts['target_storefront_oid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailCampaignResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/clone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloneEmailFlow operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~cloneEmailFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clone email flow
     * @param {Number} storefront_oid 
     * @param {String} email_flow_uuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.target_storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~cloneEmailFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailFlowResponse}
     */
    cloneEmailFlow(storefront_oid, email_flow_uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling cloneEmailFlow");
      }
      // verify the required parameter 'email_flow_uuid' is set
      if (email_flow_uuid === undefined || email_flow_uuid === null) {
        throw new Error("Missing the required parameter 'email_flow_uuid' when calling cloneEmailFlow");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_flow_uuid': email_flow_uuid
      };
      let queryParams = {
        'target_storefront_oid': opts['target_storefront_oid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailFlowResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/clone', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEmailSendingDomain operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~createEmailSendingDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSendingDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create email campaign
     * @param {String} domain 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~createEmailSendingDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSendingDomainResponse}
     */
    createEmailSendingDomain(domain, callback) {
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling createEmailSendingDomain");
      }

      let pathParams = {
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailSendingDomainResponse;
      return this.apiClient.callApi(
        '/storefront/email/sending_domains/{domain}/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEmailSendingDomain2 operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~createEmailSendingDomain2Callback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSendingDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create email sending domain for various providers
     * @param {module:com.ultracart.admin.v2.models/EmailDomain} email_domain EmailDomain
     * @param {module:com.ultracart.admin.v2/StorefrontApi~createEmailSendingDomain2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSendingDomainResponse}
     */
    createEmailSendingDomain2(email_domain, callback) {
      let postBody = email_domain;
      // verify the required parameter 'email_domain' is set
      if (email_domain === undefined || email_domain === null) {
        throw new Error("Missing the required parameter 'email_domain' when calling createEmailSendingDomain2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailSendingDomainResponse;
      return this.apiClient.callApi(
        '/storefront/email/sending_domains', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFsDirectory operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~createFsDirectoryCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/FileManagerPageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create file manager directory
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.name 
     * @param {Number} opts.parent_storefront_fs_directory_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~createFsDirectoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/FileManagerPageResponse}
     */
    createFsDirectory(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createFsDirectory");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'name': opts['name'],
        'parent_storefront_fs_directory_oid': opts['parent_storefront_fs_directory_oid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileManagerPageResponse;
      return this.apiClient.callApi(
        '/storefront/{id}/fs/dir', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTwilioAccount operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~createTwilioAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/TwilioResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Twilio account
     * @param {module:com.ultracart.admin.v2.models/Twilio} twilio Twilio
     * @param {module:com.ultracart.admin.v2/StorefrontApi~createTwilioAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/TwilioResponse}
     */
    createTwilioAccount(twilio, callback) {
      let postBody = twilio;
      // verify the required parameter 'twilio' is set
      if (twilio === undefined || twilio === null) {
        throw new Error("Missing the required parameter 'twilio' when calling createTwilioAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TwilioResponse;
      return this.apiClient.callApi(
        '/storefront/twilio/accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailCampaignFolder operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~deleteEmailCampaignFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete email campaignFolder
     * @param {Number} storefront_oid 
     * @param {String} email_campaign_folder_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~deleteEmailCampaignFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/BaseResponse}
     */
    deleteEmailCampaignFolder(storefront_oid, email_campaign_folder_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling deleteEmailCampaignFolder");
      }
      // verify the required parameter 'email_campaign_folder_uuid' is set
      if (email_campaign_folder_uuid === undefined || email_campaign_folder_uuid === null) {
        throw new Error("Missing the required parameter 'email_campaign_folder_uuid' when calling deleteEmailCampaignFolder");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_campaign_folder_uuid': email_campaign_folder_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BaseResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaign_folders/{email_campaign_folder_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailCommseqStat operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~deleteEmailCommseqStatCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete communication sequence stats
     * @param {Number} storefront_oid 
     * @param {String} commseq_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~deleteEmailCommseqStatCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEmailCommseqStat(storefront_oid, commseq_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling deleteEmailCommseqStat");
      }
      // verify the required parameter 'commseq_uuid' is set
      if (commseq_uuid === undefined || commseq_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_uuid' when calling deleteEmailCommseqStat");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_uuid': commseq_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailEmail operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~deleteEmailEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete email email
     * @param {Number} storefront_oid 
     * @param {String} commseq_email_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~deleteEmailEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/BaseResponse}
     */
    deleteEmailEmail(storefront_oid, commseq_email_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling deleteEmailEmail");
      }
      // verify the required parameter 'commseq_email_uuid' is set
      if (commseq_email_uuid === undefined || commseq_email_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_email_uuid' when calling deleteEmailEmail");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_email_uuid': commseq_email_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BaseResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailFlowFolder operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~deleteEmailFlowFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete email flowFolder
     * @param {Number} storefront_oid 
     * @param {String} email_flow_folder_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~deleteEmailFlowFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/BaseResponse}
     */
    deleteEmailFlowFolder(storefront_oid, email_flow_folder_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling deleteEmailFlowFolder");
      }
      // verify the required parameter 'email_flow_folder_uuid' is set
      if (email_flow_folder_uuid === undefined || email_flow_folder_uuid === null) {
        throw new Error("Missing the required parameter 'email_flow_folder_uuid' when calling deleteEmailFlowFolder");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_flow_folder_uuid': email_flow_folder_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BaseResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/flow_folders/{email_flow_folder_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailListCustomer operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~deleteEmailListCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete email list customer
     * @param {Number} storefront_oid 
     * @param {String} email_list_uuid 
     * @param {String} email_customer_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~deleteEmailListCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/BaseResponse}
     */
    deleteEmailListCustomer(storefront_oid, email_list_uuid, email_customer_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling deleteEmailListCustomer");
      }
      // verify the required parameter 'email_list_uuid' is set
      if (email_list_uuid === undefined || email_list_uuid === null) {
        throw new Error("Missing the required parameter 'email_list_uuid' when calling deleteEmailListCustomer");
      }
      // verify the required parameter 'email_customer_uuid' is set
      if (email_customer_uuid === undefined || email_customer_uuid === null) {
        throw new Error("Missing the required parameter 'email_customer_uuid' when calling deleteEmailListCustomer");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_list_uuid': email_list_uuid,
        'email_customer_uuid': email_customer_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BaseResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailListSegmentFolder operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~deleteEmailListSegmentFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete email ListSegmentFolder
     * @param {Number} storefront_oid 
     * @param {String} email_list_segment_folder_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~deleteEmailListSegmentFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/BaseResponse}
     */
    deleteEmailListSegmentFolder(storefront_oid, email_list_segment_folder_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling deleteEmailListSegmentFolder");
      }
      // verify the required parameter 'email_list_segment_folder_uuid' is set
      if (email_list_segment_folder_uuid === undefined || email_list_segment_folder_uuid === null) {
        throw new Error("Missing the required parameter 'email_list_segment_folder_uuid' when calling deleteEmailListSegmentFolder");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_list_segment_folder_uuid': email_list_segment_folder_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BaseResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/list_segment_folders/{email_list_segment_folder_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailPostcard operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~deleteEmailPostcardCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete email postcard
     * @param {Number} storefront_oid 
     * @param {String} commseq_postcard_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~deleteEmailPostcardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/BaseResponse}
     */
    deleteEmailPostcard(storefront_oid, commseq_postcard_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling deleteEmailPostcard");
      }
      // verify the required parameter 'commseq_postcard_uuid' is set
      if (commseq_postcard_uuid === undefined || commseq_postcard_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_postcard_uuid' when calling deleteEmailPostcard");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_postcard_uuid': commseq_postcard_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BaseResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailSendingDomain operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~deleteEmailSendingDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete email campaign
     * @param {String} domain 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~deleteEmailSendingDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/BaseResponse}
     */
    deleteEmailSendingDomain(domain, callback) {
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling deleteEmailSendingDomain");
      }

      let pathParams = {
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BaseResponse;
      return this.apiClient.callApi(
        '/storefront/email/sending_domains/{domain}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExperiment operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~deleteExperimentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete experiment
     * @param {Number} storefront_oid 
     * @param {Number} storefront_experiment_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~deleteExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteExperiment(storefront_oid, storefront_experiment_oid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling deleteExperiment");
      }
      // verify the required parameter 'storefront_experiment_oid' is set
      if (storefront_experiment_oid === undefined || storefront_experiment_oid === null) {
        throw new Error("Missing the required parameter 'storefront_experiment_oid' when calling deleteExperiment");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'storefront_experiment_oid': storefront_experiment_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFsFile operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~deleteFsFileCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/FileManagerPageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete file manager directory
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.parent_storefront_fs_directory_oid 
     * @param {Number} opts.storefront_fs_file_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~deleteFsFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/FileManagerPageResponse}
     */
    deleteFsFile(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFsFile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'parent_storefront_fs_directory_oid': opts['parent_storefront_fs_directory_oid'],
        'storefront_fs_file_oid': opts['storefront_fs_file_oid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileManagerPageResponse;
      return this.apiClient.callApi(
        '/storefront/{id}/fs/file', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteHeatmap operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~deleteHeatmapCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete screen recording heatmap
     * Delete screen recording heatmap 
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/ScreenRecordingHeatmapReset} query Query
     * @param {module:com.ultracart.admin.v2/StorefrontApi~deleteHeatmapCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteHeatmap(storefront_oid, query, callback) {
      let postBody = query;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling deleteHeatmap");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling deleteHeatmap");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/screen_recordings/heatmap', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLibraryItem operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~deleteLibraryItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete library item
     * @param {Number} library_item_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~deleteLibraryItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteLibraryItem(library_item_oid, callback) {
      let postBody = null;
      // verify the required parameter 'library_item_oid' is set
      if (library_item_oid === undefined || library_item_oid === null) {
        throw new Error("Missing the required parameter 'library_item_oid' when calling deleteLibraryItem");
      }

      let pathParams = {
        'library_item_oid': library_item_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/storefront/code_library/{library_item_oid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLibraryItemPublishedVersions operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~deleteLibraryItemPublishedVersionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all published versions for a library item, including anything in review.
     * @param {Number} library_item_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~deleteLibraryItemPublishedVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteLibraryItemPublishedVersions(library_item_oid, callback) {
      let postBody = null;
      // verify the required parameter 'library_item_oid' is set
      if (library_item_oid === undefined || library_item_oid === null) {
        throw new Error("Missing the required parameter 'library_item_oid' when calling deleteLibraryItemPublishedVersions");
      }

      let pathParams = {
        'library_item_oid': library_item_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/storefront/code_library/{library_item_oid}/published_versions', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteScreenRecordingSegment operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~deleteScreenRecordingSegmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete screen recording segment
     * @param {Number} storefront_oid 
     * @param {Number} screen_recording_segment_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~deleteScreenRecordingSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteScreenRecordingSegment(storefront_oid, screen_recording_segment_oid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling deleteScreenRecordingSegment");
      }
      // verify the required parameter 'screen_recording_segment_oid' is set
      if (screen_recording_segment_oid === undefined || screen_recording_segment_oid === null) {
        throw new Error("Missing the required parameter 'screen_recording_segment_oid' when calling deleteScreenRecordingSegment");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'screen_recording_segment_oid': screen_recording_segment_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTwilioAccount operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~deleteTwilioAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete Twilio account
     * @param {String} esp_twilio_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~deleteTwilioAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/BaseResponse}
     */
    deleteTwilioAccount(esp_twilio_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'esp_twilio_uuid' is set
      if (esp_twilio_uuid === undefined || esp_twilio_uuid === null) {
        throw new Error("Missing the required parameter 'esp_twilio_uuid' when calling deleteTwilioAccount");
      }

      let pathParams = {
        'esp_twilio_uuid': esp_twilio_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BaseResponse;
      return this.apiClient.callApi(
        '/storefront/twilio/accounts/{esp_twilio_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the duplicateLibraryItem operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~duplicateLibraryItemCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/LibraryItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Duplicate library item.
     * @param {Number} library_item_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~duplicateLibraryItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/LibraryItemResponse}
     */
    duplicateLibraryItem(library_item_oid, callback) {
      let postBody = null;
      // verify the required parameter 'library_item_oid' is set
      if (library_item_oid === undefined || library_item_oid === null) {
        throw new Error("Missing the required parameter 'library_item_oid' when calling duplicateLibraryItem");
      }

      let pathParams = {
        'library_item_oid': library_item_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LibraryItemResponse;
      return this.apiClient.callApi(
        '/storefront/code_library/{library_item_oid}/duplicate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the favoriteScreenRecording operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~favoriteScreenRecordingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update favorite flag on screen recording
     * Update favorite flag on screen recording 
     * @param {Number} storefront_oid 
     * @param {String} screen_recording_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~favoriteScreenRecordingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    favoriteScreenRecording(storefront_oid, screen_recording_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling favoriteScreenRecording");
      }
      // verify the required parameter 'screen_recording_uuid' is set
      if (screen_recording_uuid === undefined || screen_recording_uuid === null) {
        throw new Error("Missing the required parameter 'screen_recording_uuid' when calling favoriteScreenRecording");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'screen_recording_uuid': screen_recording_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/favorite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the geocodeAddress operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~geocodeAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/GeocodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtain lat/long for an address
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/GeocodeRequest} geocode_request geocode request
     * @param {module:com.ultracart.admin.v2/StorefrontApi~geocodeAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/GeocodeResponse}
     */
    geocodeAddress(storefront_oid, geocode_request, callback) {
      let postBody = geocode_request;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling geocodeAddress");
      }
      // verify the required parameter 'geocode_request' is set
      if (geocode_request === undefined || geocode_request === null) {
        throw new Error("Missing the required parameter 'geocode_request' when calling geocodeAddress");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GeocodeResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/geocode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCountries operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getCountriesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/CountriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get countries
     * Obtain a list of all the countries 
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getCountriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/CountriesResponse}
     */
    getCountries(storefront_oid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getCountries");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountriesResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/countries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEditorToken operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEditorTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailEditorTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets editor token
     * Fetches a temporary authentication token for the editor 
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEditorTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailEditorTokenResponse}
     */
    getEditorToken(storefront_oid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEditorToken");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailEditorTokenResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/editor_token', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailBaseTemplates operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailBaseTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailBaseTemplateListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email communication base templates
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailBaseTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailBaseTemplateListResponse}
     */
    getEmailBaseTemplates(storefront_oid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailBaseTemplates");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailBaseTemplateListResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/baseTemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCampaign operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email campaign
     * @param {Number} storefront_oid 
     * @param {String} email_campaign_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCampaignResponse}
     */
    getEmailCampaign(storefront_oid, email_campaign_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCampaign");
      }
      // verify the required parameter 'email_campaign_uuid' is set
      if (email_campaign_uuid === undefined || email_campaign_uuid === null) {
        throw new Error("Missing the required parameter 'email_campaign_uuid' when calling getEmailCampaign");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_campaign_uuid': email_campaign_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailCampaignResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCampaignFolder operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCampaignFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCampaignFolderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email campaign folder
     * @param {Number} storefront_oid 
     * @param {String} email_campaign_folder_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCampaignFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCampaignFolderResponse}
     */
    getEmailCampaignFolder(storefront_oid, email_campaign_folder_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCampaignFolder");
      }
      // verify the required parameter 'email_campaign_folder_uuid' is set
      if (email_campaign_folder_uuid === undefined || email_campaign_folder_uuid === null) {
        throw new Error("Missing the required parameter 'email_campaign_folder_uuid' when calling getEmailCampaignFolder");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_campaign_folder_uuid': email_campaign_folder_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailCampaignFolderResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaign_folders/{email_campaign_folder_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCampaignFolders operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCampaignFoldersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCampaignFoldersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email campaign folders
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCampaignFoldersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCampaignFoldersResponse}
     */
    getEmailCampaignFolders(storefront_oid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCampaignFolders");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailCampaignFoldersResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaign_folders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCampaignScreenshots operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCampaignScreenshotsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ScreenshotsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email campaign screenshots
     * @param {Number} storefront_oid 
     * @param {String} email_campaign_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCampaignScreenshotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ScreenshotsResponse}
     */
    getEmailCampaignScreenshots(storefront_oid, email_campaign_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCampaignScreenshots");
      }
      // verify the required parameter 'email_campaign_uuid' is set
      if (email_campaign_uuid === undefined || email_campaign_uuid === null) {
        throw new Error("Missing the required parameter 'email_campaign_uuid' when calling getEmailCampaignScreenshots");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_campaign_uuid': email_campaign_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScreenshotsResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/screenshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCampaigns operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCampaignsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCampaignsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email campaigns
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCampaignsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCampaignsResponse}
     */
    getEmailCampaigns(storefront_oid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCampaigns");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailCampaignsResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaigns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCampaignsWithStats operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCampaignsWithStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCampaignsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email campaigns with stats
     * @param {Number} storefront_oid 
     * @param {String} stat_days 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCampaignsWithStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCampaignsResponse}
     */
    getEmailCampaignsWithStats(storefront_oid, stat_days, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCampaignsWithStats");
      }
      // verify the required parameter 'stat_days' is set
      if (stat_days === undefined || stat_days === null) {
        throw new Error("Missing the required parameter 'stat_days' when calling getEmailCampaignsWithStats");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'stat_days': stat_days
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailCampaignsResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaignsWithStats/{stat_days}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCommseq operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email commseq
     * @param {Number} storefront_oid 
     * @param {String} commseq_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqResponse}
     */
    getEmailCommseq(storefront_oid, commseq_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCommseq");
      }
      // verify the required parameter 'commseq_uuid' is set
      if (commseq_uuid === undefined || commseq_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_uuid' when calling getEmailCommseq");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_uuid': commseq_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailCommseqResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCommseqEmailStats operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqEmailStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailStatSummaryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email communication sequence emails stats
     * @param {Number} storefront_oid 
     * @param {String} commseq_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailStatSummaryRequest} statsRequest StatsRequest
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqEmailStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailStatSummaryResponse}
     */
    getEmailCommseqEmailStats(storefront_oid, commseq_uuid, statsRequest, callback) {
      let postBody = statsRequest;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCommseqEmailStats");
      }
      // verify the required parameter 'commseq_uuid' is set
      if (commseq_uuid === undefined || commseq_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_uuid' when calling getEmailCommseqEmailStats");
      }
      // verify the required parameter 'statsRequest' is set
      if (statsRequest === undefined || statsRequest === null) {
        throw new Error("Missing the required parameter 'statsRequest' when calling getEmailCommseqEmailStats");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_uuid': commseq_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailStatSummaryResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/emailStats', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCommseqPostcardStats operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqPostcardStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailStatPostcardSummaryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email communication sequence postcard stats
     * @param {Number} storefront_oid 
     * @param {String} commseq_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailStatPostcardSummaryRequest} statsRequest StatsRequest
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqPostcardStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailStatPostcardSummaryResponse}
     */
    getEmailCommseqPostcardStats(storefront_oid, commseq_uuid, statsRequest, callback) {
      let postBody = statsRequest;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCommseqPostcardStats");
      }
      // verify the required parameter 'commseq_uuid' is set
      if (commseq_uuid === undefined || commseq_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_uuid' when calling getEmailCommseqPostcardStats");
      }
      // verify the required parameter 'statsRequest' is set
      if (statsRequest === undefined || statsRequest === null) {
        throw new Error("Missing the required parameter 'statsRequest' when calling getEmailCommseqPostcardStats");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_uuid': commseq_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailStatPostcardSummaryResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/postcardStats', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCommseqPostcardTracking operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqPostcardTrackingCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailPostcardTrackingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email communication postcard tracking
     * @param {Number} storefront_oid 
     * @param {String} commseq_postcard_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqPostcardTrackingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailPostcardTrackingResponse}
     */
    getEmailCommseqPostcardTracking(storefront_oid, commseq_postcard_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCommseqPostcardTracking");
      }
      // verify the required parameter 'commseq_postcard_uuid' is set
      if (commseq_postcard_uuid === undefined || commseq_postcard_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_postcard_uuid' when calling getEmailCommseqPostcardTracking");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_postcard_uuid': commseq_postcard_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailPostcardTrackingResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}/tracking', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCommseqStatOverall operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqStatOverallCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqStatResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get communication sequence stats overall
     * @param {Number} storefront_oid 
     * @param {String} commseq_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqStatOverallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqStatResponse}
     */
    getEmailCommseqStatOverall(storefront_oid, commseq_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCommseqStatOverall");
      }
      // verify the required parameter 'commseq_uuid' is set
      if (commseq_uuid === undefined || commseq_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_uuid' when calling getEmailCommseqStatOverall");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_uuid': commseq_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailCommseqStatResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stat', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCommseqStepStats operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqStepStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailStepStatResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email communication sequence step stats
     * @param {Number} storefront_oid 
     * @param {String} commseq_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailStepStatRequest} statsRequest StatsRequest
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqStepStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailStepStatResponse}
     */
    getEmailCommseqStepStats(storefront_oid, commseq_uuid, statsRequest, callback) {
      let postBody = statsRequest;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCommseqStepStats");
      }
      // verify the required parameter 'commseq_uuid' is set
      if (commseq_uuid === undefined || commseq_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_uuid' when calling getEmailCommseqStepStats");
      }
      // verify the required parameter 'statsRequest' is set
      if (statsRequest === undefined || statsRequest === null) {
        throw new Error("Missing the required parameter 'statsRequest' when calling getEmailCommseqStepStats");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_uuid': commseq_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailStepStatResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/stepStats', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCommseqStepWaiting operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqStepWaitingCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailStepWaitingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email communication sequence customers waiting at each requested step
     * @param {Number} storefront_oid 
     * @param {String} commseq_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailStepWaitingRequest} waitingRequest WaitingRequest
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqStepWaitingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailStepWaitingResponse}
     */
    getEmailCommseqStepWaiting(storefront_oid, commseq_uuid, waitingRequest, callback) {
      let postBody = waitingRequest;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCommseqStepWaiting");
      }
      // verify the required parameter 'commseq_uuid' is set
      if (commseq_uuid === undefined || commseq_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_uuid' when calling getEmailCommseqStepWaiting");
      }
      // verify the required parameter 'waitingRequest' is set
      if (waitingRequest === undefined || waitingRequest === null) {
        throw new Error("Missing the required parameter 'waitingRequest' when calling getEmailCommseqStepWaiting");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_uuid': commseq_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailStepWaitingResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCommseqWebhookEditorValues operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqWebhookEditorValuesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailWebhookEditorValuesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email webhook editor values
     * @param {Number} storefront_oid 
     * @param {String} commseq_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqWebhookEditorValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailWebhookEditorValuesResponse}
     */
    getEmailCommseqWebhookEditorValues(storefront_oid, commseq_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCommseqWebhookEditorValues");
      }
      // verify the required parameter 'commseq_uuid' is set
      if (commseq_uuid === undefined || commseq_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_uuid' when calling getEmailCommseqWebhookEditorValues");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_uuid': commseq_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailWebhookEditorValuesResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/webhookEditorValues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCommseqs operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email commseqs
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCommseqsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqsResponse}
     */
    getEmailCommseqs(storefront_oid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCommseqs");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailCommseqsResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCustomerEditorUrl operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCustomerEditorUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCustomerEditorUrlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get customers editor URL
     * @param {Number} storefront_oid 
     * @param {String} email_customer_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCustomerEditorUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCustomerEditorUrlResponse}
     */
    getEmailCustomerEditorUrl(storefront_oid, email_customer_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCustomerEditorUrl");
      }
      // verify the required parameter 'email_customer_uuid' is set
      if (email_customer_uuid === undefined || email_customer_uuid === null) {
        throw new Error("Missing the required parameter 'email_customer_uuid' when calling getEmailCustomerEditorUrl");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_customer_uuid': email_customer_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailCustomerEditorUrlResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/customers/{email_customer_uuid}/editor_url', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailCustomers operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailCustomersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCustomersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email customers
     * @param {Number} storefront_oid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageNumber 
     * @param {Number} opts.pageSize 
     * @param {String} opts.searchEmailPrefix 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailCustomersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCustomersResponse}
     */
    getEmailCustomers(storefront_oid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailCustomers");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
        'pageNumber': opts['pageNumber'],
        'pageSize': opts['pageSize'],
        'searchEmailPrefix': opts['searchEmailPrefix']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailCustomersResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/customers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailDashboardActivity operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailDashboardActivityCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailDashboardActivityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email dashboard activity
     * @param {Number} storefront_oid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.last_records 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailDashboardActivityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailDashboardActivityResponse}
     */
    getEmailDashboardActivity(storefront_oid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailDashboardActivity");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
        'last_records': opts['last_records']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailDashboardActivityResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/dashboard_activity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailDashboardStats operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailDashboardStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailDashboardStatsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get dashboard stats
     * @param {Number} storefront_oid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.days 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailDashboardStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailDashboardStatsResponse}
     */
    getEmailDashboardStats(storefront_oid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailDashboardStats");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
        'days': opts['days']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailDashboardStatsResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/dashboard_stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailDispatchLogs operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailDispatchLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqStepLogsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email dispatch logs
     * @param {Number} storefront_oid 
     * @param {String} commseq_uuid 
     * @param {String} commseq_step_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailDispatchLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqStepLogsResponse}
     */
    getEmailDispatchLogs(storefront_oid, commseq_uuid, commseq_step_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailDispatchLogs");
      }
      // verify the required parameter 'commseq_uuid' is set
      if (commseq_uuid === undefined || commseq_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_uuid' when calling getEmailDispatchLogs");
      }
      // verify the required parameter 'commseq_step_uuid' is set
      if (commseq_step_uuid === undefined || commseq_step_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_step_uuid' when calling getEmailDispatchLogs");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_uuid': commseq_uuid,
        'commseq_step_uuid': commseq_step_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailCommseqStepLogsResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailEmail operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email email
     * @param {Number} storefront_oid 
     * @param {String} commseq_email_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqEmailResponse}
     */
    getEmailEmail(storefront_oid, commseq_email_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailEmail");
      }
      // verify the required parameter 'commseq_email_uuid' is set
      if (commseq_email_uuid === undefined || commseq_email_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_email_uuid' when calling getEmailEmail");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_email_uuid': commseq_email_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailCommseqEmailResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailEmailClicks operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailClicksCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailClicksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email email clicks
     * @param {Number} storefront_oid 
     * @param {String} commseq_uuid 
     * @param {String} commseq_step_uuid 
     * @param {String} commseq_email_uuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.days 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailClicksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailClicksResponse}
     */
    getEmailEmailClicks(storefront_oid, commseq_uuid, commseq_step_uuid, commseq_email_uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailEmailClicks");
      }
      // verify the required parameter 'commseq_uuid' is set
      if (commseq_uuid === undefined || commseq_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_uuid' when calling getEmailEmailClicks");
      }
      // verify the required parameter 'commseq_step_uuid' is set
      if (commseq_step_uuid === undefined || commseq_step_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_step_uuid' when calling getEmailEmailClicks");
      }
      // verify the required parameter 'commseq_email_uuid' is set
      if (commseq_email_uuid === undefined || commseq_email_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_email_uuid' when calling getEmailEmailClicks");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_uuid': commseq_uuid,
        'commseq_step_uuid': commseq_step_uuid,
        'commseq_email_uuid': commseq_email_uuid
      };
      let queryParams = {
        'days': opts['days']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailClicksResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/emails/{commseq_email_uuid}/clicks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailEmailCustomerEditorUrl operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailCustomerEditorUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCustomerEditorUrlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email order customer editor url
     * @param {Number} storefront_oid 
     * @param {String} commseq_email_uuid 
     * @param {String} order_id 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailCustomerEditorUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCustomerEditorUrlResponse}
     */
    getEmailEmailCustomerEditorUrl(storefront_oid, commseq_email_uuid, order_id, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailEmailCustomerEditorUrl");
      }
      // verify the required parameter 'commseq_email_uuid' is set
      if (commseq_email_uuid === undefined || commseq_email_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_email_uuid' when calling getEmailEmailCustomerEditorUrl");
      }
      // verify the required parameter 'order_id' is set
      if (order_id === undefined || order_id === null) {
        throw new Error("Missing the required parameter 'order_id' when calling getEmailEmailCustomerEditorUrl");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_email_uuid': commseq_email_uuid,
        'order_id': order_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailCustomerEditorUrlResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/orders/{order_id}/editor_url', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailEmailOrders operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailOrdersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email email orders
     * @param {Number} storefront_oid 
     * @param {String} commseq_uuid 
     * @param {String} commseq_step_uuid 
     * @param {String} commseq_email_uuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.days 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailOrdersResponse}
     */
    getEmailEmailOrders(storefront_oid, commseq_uuid, commseq_step_uuid, commseq_email_uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailEmailOrders");
      }
      // verify the required parameter 'commseq_uuid' is set
      if (commseq_uuid === undefined || commseq_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_uuid' when calling getEmailEmailOrders");
      }
      // verify the required parameter 'commseq_step_uuid' is set
      if (commseq_step_uuid === undefined || commseq_step_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_step_uuid' when calling getEmailEmailOrders");
      }
      // verify the required parameter 'commseq_email_uuid' is set
      if (commseq_email_uuid === undefined || commseq_email_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_email_uuid' when calling getEmailEmailOrders");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_uuid': commseq_uuid,
        'commseq_step_uuid': commseq_step_uuid,
        'commseq_email_uuid': commseq_email_uuid
      };
      let queryParams = {
        'days': opts['days']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailOrdersResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/steps/{commseq_step_uuid}/emails/{commseq_email_uuid}/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailEmails operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email emails
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqEmailsResponse}
     */
    getEmailEmails(storefront_oid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailEmails");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailCommseqEmailsResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/emails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailEmailsMultiple operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailsMultipleCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email emails multiple
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmailsRequest} email_commseq_emails_request Request of email uuids
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailEmailsMultipleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqEmailsResponse}
     */
    getEmailEmailsMultiple(storefront_oid, email_commseq_emails_request, callback) {
      let postBody = email_commseq_emails_request;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailEmailsMultiple");
      }
      // verify the required parameter 'email_commseq_emails_request' is set
      if (email_commseq_emails_request === undefined || email_commseq_emails_request === null) {
        throw new Error("Missing the required parameter 'email_commseq_emails_request' when calling getEmailEmailsMultiple");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailCommseqEmailsResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/emails/multiple', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailFlow operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email flow
     * @param {Number} storefront_oid 
     * @param {String} email_flow_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailFlowResponse}
     */
    getEmailFlow(storefront_oid, email_flow_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailFlow");
      }
      // verify the required parameter 'email_flow_uuid' is set
      if (email_flow_uuid === undefined || email_flow_uuid === null) {
        throw new Error("Missing the required parameter 'email_flow_uuid' when calling getEmailFlow");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_flow_uuid': email_flow_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailFlowResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailFlowFolder operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailFlowFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailFlowFolderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email flow folder
     * @param {Number} storefront_oid 
     * @param {String} email_flow_folder_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailFlowFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailFlowFolderResponse}
     */
    getEmailFlowFolder(storefront_oid, email_flow_folder_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailFlowFolder");
      }
      // verify the required parameter 'email_flow_folder_uuid' is set
      if (email_flow_folder_uuid === undefined || email_flow_folder_uuid === null) {
        throw new Error("Missing the required parameter 'email_flow_folder_uuid' when calling getEmailFlowFolder");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_flow_folder_uuid': email_flow_folder_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailFlowFolderResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/flow_folders/{email_flow_folder_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailFlowFolders operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailFlowFoldersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailFlowFoldersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email flow folders
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailFlowFoldersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailFlowFoldersResponse}
     */
    getEmailFlowFolders(storefront_oid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailFlowFolders");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailFlowFoldersResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/flow_folders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailFlowScreenshots operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailFlowScreenshotsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ScreenshotsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email flow screenshots
     * @param {Number} storefront_oid 
     * @param {String} email_flow_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailFlowScreenshotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ScreenshotsResponse}
     */
    getEmailFlowScreenshots(storefront_oid, email_flow_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailFlowScreenshots");
      }
      // verify the required parameter 'email_flow_uuid' is set
      if (email_flow_uuid === undefined || email_flow_uuid === null) {
        throw new Error("Missing the required parameter 'email_flow_uuid' when calling getEmailFlowScreenshots");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_flow_uuid': email_flow_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScreenshotsResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}/screenshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailFlows operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailFlowsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailFlowsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email flows
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailFlowsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailFlowsResponse}
     */
    getEmailFlows(storefront_oid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailFlows");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailFlowsResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/flows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailGlobalSettings operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailGlobalSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailGlobalSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email globalsettings
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailGlobalSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailGlobalSettingsResponse}
     */
    getEmailGlobalSettings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailGlobalSettingsResponse;
      return this.apiClient.callApi(
        '/storefront/email/global_settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailList operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailListCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email list
     * @param {Number} storefront_oid 
     * @param {String} email_list_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListResponse}
     */
    getEmailList(storefront_oid, email_list_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailList");
      }
      // verify the required parameter 'email_list_uuid' is set
      if (email_list_uuid === undefined || email_list_uuid === null) {
        throw new Error("Missing the required parameter 'email_list_uuid' when calling getEmailList");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_list_uuid': email_list_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailListResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists/{email_list_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailListCustomerEditorUrl operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailListCustomerEditorUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCustomerEditorUrlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email list customer editor url
     * @param {Number} storefront_oid 
     * @param {String} email_list_uuid 
     * @param {String} email_customer_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailListCustomerEditorUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCustomerEditorUrlResponse}
     */
    getEmailListCustomerEditorUrl(storefront_oid, email_list_uuid, email_customer_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailListCustomerEditorUrl");
      }
      // verify the required parameter 'email_list_uuid' is set
      if (email_list_uuid === undefined || email_list_uuid === null) {
        throw new Error("Missing the required parameter 'email_list_uuid' when calling getEmailListCustomerEditorUrl");
      }
      // verify the required parameter 'email_customer_uuid' is set
      if (email_customer_uuid === undefined || email_customer_uuid === null) {
        throw new Error("Missing the required parameter 'email_customer_uuid' when calling getEmailListCustomerEditorUrl");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_list_uuid': email_list_uuid,
        'email_customer_uuid': email_customer_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailCustomerEditorUrlResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers/{email_customer_uuid}/editor_url', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailListCustomers operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailListCustomersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListCustomersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email list customers
     * @param {Number} storefront_oid 
     * @param {String} email_list_uuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageNumber 
     * @param {Number} opts.pageSize 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailListCustomersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListCustomersResponse}
     */
    getEmailListCustomers(storefront_oid, email_list_uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailListCustomers");
      }
      // verify the required parameter 'email_list_uuid' is set
      if (email_list_uuid === undefined || email_list_uuid === null) {
        throw new Error("Missing the required parameter 'email_list_uuid' when calling getEmailListCustomers");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_list_uuid': email_list_uuid
      };
      let queryParams = {
        'pageNumber': opts['pageNumber'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailListCustomersResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/customers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailListSegmentFolder operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailListSegmentFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListSegmentFolderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email campaign folder
     * @param {Number} storefront_oid 
     * @param {String} email_list_segment_folder_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailListSegmentFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListSegmentFolderResponse}
     */
    getEmailListSegmentFolder(storefront_oid, email_list_segment_folder_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailListSegmentFolder");
      }
      // verify the required parameter 'email_list_segment_folder_uuid' is set
      if (email_list_segment_folder_uuid === undefined || email_list_segment_folder_uuid === null) {
        throw new Error("Missing the required parameter 'email_list_segment_folder_uuid' when calling getEmailListSegmentFolder");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_list_segment_folder_uuid': email_list_segment_folder_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailListSegmentFolderResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/list_segment_folders/{email_list_segment_folder_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailListSegmentFolders operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailListSegmentFoldersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListSegmentFoldersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email campaign folders
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailListSegmentFoldersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListSegmentFoldersResponse}
     */
    getEmailListSegmentFolders(storefront_oid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailListSegmentFolders");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailListSegmentFoldersResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/list_segment_folders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailLists operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailListsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email lists
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListsResponse}
     */
    getEmailLists(storefront_oid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailLists");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailListsResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailPerformance operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailPerformanceCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailPerformanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email performance
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailPerformanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailPerformanceResponse}
     */
    getEmailPerformance(storefront_oid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailPerformance");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailPerformanceResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/performance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailPlan operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailPlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email plan
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailPlanResponse}
     */
    getEmailPlan(storefront_oid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailPlan");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailPlanResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/plan', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailPostcard operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailPostcardCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqPostcardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email postcard
     * @param {Number} storefront_oid 
     * @param {String} commseq_postcard_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailPostcardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqPostcardResponse}
     */
    getEmailPostcard(storefront_oid, commseq_postcard_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailPostcard");
      }
      // verify the required parameter 'commseq_postcard_uuid' is set
      if (commseq_postcard_uuid === undefined || commseq_postcard_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_postcard_uuid' when calling getEmailPostcard");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_postcard_uuid': commseq_postcard_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailCommseqPostcardResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailPostcards operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailPostcardsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqPostcardsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email postcards
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailPostcardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqPostcardsResponse}
     */
    getEmailPostcards(storefront_oid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailPostcards");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailCommseqPostcardsResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/postcards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailPostcardsMultiple operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailPostcardsMultipleCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqPostcardsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email postcards multiple
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqPostcardsRequest} email_commseq_postcards_request Request of postcard uuids
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailPostcardsMultipleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqPostcardsResponse}
     */
    getEmailPostcardsMultiple(storefront_oid, email_commseq_postcards_request, callback) {
      let postBody = email_commseq_postcards_request;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailPostcardsMultiple");
      }
      // verify the required parameter 'email_commseq_postcards_request' is set
      if (email_commseq_postcards_request === undefined || email_commseq_postcards_request === null) {
        throw new Error("Missing the required parameter 'email_commseq_postcards_request' when calling getEmailPostcardsMultiple");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailCommseqPostcardsResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/postcards/multiple', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailSegment operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSegmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email segment
     * @param {Number} storefront_oid 
     * @param {String} email_segment_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSegmentResponse}
     */
    getEmailSegment(storefront_oid, email_segment_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailSegment");
      }
      // verify the required parameter 'email_segment_uuid' is set
      if (email_segment_uuid === undefined || email_segment_uuid === null) {
        throw new Error("Missing the required parameter 'email_segment_uuid' when calling getEmailSegment");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_segment_uuid': email_segment_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailSegmentResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailSegmentCustomerEditorUrl operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailSegmentCustomerEditorUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCustomerEditorUrlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email segment customers editor URL
     * @param {Number} storefront_oid 
     * @param {String} email_segment_uuid 
     * @param {String} email_customer_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailSegmentCustomerEditorUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCustomerEditorUrlResponse}
     */
    getEmailSegmentCustomerEditorUrl(storefront_oid, email_segment_uuid, email_customer_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailSegmentCustomerEditorUrl");
      }
      // verify the required parameter 'email_segment_uuid' is set
      if (email_segment_uuid === undefined || email_segment_uuid === null) {
        throw new Error("Missing the required parameter 'email_segment_uuid' when calling getEmailSegmentCustomerEditorUrl");
      }
      // verify the required parameter 'email_customer_uuid' is set
      if (email_customer_uuid === undefined || email_customer_uuid === null) {
        throw new Error("Missing the required parameter 'email_customer_uuid' when calling getEmailSegmentCustomerEditorUrl");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_segment_uuid': email_segment_uuid,
        'email_customer_uuid': email_customer_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailCustomerEditorUrlResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers/{email_customer_uuid}/editor_url', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailSegmentCustomers operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailSegmentCustomersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSegmentCustomersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email segment customers
     * @param {Number} storefront_oid 
     * @param {String} email_segment_uuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageNumber 
     * @param {Number} opts.pageSize 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailSegmentCustomersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSegmentCustomersResponse}
     */
    getEmailSegmentCustomers(storefront_oid, email_segment_uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailSegmentCustomers");
      }
      // verify the required parameter 'email_segment_uuid' is set
      if (email_segment_uuid === undefined || email_segment_uuid === null) {
        throw new Error("Missing the required parameter 'email_segment_uuid' when calling getEmailSegmentCustomers");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_segment_uuid': email_segment_uuid
      };
      let queryParams = {
        'pageNumber': opts['pageNumber'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailSegmentCustomersResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/customers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailSegments operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailSegmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSegmentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email segments
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailSegmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSegmentsResponse}
     */
    getEmailSegments(storefront_oid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailSegments");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailSegmentsResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailSendingDomain operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailSendingDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSendingDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email sending domain
     * @param {String} domain 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailSendingDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSendingDomainResponse}
     */
    getEmailSendingDomain(domain, callback) {
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling getEmailSendingDomain");
      }

      let pathParams = {
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailSendingDomainResponse;
      return this.apiClient.callApi(
        '/storefront/email/sending_domain/{domain}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailSendingDomainStatus operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailSendingDomainStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSendingDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email sending domain status
     * @param {String} domain 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailSendingDomainStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSendingDomainResponse}
     */
    getEmailSendingDomainStatus(domain, callback) {
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling getEmailSendingDomainStatus");
      }

      let pathParams = {
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailSendingDomainResponse;
      return this.apiClient.callApi(
        '/storefront/email/sending_domains/{domain}/status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailSendingDomains operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailSendingDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSendingDomainsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email sending domains
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailSendingDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSendingDomainsResponse}
     */
    getEmailSendingDomains(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailSendingDomainsResponse;
      return this.apiClient.callApi(
        '/storefront/email/sending_domains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailSettings operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email settings
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSettingsResponse}
     */
    getEmailSettings(storefront_oid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailSettings");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailSettingsResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailTemplate operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email template
     * @param {Number} storefront_oid 
     * @param {Number} email_template_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailTemplate}
     */
    getEmailTemplate(storefront_oid, email_template_oid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailTemplate");
      }
      // verify the required parameter 'email_template_oid' is set
      if (email_template_oid === undefined || email_template_oid === null) {
        throw new Error("Missing the required parameter 'email_template_oid' when calling getEmailTemplate");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_template_oid': email_template_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailTemplate;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/templates/{email_template_oid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailTemplates operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailTemplatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get email templates
     * @param {Number} storefront_oid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.trigger_type 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailTemplatesResponse}
     */
    getEmailTemplates(storefront_oid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailTemplates");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
        'trigger_type': opts['trigger_type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailTemplatesResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailThirdPartyProviders operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getEmailThirdPartyProvidersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailThirdPartyProvidersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of third party email providers
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getEmailThirdPartyProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailThirdPartyProvidersResponse}
     */
    getEmailThirdPartyProviders(storefront_oid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getEmailThirdPartyProviders");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailThirdPartyProvidersResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/third_party_providers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExperiments operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getExperimentsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ExperimentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get experiments
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getExperimentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ExperimentsResponse}
     */
    getExperiments(storefront_oid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getExperiments");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExperimentsResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/experiments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFsDirectory operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getFsDirectoryCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/FileManagerPageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get file manager directory
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.path 
     * @param {Number} opts.storefront_fs_directory_oid 
     * @param {Number} opts.storefront_theme_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getFsDirectoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/FileManagerPageResponse}
     */
    getFsDirectory(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFsDirectory");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'path': opts['path'],
        'storefront_fs_directory_oid': opts['storefront_fs_directory_oid'],
        'storefront_theme_oid': opts['storefront_theme_oid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileManagerPageResponse;
      return this.apiClient.callApi(
        '/storefront/{id}/fs/dir', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHeatmap operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getHeatmapCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ScreenRecordingHeatmapResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get screen recording heatmap
     * Get screen recording heatmap 
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/ScreenRecordingHeatmapRequest} query Query
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getHeatmapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ScreenRecordingHeatmapResponse}
     */
    getHeatmap(storefront_oid, query, callback) {
      let postBody = query;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getHeatmap");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling getHeatmap");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScreenRecordingHeatmapResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/screen_recordings/heatmap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHeatmapIndex operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getHeatmapIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ScreenRecordingHeatmapIndexResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get screen recording heatmap index
     * Get screen recording heatmap index 
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/ScreenRecordingHeatmapIndexRequest} query Query
     * @param {Object} opts Optional parameters
     * @param {Number} opts._limit The maximum number of records to return on this one API call. (Default 100, Max 500) (default to 100)
     * @param {Number} opts._offset Pagination of the record set.  Offset is a zero based index. (default to 0)
     * @param {String} opts._sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getHeatmapIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ScreenRecordingHeatmapIndexResponse}
     */
    getHeatmapIndex(storefront_oid, query, opts, callback) {
      opts = opts || {};
      let postBody = query;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getHeatmapIndex");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling getHeatmapIndex");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
        '_limit': opts['_limit'],
        '_offset': opts['_offset'],
        '_sort': opts['_sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScreenRecordingHeatmapIndexResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/screen_recordings/heatmap/index', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHistogramPropertyNames operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getHistogramPropertyNamesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailHistogramPropertyNamesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get histogram property names
     * Obtain a list of property names for a given property type 
     * @param {Number} storefront_oid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.property_type 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getHistogramPropertyNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailHistogramPropertyNamesResponse}
     */
    getHistogramPropertyNames(storefront_oid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getHistogramPropertyNames");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
        'property_type': opts['property_type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailHistogramPropertyNamesResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/histogram/property_names', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHistogramPropertyValues operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getHistogramPropertyValuesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailHistogramPropertyValuesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get histogram property values
     * Obtain a list of property values for a given property name and type 
     * @param {Number} storefront_oid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.property_name 
     * @param {String} opts.property_type 
     * @param {Number} opts.limit 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getHistogramPropertyValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailHistogramPropertyValuesResponse}
     */
    getHistogramPropertyValues(storefront_oid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getHistogramPropertyValues");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
        'property_name': opts['property_name'],
        'property_type': opts['property_type'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailHistogramPropertyValuesResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/histogram/property_values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLibraryFilterValues operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getLibraryFilterValuesCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/LibraryFilterValuesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get library values used to populate drop down boxes for filtering.
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getLibraryFilterValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/LibraryFilterValuesResponse}
     */
    getLibraryFilterValues(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LibraryFilterValuesResponse;
      return this.apiClient.callApi(
        '/storefront/code_library/filter_values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLibraryItem operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getLibraryItemCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/LibraryItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get library item.
     * @param {Number} library_item_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getLibraryItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/LibraryItemResponse}
     */
    getLibraryItem(library_item_oid, callback) {
      let postBody = null;
      // verify the required parameter 'library_item_oid' is set
      if (library_item_oid === undefined || library_item_oid === null) {
        throw new Error("Missing the required parameter 'library_item_oid' when calling getLibraryItem");
      }

      let pathParams = {
        'library_item_oid': library_item_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LibraryItemResponse;
      return this.apiClient.callApi(
        '/storefront/code_library/{library_item_oid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLibraryItemPublishedVersions operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getLibraryItemPublishedVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/LibraryItemsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all published versions for a library item.
     * @param {Number} library_item_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getLibraryItemPublishedVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/LibraryItemsResponse}
     */
    getLibraryItemPublishedVersions(library_item_oid, callback) {
      let postBody = null;
      // verify the required parameter 'library_item_oid' is set
      if (library_item_oid === undefined || library_item_oid === null) {
        throw new Error("Missing the required parameter 'library_item_oid' when calling getLibraryItemPublishedVersions");
      }

      let pathParams = {
        'library_item_oid': library_item_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LibraryItemsResponse;
      return this.apiClient.callApi(
        '/storefront/code_library/{library_item_oid}/published_versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScreenRecording operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getScreenRecordingCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ScreenRecordingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get screen recording
     * Get screen recording 
     * @param {Number} storefront_oid 
     * @param {String} screen_recording_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getScreenRecordingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ScreenRecordingResponse}
     */
    getScreenRecording(storefront_oid, screen_recording_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getScreenRecording");
      }
      // verify the required parameter 'screen_recording_uuid' is set
      if (screen_recording_uuid === undefined || screen_recording_uuid === null) {
        throw new Error("Missing the required parameter 'screen_recording_uuid' when calling getScreenRecording");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'screen_recording_uuid': screen_recording_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScreenRecordingResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScreenRecordingPageViewData operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getScreenRecordingPageViewDataCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ScreenRecordingPageViewDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get screen recording page view data
     * Get screen recording page view data 
     * @param {Number} storefront_oid 
     * @param {String} screen_recording_uuid 
     * @param {String} screen_recording_page_view_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getScreenRecordingPageViewDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ScreenRecordingPageViewDataResponse}
     */
    getScreenRecordingPageViewData(storefront_oid, screen_recording_uuid, screen_recording_page_view_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getScreenRecordingPageViewData");
      }
      // verify the required parameter 'screen_recording_uuid' is set
      if (screen_recording_uuid === undefined || screen_recording_uuid === null) {
        throw new Error("Missing the required parameter 'screen_recording_uuid' when calling getScreenRecordingPageViewData");
      }
      // verify the required parameter 'screen_recording_page_view_uuid' is set
      if (screen_recording_page_view_uuid === undefined || screen_recording_page_view_uuid === null) {
        throw new Error("Missing the required parameter 'screen_recording_page_view_uuid' when calling getScreenRecordingPageViewData");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'screen_recording_uuid': screen_recording_uuid,
        'screen_recording_page_view_uuid': screen_recording_page_view_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScreenRecordingPageViewDataResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/page_view_data/{screen_recording_page_view_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScreenRecordingSegment operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getScreenRecordingSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ScreenRecordingSegmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get screen recording segment
     * @param {Number} storefront_oid 
     * @param {Number} screen_recording_segment_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getScreenRecordingSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ScreenRecordingSegmentResponse}
     */
    getScreenRecordingSegment(storefront_oid, screen_recording_segment_oid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getScreenRecordingSegment");
      }
      // verify the required parameter 'screen_recording_segment_oid' is set
      if (screen_recording_segment_oid === undefined || screen_recording_segment_oid === null) {
        throw new Error("Missing the required parameter 'screen_recording_segment_oid' when calling getScreenRecordingSegment");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'screen_recording_segment_oid': screen_recording_segment_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScreenRecordingSegmentResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScreenRecordingSegments operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getScreenRecordingSegmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ScreenRecordingSegmentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get screen recording segments
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getScreenRecordingSegmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ScreenRecordingSegmentsResponse}
     */
    getScreenRecordingSegments(storefront_oid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getScreenRecordingSegments");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScreenRecordingSegmentsResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/screen_recordings/segments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScreenRecordingSettings operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getScreenRecordingSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ScreenRecordingSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get screen recording settings
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getScreenRecordingSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ScreenRecordingSettingsResponse}
     */
    getScreenRecordingSettings(storefront_oid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getScreenRecordingSettings");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScreenRecordingSettingsResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/screen_recordings/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScreenRecordingTags operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getScreenRecordingTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ScreenRecordingTagsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tags used by screen recording
     * Get tags used by screen recording 
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getScreenRecordingTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ScreenRecordingTagsResponse}
     */
    getScreenRecordingTags(storefront_oid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getScreenRecordingTags");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScreenRecordingTagsResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/screen_recordings/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScreenRecordingsByQuery operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getScreenRecordingsByQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ScreenRecordingQueryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query screen recordings
     * Query screen recordings 
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/ScreenRecordingQueryRequest} query Query
     * @param {Object} opts Optional parameters
     * @param {Number} opts._limit The maximum number of records to return on this one API call. (Default 100, Max 500) (default to 100)
     * @param {Number} opts._offset Pagination of the record set.  Offset is a zero based index. (default to 0)
     * @param {String} opts._sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getScreenRecordingsByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ScreenRecordingQueryResponse}
     */
    getScreenRecordingsByQuery(storefront_oid, query, opts, callback) {
      opts = opts || {};
      let postBody = query;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getScreenRecordingsByQuery");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling getScreenRecordingsByQuery");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
        '_limit': opts['_limit'],
        '_offset': opts['_offset'],
        '_sort': opts['_sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScreenRecordingQueryResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/screen_recordings/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getScreenRecordingsBySegment operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getScreenRecordingsBySegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ScreenRecordingQueryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get screen recordings by segment
     * Get screen recordings by segment 
     * @param {Number} storefront_oid 
     * @param {Number} screen_recording_segment_oid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts._limit The maximum number of records to return on this one API call. (Default 100, Max 500) (default to 100)
     * @param {Number} opts._offset Pagination of the record set.  Offset is a zero based index. (default to 0)
     * @param {String} opts._sort The sort order of the items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getScreenRecordingsBySegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ScreenRecordingQueryResponse}
     */
    getScreenRecordingsBySegment(storefront_oid, screen_recording_segment_oid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getScreenRecordingsBySegment");
      }
      // verify the required parameter 'screen_recording_segment_oid' is set
      if (screen_recording_segment_oid === undefined || screen_recording_segment_oid === null) {
        throw new Error("Missing the required parameter 'screen_recording_segment_oid' when calling getScreenRecordingsBySegment");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'screen_recording_segment_oid': screen_recording_segment_oid
      };
      let queryParams = {
        '_limit': opts['_limit'],
        '_offset': opts['_offset'],
        '_sort': opts['_sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScreenRecordingQueryResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreFrontPricingTiers operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getStoreFrontPricingTiersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/PricingTiersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve pricing tiers
     * Retrieves the pricing tiers 
     * @param {Object} opts Optional parameters
     * @param {String} opts._expand The object expansion to perform on the result.  See documentation for examples
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getStoreFrontPricingTiersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/PricingTiersResponse}
     */
    getStoreFrontPricingTiers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '_expand': opts['_expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PricingTiersResponse;
      return this.apiClient.callApi(
        '/storefront/pricing_tiers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoreFronts operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getStoreFrontsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/StoreFrontsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get storefronts (internal use only for security reasons)
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getStoreFrontsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/StoreFrontsResponse}
     */
    getStoreFronts(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StoreFrontsResponse;
      return this.apiClient.callApi(
        '/storefront', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getThumbnailParameters operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getThumbnailParametersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ThumbnailParametersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get thumbnail parameters
     * @param {module:com.ultracart.admin.v2.models/ThumbnailParametersRequest} thumbnail_parameters Thumbnail Parameters
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getThumbnailParametersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ThumbnailParametersResponse}
     */
    getThumbnailParameters(thumbnail_parameters, callback) {
      let postBody = thumbnail_parameters;
      // verify the required parameter 'thumbnail_parameters' is set
      if (thumbnail_parameters === undefined || thumbnail_parameters === null) {
        throw new Error("Missing the required parameter 'thumbnail_parameters' when calling getThumbnailParameters");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ThumbnailParametersResponse;
      return this.apiClient.callApi(
        '/storefront/thumbnailParameters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionEmail operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getTransactionEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/TransactionEmailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a transaction email object
     * Fetch a transactional email 
     * @param {Number} storefront_oid 
     * @param {String} email_id 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getTransactionEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/TransactionEmailResponse}
     */
    getTransactionEmail(storefront_oid, email_id, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getTransactionEmail");
      }
      // verify the required parameter 'email_id' is set
      if (email_id === undefined || email_id === null) {
        throw new Error("Missing the required parameter 'email_id' when calling getTransactionEmail");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_id': email_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionEmailResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/transaction_email/list/{email_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionEmailList operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getTransactionEmailListCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/TransactionEmailListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of transaction email names
     * Obtain a list of all transactional emails and return back just their names 
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getTransactionEmailListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/TransactionEmailListResponse}
     */
    getTransactionEmailList(storefront_oid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getTransactionEmailList");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionEmailListResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/transaction_email/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionEmailScreenshots operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getTransactionEmailScreenshotsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ScreenshotsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get transactional email screenshots
     * @param {Number} storefront_oid 
     * @param {String} email_id 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getTransactionEmailScreenshotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ScreenshotsResponse}
     */
    getTransactionEmailScreenshots(storefront_oid, email_id, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling getTransactionEmailScreenshots");
      }
      // verify the required parameter 'email_id' is set
      if (email_id === undefined || email_id === null) {
        throw new Error("Missing the required parameter 'email_id' when calling getTransactionEmailScreenshots");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_id': email_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScreenshotsResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/transaction_email/list/{email_id}/screenshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTwilioAccount operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getTwilioAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/TwilioResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Twilio account
     * @param {String} esp_twilio_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getTwilioAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/TwilioResponse}
     */
    getTwilioAccount(esp_twilio_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'esp_twilio_uuid' is set
      if (esp_twilio_uuid === undefined || esp_twilio_uuid === null) {
        throw new Error("Missing the required parameter 'esp_twilio_uuid' when calling getTwilioAccount");
      }

      let pathParams = {
        'esp_twilio_uuid': esp_twilio_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TwilioResponse;
      return this.apiClient.callApi(
        '/storefront/twilio/accounts/{esp_twilio_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTwilioAccounts operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getTwilioAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/TwiliosResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Twilio accounts
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getTwilioAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/TwiliosResponse}
     */
    getTwilioAccounts(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TwiliosResponse;
      return this.apiClient.callApi(
        '/storefront/twilio/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUploadFsFileUrl operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~getUploadFsFileUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/FileManagerUploadUrlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a S3 url where a file may be uploaded. Once uploaded, use uploadFsFile to trigger the server into reading the S3 bucket and retrieving the file.
     * @param {Number} id 
     * @param {String} extension 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~getUploadFsFileUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/FileManagerUploadUrlResponse}
     */
    getUploadFsFileUrl(id, extension, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUploadFsFileUrl");
      }
      // verify the required parameter 'extension' is set
      if (extension === undefined || extension === null) {
        throw new Error("Missing the required parameter 'extension' when calling getUploadFsFileUrl");
      }

      let pathParams = {
        'id': id,
        'extension': extension
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileManagerUploadUrlResponse;
      return this.apiClient.callApi(
        '/storefront/{id}/fs/upload_url/{extension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalUnsubscribe operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~globalUnsubscribeCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailGlobalUnsubscribeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Globally unsubscribe a customer
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailGlobalUnsubscribeRequest} unsubscribe Unsubscribe
     * @param {module:com.ultracart.admin.v2/StorefrontApi~globalUnsubscribeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailGlobalUnsubscribeResponse}
     */
    globalUnsubscribe(storefront_oid, unsubscribe, callback) {
      let postBody = unsubscribe;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling globalUnsubscribe");
      }
      // verify the required parameter 'unsubscribe' is set
      if (unsubscribe === undefined || unsubscribe === null) {
        throw new Error("Missing the required parameter 'unsubscribe' when calling globalUnsubscribe");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailGlobalUnsubscribeResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/globalUnsubscribe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importEmailThirdPartyProviderList operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~importEmailThirdPartyProviderListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import a third party provider list
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailThirdPartyListImportRequest} import_request lists to import
     * @param {module:com.ultracart.admin.v2/StorefrontApi~importEmailThirdPartyProviderListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    importEmailThirdPartyProviderList(storefront_oid, import_request, callback) {
      let postBody = import_request;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling importEmailThirdPartyProviderList");
      }
      // verify the required parameter 'import_request' is set
      if (import_request === undefined || import_request === null) {
        throw new Error("Missing the required parameter 'import_request' when calling importEmailThirdPartyProviderList");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/third_party_providers/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertEmailCampaign operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~insertEmailCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert email campaign
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailCampaign} email_campaign Email campaign
     * @param {module:com.ultracart.admin.v2/StorefrontApi~insertEmailCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCampaignResponse}
     */
    insertEmailCampaign(storefront_oid, email_campaign, callback) {
      let postBody = email_campaign;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling insertEmailCampaign");
      }
      // verify the required parameter 'email_campaign' is set
      if (email_campaign === undefined || email_campaign === null) {
        throw new Error("Missing the required parameter 'email_campaign' when calling insertEmailCampaign");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailCampaignResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaigns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertEmailCampaignFolder operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~insertEmailCampaignFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCampaignFolderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert email campaign folder
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailCampaignFolder} email_campaign_folder Email campaign folder
     * @param {module:com.ultracart.admin.v2/StorefrontApi~insertEmailCampaignFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCampaignFolderResponse}
     */
    insertEmailCampaignFolder(storefront_oid, email_campaign_folder, callback) {
      let postBody = email_campaign_folder;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling insertEmailCampaignFolder");
      }
      // verify the required parameter 'email_campaign_folder' is set
      if (email_campaign_folder === undefined || email_campaign_folder === null) {
        throw new Error("Missing the required parameter 'email_campaign_folder' when calling insertEmailCampaignFolder");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailCampaignFolderResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaign_folders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertEmailCommseq operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~insertEmailCommseqCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert email commseq
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailCommseq} email_commseq Email commseq
     * @param {module:com.ultracart.admin.v2/StorefrontApi~insertEmailCommseqCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqResponse}
     */
    insertEmailCommseq(storefront_oid, email_commseq, callback) {
      let postBody = email_commseq;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling insertEmailCommseq");
      }
      // verify the required parameter 'email_commseq' is set
      if (email_commseq === undefined || email_commseq === null) {
        throw new Error("Missing the required parameter 'email_commseq' when calling insertEmailCommseq");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailCommseqResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertEmailEmail operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~insertEmailEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert email email
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmail} email_commseq_email Email email
     * @param {module:com.ultracart.admin.v2/StorefrontApi~insertEmailEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqEmailResponse}
     */
    insertEmailEmail(storefront_oid, email_commseq_email, callback) {
      let postBody = email_commseq_email;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling insertEmailEmail");
      }
      // verify the required parameter 'email_commseq_email' is set
      if (email_commseq_email === undefined || email_commseq_email === null) {
        throw new Error("Missing the required parameter 'email_commseq_email' when calling insertEmailEmail");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailCommseqEmailResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/emails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertEmailFlow operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~insertEmailFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert email flow
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailFlow} email_flow Email flow
     * @param {module:com.ultracart.admin.v2/StorefrontApi~insertEmailFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailFlowResponse}
     */
    insertEmailFlow(storefront_oid, email_flow, callback) {
      let postBody = email_flow;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling insertEmailFlow");
      }
      // verify the required parameter 'email_flow' is set
      if (email_flow === undefined || email_flow === null) {
        throw new Error("Missing the required parameter 'email_flow' when calling insertEmailFlow");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailFlowResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/flows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertEmailFlowFolder operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~insertEmailFlowFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailFlowFolderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert email flow folder
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailFlowFolder} email_flow_folder Email flow folder
     * @param {module:com.ultracart.admin.v2/StorefrontApi~insertEmailFlowFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailFlowFolderResponse}
     */
    insertEmailFlowFolder(storefront_oid, email_flow_folder, callback) {
      let postBody = email_flow_folder;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling insertEmailFlowFolder");
      }
      // verify the required parameter 'email_flow_folder' is set
      if (email_flow_folder === undefined || email_flow_folder === null) {
        throw new Error("Missing the required parameter 'email_flow_folder' when calling insertEmailFlowFolder");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailFlowFolderResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/flow_folders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertEmailList operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~insertEmailListCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert email list
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailList} email_list Email list
     * @param {module:com.ultracart.admin.v2/StorefrontApi~insertEmailListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListResponse}
     */
    insertEmailList(storefront_oid, email_list, callback) {
      let postBody = email_list;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling insertEmailList");
      }
      // verify the required parameter 'email_list' is set
      if (email_list === undefined || email_list === null) {
        throw new Error("Missing the required parameter 'email_list' when calling insertEmailList");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailListResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertEmailListSegmentFolder operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~insertEmailListSegmentFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListSegmentFolderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert email campaign folder
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailListSegmentFolder} email_list_segment_folder Email campaign folder
     * @param {module:com.ultracart.admin.v2/StorefrontApi~insertEmailListSegmentFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListSegmentFolderResponse}
     */
    insertEmailListSegmentFolder(storefront_oid, email_list_segment_folder, callback) {
      let postBody = email_list_segment_folder;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling insertEmailListSegmentFolder");
      }
      // verify the required parameter 'email_list_segment_folder' is set
      if (email_list_segment_folder === undefined || email_list_segment_folder === null) {
        throw new Error("Missing the required parameter 'email_list_segment_folder' when calling insertEmailListSegmentFolder");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailListSegmentFolderResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/list_segment_folders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertEmailPostcard operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~insertEmailPostcardCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqPostcardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert email postcard
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqPostcard} email_commseq_postcard Email postcard
     * @param {module:com.ultracart.admin.v2/StorefrontApi~insertEmailPostcardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqPostcardResponse}
     */
    insertEmailPostcard(storefront_oid, email_commseq_postcard, callback) {
      let postBody = email_commseq_postcard;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling insertEmailPostcard");
      }
      // verify the required parameter 'email_commseq_postcard' is set
      if (email_commseq_postcard === undefined || email_commseq_postcard === null) {
        throw new Error("Missing the required parameter 'email_commseq_postcard' when calling insertEmailPostcard");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailCommseqPostcardResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/postcards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertEmailSegment operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~insertEmailSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSegmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert email segment
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailSegment} email_segment Email segment
     * @param {module:com.ultracart.admin.v2/StorefrontApi~insertEmailSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSegmentResponse}
     */
    insertEmailSegment(storefront_oid, email_segment, callback) {
      let postBody = email_segment;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling insertEmailSegment");
      }
      // verify the required parameter 'email_segment' is set
      if (email_segment === undefined || email_segment === null) {
        throw new Error("Missing the required parameter 'email_segment' when calling insertEmailSegment");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailSegmentResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertScreenRecordingSegment operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~insertScreenRecordingSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ScreenRecordingSegmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert screen recording segment
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/ScreenRecordingSegment} segment Segment
     * @param {module:com.ultracart.admin.v2/StorefrontApi~insertScreenRecordingSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ScreenRecordingSegmentResponse}
     */
    insertScreenRecordingSegment(storefront_oid, segment, callback) {
      let postBody = segment;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling insertScreenRecordingSegment");
      }
      // verify the required parameter 'segment' is set
      if (segment === undefined || segment === null) {
        throw new Error("Missing the required parameter 'segment' when calling insertScreenRecordingSegment");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScreenRecordingSegmentResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/screen_recordings/segments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the prepareDownloadEmailSegment operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~prepareDownloadEmailSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSegmentDownloadPrepareResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prepare download of email segment
     * @param {Number} storefront_oid 
     * @param {String} email_segment_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~prepareDownloadEmailSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSegmentDownloadPrepareResponse}
     */
    prepareDownloadEmailSegment(storefront_oid, email_segment_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling prepareDownloadEmailSegment");
      }
      // verify the required parameter 'email_segment_uuid' is set
      if (email_segment_uuid === undefined || email_segment_uuid === null) {
        throw new Error("Missing the required parameter 'email_segment_uuid' when calling prepareDownloadEmailSegment");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_segment_uuid': email_segment_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailSegmentDownloadPrepareResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/downloadPrepare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publishLibraryItem operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~publishLibraryItemCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/LibraryItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publish library item.
     * @param {Number} library_item_oid 
     * @param {module:com.ultracart.admin.v2.models/PublishLibraryItemRequest} publish_library_request Publish library item request
     * @param {module:com.ultracart.admin.v2/StorefrontApi~publishLibraryItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/LibraryItemResponse}
     */
    publishLibraryItem(library_item_oid, publish_library_request, callback) {
      let postBody = publish_library_request;
      // verify the required parameter 'library_item_oid' is set
      if (library_item_oid === undefined || library_item_oid === null) {
        throw new Error("Missing the required parameter 'library_item_oid' when calling publishLibraryItem");
      }
      // verify the required parameter 'publish_library_request' is set
      if (publish_library_request === undefined || publish_library_request === null) {
        throw new Error("Missing the required parameter 'publish_library_request' when calling publishLibraryItem");
      }

      let pathParams = {
        'library_item_oid': library_item_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LibraryItemResponse;
      return this.apiClient.callApi(
        '/storefront/code_library/{library_item_oid}/publish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the purchaseLibraryItem operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~purchaseLibraryItemCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/LibraryItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Purchase public library item, which creates a copy of the item in your personal code library
     * @param {Number} library_item_oid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.storefront_oid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~purchaseLibraryItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/LibraryItemResponse}
     */
    purchaseLibraryItem(library_item_oid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'library_item_oid' is set
      if (library_item_oid === undefined || library_item_oid === null) {
        throw new Error("Missing the required parameter 'library_item_oid' when calling purchaseLibraryItem");
      }

      let pathParams = {
        'library_item_oid': library_item_oid
      };
      let queryParams = {
        'storefront_oid': opts['storefront_oid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LibraryItemResponse;
      return this.apiClient.callApi(
        '/storefront/code_library/{library_item_oid}/purchase', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the releaseEmailCommseqStepWaiting operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~releaseEmailCommseqStepWaitingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Release email communication sequence customers waiting at the specified step
     * @param {Number} storefront_oid 
     * @param {String} commseq_uuid 
     * @param {String} commseq_step_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~releaseEmailCommseqStepWaitingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    releaseEmailCommseqStepWaiting(storefront_oid, commseq_uuid, commseq_step_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling releaseEmailCommseqStepWaiting");
      }
      // verify the required parameter 'commseq_uuid' is set
      if (commseq_uuid === undefined || commseq_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_uuid' when calling releaseEmailCommseqStepWaiting");
      }
      // verify the required parameter 'commseq_step_uuid' is set
      if (commseq_step_uuid === undefined || commseq_step_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_step_uuid' when calling releaseEmailCommseqStepWaiting");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_uuid': commseq_uuid,
        'commseq_step_uuid': commseq_step_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/waiting/{commseq_step_uuid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the review operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~reviewCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmailSendTestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request a review of an email
     * @param {Number} storefront_oid 
     * @param {String} commseq_email_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmailSendTestRequest} email_commseq_email_review_request Email commseq email review request
     * @param {module:com.ultracart.admin.v2/StorefrontApi~reviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqEmailSendTestResponse}
     */
    review(storefront_oid, commseq_email_uuid, email_commseq_email_review_request, callback) {
      let postBody = email_commseq_email_review_request;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling review");
      }
      // verify the required parameter 'commseq_email_uuid' is set
      if (commseq_email_uuid === undefined || commseq_email_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_email_uuid' when calling review");
      }
      // verify the required parameter 'email_commseq_email_review_request' is set
      if (email_commseq_email_review_request === undefined || email_commseq_email_review_request === null) {
        throw new Error("Missing the required parameter 'email_commseq_email_review_request' when calling review");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_email_uuid': commseq_email_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailCommseqEmailSendTestResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/review', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the search operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~searchCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/LookupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for all matching values
     * @param {Object} opts Optional parameters
     * @param {String} opts.category 
     * @param {String} opts.matches 
     * @param {String} opts.storefront_oid 
     * @param {Number} opts.max_hits 
     * @param {String} opts.subcategory 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~searchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/LookupResponse}
     */
    search(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'category': opts['category'],
        'matches': opts['matches'],
        'storefront_oid': opts['storefront_oid'],
        'max_hits': opts['max_hits'],
        'subcategory': opts['subcategory']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LookupResponse;
      return this.apiClient.callApi(
        '/storefront/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the search2 operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~search2Callback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/LookupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for all matching values (using POST)
     * @param {module:com.ultracart.admin.v2.models/LookupRequest} lookup_request LookupRequest
     * @param {module:com.ultracart.admin.v2/StorefrontApi~search2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/LookupResponse}
     */
    search2(lookup_request, callback) {
      let postBody = lookup_request;
      // verify the required parameter 'lookup_request' is set
      if (lookup_request === undefined || lookup_request === null) {
        throw new Error("Missing the required parameter 'lookup_request' when calling search2");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LookupResponse;
      return this.apiClient.callApi(
        '/storefront/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchEmailListCustomers operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~searchEmailListCustomersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListCustomersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search email list customers
     * @param {Number} storefront_oid 
     * @param {String} email_list_uuid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startsWith 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~searchEmailListCustomersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListCustomersResponse}
     */
    searchEmailListCustomers(storefront_oid, email_list_uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling searchEmailListCustomers");
      }
      // verify the required parameter 'email_list_uuid' is set
      if (email_list_uuid === undefined || email_list_uuid === null) {
        throw new Error("Missing the required parameter 'email_list_uuid' when calling searchEmailListCustomers");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_list_uuid': email_list_uuid
      };
      let queryParams = {
        'startsWith': opts['startsWith']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailListCustomersResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchEmailSegmentCustomers operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~searchEmailSegmentCustomersCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSegmentCustomersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search email segment customers
     * @param {Number} storefront_oid 
     * @param {String} email_segment_uuid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startsWith 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~searchEmailSegmentCustomersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSegmentCustomersResponse}
     */
    searchEmailSegmentCustomers(storefront_oid, email_segment_uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling searchEmailSegmentCustomers");
      }
      // verify the required parameter 'email_segment_uuid' is set
      if (email_segment_uuid === undefined || email_segment_uuid === null) {
        throw new Error("Missing the required parameter 'email_segment_uuid' when calling searchEmailSegmentCustomers");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_segment_uuid': email_segment_uuid
      };
      let queryParams = {
        'startsWith': opts['startsWith']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmailSegmentCustomersResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchLibraryItems operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~searchLibraryItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/LibraryItemsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve library items
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param {module:com.ultracart.admin.v2.models/LibraryItemQuery} item_query Item query
     * @param {Object} opts Optional parameters
     * @param {Number} opts._limit The maximum number of records to return on this one API call. (Maximum 10000) (default to 10000)
     * @param {Number} opts._offset Pagination of the record set.  Offset is a zero based index. (default to 0)
     * @param {String} opts._sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {module:com.ultracart.admin.v2/StorefrontApi~searchLibraryItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/LibraryItemsResponse}
     */
    searchLibraryItems(item_query, opts, callback) {
      opts = opts || {};
      let postBody = item_query;
      // verify the required parameter 'item_query' is set
      if (item_query === undefined || item_query === null) {
        throw new Error("Missing the required parameter 'item_query' when calling searchLibraryItems");
      }

      let pathParams = {
      };
      let queryParams = {
        '_limit': opts['_limit'],
        '_offset': opts['_offset'],
        '_sort': opts['_sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LibraryItemsResponse;
      return this.apiClient.callApi(
        '/storefront/code_library/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchPublishedItems operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~searchPublishedItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/LibraryItemsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve library items
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param {module:com.ultracart.admin.v2.models/LibraryItemQuery} item_query Item query
     * @param {Object} opts Optional parameters
     * @param {Number} opts._limit The maximum number of records to return on this one API call. (Maximum 10000) (default to 10000)
     * @param {Number} opts._offset Pagination of the record set.  Offset is a zero based index. (default to 0)
     * @param {String} opts._sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {module:com.ultracart.admin.v2/StorefrontApi~searchPublishedItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/LibraryItemsResponse}
     */
    searchPublishedItems(item_query, opts, callback) {
      opts = opts || {};
      let postBody = item_query;
      // verify the required parameter 'item_query' is set
      if (item_query === undefined || item_query === null) {
        throw new Error("Missing the required parameter 'item_query' when calling searchPublishedItems");
      }

      let pathParams = {
      };
      let queryParams = {
        '_limit': opts['_limit'],
        '_offset': opts['_offset'],
        '_sort': opts['_sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LibraryItemsResponse;
      return this.apiClient.callApi(
        '/storefront/code_library/search_published', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchReviewItems operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~searchReviewItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/LibraryItemsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve library items needing review or rejected
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param {module:com.ultracart.admin.v2.models/LibraryItemQuery} item_query Item query
     * @param {Object} opts Optional parameters
     * @param {Number} opts._limit The maximum number of records to return on this one API call. (Maximum 10000) (default to 10000)
     * @param {Number} opts._offset Pagination of the record set.  Offset is a zero based index. (default to 0)
     * @param {String} opts._sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {module:com.ultracart.admin.v2/StorefrontApi~searchReviewItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/LibraryItemsResponse}
     */
    searchReviewItems(item_query, opts, callback) {
      opts = opts || {};
      let postBody = item_query;
      // verify the required parameter 'item_query' is set
      if (item_query === undefined || item_query === null) {
        throw new Error("Missing the required parameter 'item_query' when calling searchReviewItems");
      }

      let pathParams = {
      };
      let queryParams = {
        '_limit': opts['_limit'],
        '_offset': opts['_offset'],
        '_sort': opts['_sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LibraryItemsResponse;
      return this.apiClient.callApi(
        '/storefront/code_library/search_review', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchSharedItems operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~searchSharedItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/LibraryItemsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve library items
     * Retrieves a library items based on a query object.  If no parameters are specified, the API call will default to the merchant id only.  You will need to make multiple API calls in order to retrieve the entire result set since this API performs result set pagination. 
     * @param {module:com.ultracart.admin.v2.models/LibraryItemQuery} item_query Item query
     * @param {Object} opts Optional parameters
     * @param {Number} opts._limit The maximum number of records to return on this one API call. (Maximum 10000) (default to 10000)
     * @param {Number} opts._offset Pagination of the record set.  Offset is a zero based index. (default to 0)
     * @param {String} opts._sort The sort order of the library items.  See Sorting documentation for examples of using multiple values and sorting by ascending and descending.
     * @param {module:com.ultracart.admin.v2/StorefrontApi~searchSharedItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/LibraryItemsResponse}
     */
    searchSharedItems(item_query, opts, callback) {
      opts = opts || {};
      let postBody = item_query;
      // verify the required parameter 'item_query' is set
      if (item_query === undefined || item_query === null) {
        throw new Error("Missing the required parameter 'item_query' when calling searchSharedItems");
      }

      let pathParams = {
      };
      let queryParams = {
        '_limit': opts['_limit'],
        '_offset': opts['_offset'],
        '_sort': opts['_sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LibraryItemsResponse;
      return this.apiClient.callApi(
        '/storefront/code_library/search_shared', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendEmailTest operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~sendEmailTestCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmailSendTestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send email test
     * @param {Number} storefront_oid 
     * @param {String} commseq_email_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmailSendTestRequest} email_commseq_email_test_request Email commseq email test request
     * @param {module:com.ultracart.admin.v2/StorefrontApi~sendEmailTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqEmailSendTestResponse}
     */
    sendEmailTest(storefront_oid, commseq_email_uuid, email_commseq_email_test_request, callback) {
      let postBody = email_commseq_email_test_request;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling sendEmailTest");
      }
      // verify the required parameter 'commseq_email_uuid' is set
      if (commseq_email_uuid === undefined || commseq_email_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_email_uuid' when calling sendEmailTest");
      }
      // verify the required parameter 'email_commseq_email_test_request' is set
      if (email_commseq_email_test_request === undefined || email_commseq_email_test_request === null) {
        throw new Error("Missing the required parameter 'email_commseq_email_test_request' when calling sendEmailTest");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_email_uuid': commseq_email_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailCommseqEmailSendTestResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}/test', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendPostcardTest operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~sendPostcardTestCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqPostcardSendTestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send postcard test
     * @param {Number} storefront_oid 
     * @param {String} commseq_postcard_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqPostcardSendTestRequest} email_commseq_postcard_test_request Email commseq email test request
     * @param {module:com.ultracart.admin.v2/StorefrontApi~sendPostcardTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqPostcardSendTestResponse}
     */
    sendPostcardTest(storefront_oid, commseq_postcard_uuid, email_commseq_postcard_test_request, callback) {
      let postBody = email_commseq_postcard_test_request;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling sendPostcardTest");
      }
      // verify the required parameter 'commseq_postcard_uuid' is set
      if (commseq_postcard_uuid === undefined || commseq_postcard_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_postcard_uuid' when calling sendPostcardTest");
      }
      // verify the required parameter 'email_commseq_postcard_test_request' is set
      if (email_commseq_postcard_test_request === undefined || email_commseq_postcard_test_request === null) {
        throw new Error("Missing the required parameter 'email_commseq_postcard_test_request' when calling sendPostcardTest");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_postcard_uuid': commseq_postcard_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailCommseqPostcardSendTestResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}/test', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendSmsTest operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~sendSmsTestCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqSmsSendTestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send SMS test
     * @param {Number} storefront_oid 
     * @param {String} commseq_uuid 
     * @param {String} commseq_step_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqSmsSendTestRequest} email_commseq_sms_test_request Email commseq sms test request
     * @param {module:com.ultracart.admin.v2/StorefrontApi~sendSmsTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqSmsSendTestResponse}
     */
    sendSmsTest(storefront_oid, commseq_uuid, commseq_step_uuid, email_commseq_sms_test_request, callback) {
      let postBody = email_commseq_sms_test_request;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling sendSmsTest");
      }
      // verify the required parameter 'commseq_uuid' is set
      if (commseq_uuid === undefined || commseq_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_uuid' when calling sendSmsTest");
      }
      // verify the required parameter 'commseq_step_uuid' is set
      if (commseq_step_uuid === undefined || commseq_step_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_step_uuid' when calling sendSmsTest");
      }
      // verify the required parameter 'email_commseq_sms_test_request' is set
      if (email_commseq_sms_test_request === undefined || email_commseq_sms_test_request === null) {
        throw new Error("Missing the required parameter 'email_commseq_sms_test_request' when calling sendSmsTest");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_uuid': commseq_uuid,
        'commseq_step_uuid': commseq_step_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailCommseqSmsSendTestResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/sms/{commseq_uuid}/{commseq_step_uuid}/test', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendWebhookTest operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~sendWebhookTestCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqWebhookSendTestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send webhook test
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqWebhookSendTestRequest} email_commseq_webhook_test_request Email commseq webhook test request
     * @param {module:com.ultracart.admin.v2/StorefrontApi~sendWebhookTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqWebhookSendTestResponse}
     */
    sendWebhookTest(storefront_oid, email_commseq_webhook_test_request, callback) {
      let postBody = email_commseq_webhook_test_request;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling sendWebhookTest");
      }
      // verify the required parameter 'email_commseq_webhook_test_request' is set
      if (email_commseq_webhook_test_request === undefined || email_commseq_webhook_test_request === null) {
        throw new Error("Missing the required parameter 'email_commseq_webhook_test_request' when calling sendWebhookTest");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailCommseqWebhookSendTestResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/webhooks/test', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sequenceTest operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~sequenceTestCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqSequenceTestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sequence test
     * @param {Number} storefront_oid 
     * @param {String} commseq_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqSequenceTestRequest} email_commseq_sequence_test_request Commseq test request
     * @param {module:com.ultracart.admin.v2/StorefrontApi~sequenceTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqSequenceTestResponse}
     */
    sequenceTest(storefront_oid, commseq_uuid, email_commseq_sequence_test_request, callback) {
      let postBody = email_commseq_sequence_test_request;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling sequenceTest");
      }
      // verify the required parameter 'commseq_uuid' is set
      if (commseq_uuid === undefined || commseq_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_uuid' when calling sequenceTest");
      }
      // verify the required parameter 'email_commseq_sequence_test_request' is set
      if (email_commseq_sequence_test_request === undefined || email_commseq_sequence_test_request === null) {
        throw new Error("Missing the required parameter 'email_commseq_sequence_test_request' when calling sequenceTest");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_uuid': commseq_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailCommseqSequenceTestResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}/test', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startEmailCampaign operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~startEmailCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/BaseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start email campaign
     * @param {Number} storefront_oid 
     * @param {String} email_campaign_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~startEmailCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/BaseResponse}
     */
    startEmailCampaign(storefront_oid, email_campaign_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling startEmailCampaign");
      }
      // verify the required parameter 'email_campaign_uuid' is set
      if (email_campaign_uuid === undefined || email_campaign_uuid === null) {
        throw new Error("Missing the required parameter 'email_campaign_uuid' when calling startEmailCampaign");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_campaign_uuid': email_campaign_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BaseResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}/start', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribeToEmailList operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~subscribeToEmailListCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListSubscribeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe customers to email list
     * @param {Number} storefront_oid 
     * @param {String} email_list_uuid 
     * @param {Array.<module:com.ultracart.admin.v2.models/EmailCustomer>} customers Customers
     * @param {module:com.ultracart.admin.v2/StorefrontApi~subscribeToEmailListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListSubscribeResponse}
     */
    subscribeToEmailList(storefront_oid, email_list_uuid, customers, callback) {
      let postBody = customers;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling subscribeToEmailList");
      }
      // verify the required parameter 'email_list_uuid' is set
      if (email_list_uuid === undefined || email_list_uuid === null) {
        throw new Error("Missing the required parameter 'email_list_uuid' when calling subscribeToEmailList");
      }
      // verify the required parameter 'customers' is set
      if (customers === undefined || customers === null) {
        throw new Error("Missing the required parameter 'customers' when calling subscribeToEmailList");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_list_uuid': email_list_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailListSubscribeResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists/{email_list_uuid}/subscribe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unfavoriteScreenRecording operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~unfavoriteScreenRecordingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove favorite flag on screen recording
     * Remove favorite flag on screen recording 
     * @param {Number} storefront_oid 
     * @param {String} screen_recording_uuid 
     * @param {module:com.ultracart.admin.v2/StorefrontApi~unfavoriteScreenRecordingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unfavoriteScreenRecording(storefront_oid, screen_recording_uuid, callback) {
      let postBody = null;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling unfavoriteScreenRecording");
      }
      // verify the required parameter 'screen_recording_uuid' is set
      if (screen_recording_uuid === undefined || screen_recording_uuid === null) {
        throw new Error("Missing the required parameter 'screen_recording_uuid' when calling unfavoriteScreenRecording");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'screen_recording_uuid': screen_recording_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/favorite', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailCampaign operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email campaign
     * @param {Number} storefront_oid 
     * @param {String} email_campaign_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailCampaign} email_campaign Email campaign
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCampaignResponse}
     */
    updateEmailCampaign(storefront_oid, email_campaign_uuid, email_campaign, callback) {
      let postBody = email_campaign;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateEmailCampaign");
      }
      // verify the required parameter 'email_campaign_uuid' is set
      if (email_campaign_uuid === undefined || email_campaign_uuid === null) {
        throw new Error("Missing the required parameter 'email_campaign_uuid' when calling updateEmailCampaign");
      }
      // verify the required parameter 'email_campaign' is set
      if (email_campaign === undefined || email_campaign === null) {
        throw new Error("Missing the required parameter 'email_campaign' when calling updateEmailCampaign");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_campaign_uuid': email_campaign_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailCampaignResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaigns/{email_campaign_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailCampaignFolder operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailCampaignFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCampaignFolderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email campaign folder
     * @param {Number} storefront_oid 
     * @param {String} email_campaign_folder_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailCampaignFolder} email_campaign_folder Email campaign folder
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailCampaignFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCampaignFolderResponse}
     */
    updateEmailCampaignFolder(storefront_oid, email_campaign_folder_uuid, email_campaign_folder, callback) {
      let postBody = email_campaign_folder;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateEmailCampaignFolder");
      }
      // verify the required parameter 'email_campaign_folder_uuid' is set
      if (email_campaign_folder_uuid === undefined || email_campaign_folder_uuid === null) {
        throw new Error("Missing the required parameter 'email_campaign_folder_uuid' when calling updateEmailCampaignFolder");
      }
      // verify the required parameter 'email_campaign_folder' is set
      if (email_campaign_folder === undefined || email_campaign_folder === null) {
        throw new Error("Missing the required parameter 'email_campaign_folder' when calling updateEmailCampaignFolder");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_campaign_folder_uuid': email_campaign_folder_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailCampaignFolderResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/campaign_folders/{email_campaign_folder_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailCommseq operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailCommseqCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email commseq
     * @param {Number} storefront_oid 
     * @param {String} commseq_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailCommseq} email_commseq Email commseq
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailCommseqCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqResponse}
     */
    updateEmailCommseq(storefront_oid, commseq_uuid, email_commseq, callback) {
      let postBody = email_commseq;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateEmailCommseq");
      }
      // verify the required parameter 'commseq_uuid' is set
      if (commseq_uuid === undefined || commseq_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_uuid' when calling updateEmailCommseq");
      }
      // verify the required parameter 'email_commseq' is set
      if (email_commseq === undefined || email_commseq === null) {
        throw new Error("Missing the required parameter 'email_commseq' when calling updateEmailCommseq");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_uuid': commseq_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailCommseqResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/commseqs/{commseq_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailCustomer operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailCustomerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email customer
     * @param {Number} storefront_oid 
     * @param {String} email_customer_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailCustomer} email_customer Email customer
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateEmailCustomer(storefront_oid, email_customer_uuid, email_customer, callback) {
      let postBody = email_customer;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateEmailCustomer");
      }
      // verify the required parameter 'email_customer_uuid' is set
      if (email_customer_uuid === undefined || email_customer_uuid === null) {
        throw new Error("Missing the required parameter 'email_customer_uuid' when calling updateEmailCustomer");
      }
      // verify the required parameter 'email_customer' is set
      if (email_customer === undefined || email_customer === null) {
        throw new Error("Missing the required parameter 'email_customer' when calling updateEmailCustomer");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_customer_uuid': email_customer_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/customers/{email_customer_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailEmail operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email email
     * @param {Number} storefront_oid 
     * @param {String} commseq_email_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqEmail} email_commseq_email Email commseq email
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqEmailResponse}
     */
    updateEmailEmail(storefront_oid, commseq_email_uuid, email_commseq_email, callback) {
      let postBody = email_commseq_email;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateEmailEmail");
      }
      // verify the required parameter 'commseq_email_uuid' is set
      if (commseq_email_uuid === undefined || commseq_email_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_email_uuid' when calling updateEmailEmail");
      }
      // verify the required parameter 'email_commseq_email' is set
      if (email_commseq_email === undefined || email_commseq_email === null) {
        throw new Error("Missing the required parameter 'email_commseq_email' when calling updateEmailEmail");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_email_uuid': commseq_email_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailCommseqEmailResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/emails/{commseq_email_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailFlow operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailFlowCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailFlowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email flow
     * @param {Number} storefront_oid 
     * @param {String} email_flow_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailFlow} email_flow Email flow
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailFlowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailFlowResponse}
     */
    updateEmailFlow(storefront_oid, email_flow_uuid, email_flow, callback) {
      let postBody = email_flow;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateEmailFlow");
      }
      // verify the required parameter 'email_flow_uuid' is set
      if (email_flow_uuid === undefined || email_flow_uuid === null) {
        throw new Error("Missing the required parameter 'email_flow_uuid' when calling updateEmailFlow");
      }
      // verify the required parameter 'email_flow' is set
      if (email_flow === undefined || email_flow === null) {
        throw new Error("Missing the required parameter 'email_flow' when calling updateEmailFlow");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_flow_uuid': email_flow_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailFlowResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/flows/{email_flow_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailFlowFolder operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailFlowFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailFlowFolderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email flow folder
     * @param {Number} storefront_oid 
     * @param {String} email_flow_folder_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailFlowFolder} email_flow_folder Email flow folder
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailFlowFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailFlowFolderResponse}
     */
    updateEmailFlowFolder(storefront_oid, email_flow_folder_uuid, email_flow_folder, callback) {
      let postBody = email_flow_folder;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateEmailFlowFolder");
      }
      // verify the required parameter 'email_flow_folder_uuid' is set
      if (email_flow_folder_uuid === undefined || email_flow_folder_uuid === null) {
        throw new Error("Missing the required parameter 'email_flow_folder_uuid' when calling updateEmailFlowFolder");
      }
      // verify the required parameter 'email_flow_folder' is set
      if (email_flow_folder === undefined || email_flow_folder === null) {
        throw new Error("Missing the required parameter 'email_flow_folder' when calling updateEmailFlowFolder");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_flow_folder_uuid': email_flow_folder_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailFlowFolderResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/flow_folders/{email_flow_folder_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailGlobalSettings operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailGlobalSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailGlobalSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email global settings
     * @param {module:com.ultracart.admin.v2.models/EmailGlobalSettings} global_settings global settings request
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailGlobalSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailGlobalSettingsResponse}
     */
    updateEmailGlobalSettings(global_settings, callback) {
      let postBody = global_settings;
      // verify the required parameter 'global_settings' is set
      if (global_settings === undefined || global_settings === null) {
        throw new Error("Missing the required parameter 'global_settings' when calling updateEmailGlobalSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailGlobalSettingsResponse;
      return this.apiClient.callApi(
        '/storefront/email/global_settings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailList operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailListCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email list
     * @param {Number} storefront_oid 
     * @param {String} email_list_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailList} email_list Email list
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListResponse}
     */
    updateEmailList(storefront_oid, email_list_uuid, email_list, callback) {
      let postBody = email_list;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateEmailList");
      }
      // verify the required parameter 'email_list_uuid' is set
      if (email_list_uuid === undefined || email_list_uuid === null) {
        throw new Error("Missing the required parameter 'email_list_uuid' when calling updateEmailList");
      }
      // verify the required parameter 'email_list' is set
      if (email_list === undefined || email_list === null) {
        throw new Error("Missing the required parameter 'email_list' when calling updateEmailList");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_list_uuid': email_list_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailListResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/lists/{email_list_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailListSegmentFolder operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailListSegmentFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailListSegmentFolderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email campaign folder
     * @param {Number} storefront_oid 
     * @param {String} email_list_segment_folder_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailListSegmentFolder} email_list_segment_folder Email campaign folder
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailListSegmentFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailListSegmentFolderResponse}
     */
    updateEmailListSegmentFolder(storefront_oid, email_list_segment_folder_uuid, email_list_segment_folder, callback) {
      let postBody = email_list_segment_folder;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateEmailListSegmentFolder");
      }
      // verify the required parameter 'email_list_segment_folder_uuid' is set
      if (email_list_segment_folder_uuid === undefined || email_list_segment_folder_uuid === null) {
        throw new Error("Missing the required parameter 'email_list_segment_folder_uuid' when calling updateEmailListSegmentFolder");
      }
      // verify the required parameter 'email_list_segment_folder' is set
      if (email_list_segment_folder === undefined || email_list_segment_folder === null) {
        throw new Error("Missing the required parameter 'email_list_segment_folder' when calling updateEmailListSegmentFolder");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_list_segment_folder_uuid': email_list_segment_folder_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailListSegmentFolderResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/list_segment_folders/{email_list_segment_folder_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailPlan operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailPlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email plan
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailPlan} settings plan request
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailPlanResponse}
     */
    updateEmailPlan(storefront_oid, settings, callback) {
      let postBody = settings;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateEmailPlan");
      }
      // verify the required parameter 'settings' is set
      if (settings === undefined || settings === null) {
        throw new Error("Missing the required parameter 'settings' when calling updateEmailPlan");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailPlanResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/plan', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailPostcard operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailPostcardCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqPostcardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email postcard
     * @param {Number} storefront_oid 
     * @param {String} commseq_postcard_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailCommseqPostcard} email_commseq_postcard Email commseq postcard
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailPostcardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailCommseqPostcardResponse}
     */
    updateEmailPostcard(storefront_oid, commseq_postcard_uuid, email_commseq_postcard, callback) {
      let postBody = email_commseq_postcard;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateEmailPostcard");
      }
      // verify the required parameter 'commseq_postcard_uuid' is set
      if (commseq_postcard_uuid === undefined || commseq_postcard_uuid === null) {
        throw new Error("Missing the required parameter 'commseq_postcard_uuid' when calling updateEmailPostcard");
      }
      // verify the required parameter 'email_commseq_postcard' is set
      if (email_commseq_postcard === undefined || email_commseq_postcard === null) {
        throw new Error("Missing the required parameter 'email_commseq_postcard' when calling updateEmailPostcard");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'commseq_postcard_uuid': commseq_postcard_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailCommseqPostcardResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/postcards/{commseq_postcard_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailSegment operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSegmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email segment
     * @param {Number} storefront_oid 
     * @param {String} email_segment_uuid 
     * @param {module:com.ultracart.admin.v2.models/EmailSegment} email_segment Email segment
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSegmentResponse}
     */
    updateEmailSegment(storefront_oid, email_segment_uuid, email_segment, callback) {
      let postBody = email_segment;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateEmailSegment");
      }
      // verify the required parameter 'email_segment_uuid' is set
      if (email_segment_uuid === undefined || email_segment_uuid === null) {
        throw new Error("Missing the required parameter 'email_segment_uuid' when calling updateEmailSegment");
      }
      // verify the required parameter 'email_segment' is set
      if (email_segment === undefined || email_segment === null) {
        throw new Error("Missing the required parameter 'email_segment' when calling updateEmailSegment");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_segment_uuid': email_segment_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailSegmentResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/segments/{email_segment_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailSendingDomain operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailSendingDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSendingDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email sending domain
     * @param {String} domain 
     * @param {module:com.ultracart.admin.v2.models/EmailDomain} email_domain EmailDomain
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailSendingDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSendingDomainResponse}
     */
    updateEmailSendingDomain(domain, email_domain, callback) {
      let postBody = email_domain;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling updateEmailSendingDomain");
      }
      // verify the required parameter 'email_domain' is set
      if (email_domain === undefined || email_domain === null) {
        throw new Error("Missing the required parameter 'email_domain' when calling updateEmailSendingDomain");
      }

      let pathParams = {
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailSendingDomainResponse;
      return this.apiClient.callApi(
        '/storefront/email/sending_domains/{domain}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailSettings operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateEmailSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/EmailSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update email settings
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/EmailSettings} settings settings request
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateEmailSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/EmailSettingsResponse}
     */
    updateEmailSettings(storefront_oid, settings, callback) {
      let postBody = settings;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateEmailSettings");
      }
      // verify the required parameter 'settings' is set
      if (settings === undefined || settings === null) {
        throw new Error("Missing the required parameter 'settings' when calling updateEmailSettings");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailSettingsResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/email/settings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExperiment operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ExperimentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update experiment
     * @param {Number} storefront_oid 
     * @param {Number} storefront_experiment_oid 
     * @param {module:com.ultracart.admin.v2.models/Experiment} experiment Experiment
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ExperimentResponse}
     */
    updateExperiment(storefront_oid, storefront_experiment_oid, experiment, callback) {
      let postBody = experiment;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateExperiment");
      }
      // verify the required parameter 'storefront_experiment_oid' is set
      if (storefront_experiment_oid === undefined || storefront_experiment_oid === null) {
        throw new Error("Missing the required parameter 'storefront_experiment_oid' when calling updateExperiment");
      }
      // verify the required parameter 'experiment' is set
      if (experiment === undefined || experiment === null) {
        throw new Error("Missing the required parameter 'experiment' when calling updateExperiment");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'storefront_experiment_oid': storefront_experiment_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExperimentResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/experiments/{storefront_experiment_oid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLibraryItem operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateLibraryItemCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/LibraryItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update library item. Note that only certain fields may be updated via this method.
     * @param {Number} library_item_oid 
     * @param {module:com.ultracart.admin.v2.models/LibraryItem} library_item Library item
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateLibraryItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/LibraryItemResponse}
     */
    updateLibraryItem(library_item_oid, library_item, callback) {
      let postBody = library_item;
      // verify the required parameter 'library_item_oid' is set
      if (library_item_oid === undefined || library_item_oid === null) {
        throw new Error("Missing the required parameter 'library_item_oid' when calling updateLibraryItem");
      }
      // verify the required parameter 'library_item' is set
      if (library_item === undefined || library_item === null) {
        throw new Error("Missing the required parameter 'library_item' when calling updateLibraryItem");
      }

      let pathParams = {
        'library_item_oid': library_item_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LibraryItemResponse;
      return this.apiClient.callApi(
        '/storefront/code_library/{library_item_oid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateScreenRecordingMerchantNotes operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateScreenRecordingMerchantNotesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update merchant notes on a screen recording
     * Update merchant notes on a screen recording 
     * @param {Number} storefront_oid 
     * @param {String} screen_recording_uuid 
     * @param {module:com.ultracart.admin.v2.models/ScreenRecordingMerchantNotesRequest} merchant_notes_request Merchant Notes
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateScreenRecordingMerchantNotesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateScreenRecordingMerchantNotes(storefront_oid, screen_recording_uuid, merchant_notes_request, callback) {
      let postBody = merchant_notes_request;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateScreenRecordingMerchantNotes");
      }
      // verify the required parameter 'screen_recording_uuid' is set
      if (screen_recording_uuid === undefined || screen_recording_uuid === null) {
        throw new Error("Missing the required parameter 'screen_recording_uuid' when calling updateScreenRecordingMerchantNotes");
      }
      // verify the required parameter 'merchant_notes_request' is set
      if (merchant_notes_request === undefined || merchant_notes_request === null) {
        throw new Error("Missing the required parameter 'merchant_notes_request' when calling updateScreenRecordingMerchantNotes");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'screen_recording_uuid': screen_recording_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/merchant_notes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateScreenRecordingSegment operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateScreenRecordingSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ScreenRecordingSegmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update screen recording segment
     * @param {Number} storefront_oid 
     * @param {Number} screen_recording_segment_oid 
     * @param {module:com.ultracart.admin.v2.models/ScreenRecordingSegment} segment Segment
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateScreenRecordingSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ScreenRecordingSegmentResponse}
     */
    updateScreenRecordingSegment(storefront_oid, screen_recording_segment_oid, segment, callback) {
      let postBody = segment;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateScreenRecordingSegment");
      }
      // verify the required parameter 'screen_recording_segment_oid' is set
      if (screen_recording_segment_oid === undefined || screen_recording_segment_oid === null) {
        throw new Error("Missing the required parameter 'screen_recording_segment_oid' when calling updateScreenRecordingSegment");
      }
      // verify the required parameter 'segment' is set
      if (segment === undefined || segment === null) {
        throw new Error("Missing the required parameter 'segment' when calling updateScreenRecordingSegment");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'screen_recording_segment_oid': screen_recording_segment_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScreenRecordingSegmentResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/screen_recordings/segments/{screen_recording_segment_oid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateScreenRecordingSettings operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateScreenRecordingSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/ScreenRecordingSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update screen recording settings
     * @param {Number} storefront_oid 
     * @param {module:com.ultracart.admin.v2.models/ScreenRecordingSettings} settings Settings
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateScreenRecordingSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/ScreenRecordingSettingsResponse}
     */
    updateScreenRecordingSettings(storefront_oid, settings, callback) {
      let postBody = settings;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateScreenRecordingSettings");
      }
      // verify the required parameter 'settings' is set
      if (settings === undefined || settings === null) {
        throw new Error("Missing the required parameter 'settings' when calling updateScreenRecordingSettings");
      }

      let pathParams = {
        'storefront_oid': storefront_oid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScreenRecordingSettingsResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/screen_recordings/settings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateScreenRecordingTags operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateScreenRecordingTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update tags on a screen recording
     * Update tags on a screen recording 
     * @param {Number} storefront_oid 
     * @param {String} screen_recording_uuid 
     * @param {module:com.ultracart.admin.v2.models/ScreenRecordingTagsRequest} tags Tags
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateScreenRecordingTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateScreenRecordingTags(storefront_oid, screen_recording_uuid, tags, callback) {
      let postBody = tags;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateScreenRecordingTags");
      }
      // verify the required parameter 'screen_recording_uuid' is set
      if (screen_recording_uuid === undefined || screen_recording_uuid === null) {
        throw new Error("Missing the required parameter 'screen_recording_uuid' when calling updateScreenRecordingTags");
      }
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling updateScreenRecordingTags");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'screen_recording_uuid': screen_recording_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/screen_recordings/{screen_recording_uuid}/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTransactionEmail operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateTransactionEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/TransactionEmailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a transaction email object
     * Updates a transactional email 
     * @param {Number} storefront_oid 
     * @param {String} email_id 
     * @param {module:com.ultracart.admin.v2.models/TransactionEmail} transaction_email TransactionEmail
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateTransactionEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/TransactionEmailResponse}
     */
    updateTransactionEmail(storefront_oid, email_id, transaction_email, callback) {
      let postBody = transaction_email;
      // verify the required parameter 'storefront_oid' is set
      if (storefront_oid === undefined || storefront_oid === null) {
        throw new Error("Missing the required parameter 'storefront_oid' when calling updateTransactionEmail");
      }
      // verify the required parameter 'email_id' is set
      if (email_id === undefined || email_id === null) {
        throw new Error("Missing the required parameter 'email_id' when calling updateTransactionEmail");
      }
      // verify the required parameter 'transaction_email' is set
      if (transaction_email === undefined || transaction_email === null) {
        throw new Error("Missing the required parameter 'transaction_email' when calling updateTransactionEmail");
      }

      let pathParams = {
        'storefront_oid': storefront_oid,
        'email_id': email_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionEmailResponse;
      return this.apiClient.callApi(
        '/storefront/{storefront_oid}/transaction_email/list/{email_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTwilioAccount operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~updateTwilioAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/TwilioResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Twilio account
     * @param {String} esp_twilio_uuid 
     * @param {module:com.ultracart.admin.v2.models/Twilio} twilio Twilio
     * @param {module:com.ultracart.admin.v2/StorefrontApi~updateTwilioAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/TwilioResponse}
     */
    updateTwilioAccount(esp_twilio_uuid, twilio, callback) {
      let postBody = twilio;
      // verify the required parameter 'esp_twilio_uuid' is set
      if (esp_twilio_uuid === undefined || esp_twilio_uuid === null) {
        throw new Error("Missing the required parameter 'esp_twilio_uuid' when calling updateTwilioAccount");
      }
      // verify the required parameter 'twilio' is set
      if (twilio === undefined || twilio === null) {
        throw new Error("Missing the required parameter 'twilio' when calling updateTwilioAccount");
      }

      let pathParams = {
        'esp_twilio_uuid': esp_twilio_uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TwilioResponse;
      return this.apiClient.callApi(
        '/storefront/twilio/accounts/{esp_twilio_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFsFile operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~uploadFsFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This is the last step in uploading a file after 1) calling getUploadFsFileUrl and 2) uploading a file to the provided url, then finally 3) calling this method and providing the key to trigger the server into reading the S3 bucket and retrieving the file.
     * @param {Number} id 
     * @param {module:com.ultracart.admin.v2.models/FileManagerUploadRequest} upload_request UploadRequest
     * @param {module:com.ultracart.admin.v2/StorefrontApi~uploadFsFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uploadFsFile(id, upload_request, callback) {
      let postBody = upload_request;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling uploadFsFile");
      }
      // verify the required parameter 'upload_request' is set
      if (upload_request === undefined || upload_request === null) {
        throw new Error("Missing the required parameter 'upload_request' when calling uploadFsFile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/storefront/{id}/fs/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateRuler operation.
     * @callback module:com.ultracart.admin.v2/StorefrontApi~validateRulerCallback
     * @param {String} error Error message, if any.
     * @param {module:com.ultracart.admin.v2.models/RulerValidationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate AWS Event Ruler
     * @param {module:com.ultracart.admin.v2.models/RulerValidationRequest} ruler_validate_request Ruler Validate Request
     * @param {module:com.ultracart.admin.v2/StorefrontApi~validateRulerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:com.ultracart.admin.v2.models/RulerValidationResponse}
     */
    validateRuler(ruler_validate_request, callback) {
      let postBody = ruler_validate_request;
      // verify the required parameter 'ruler_validate_request' is set
      if (ruler_validate_request === undefined || ruler_validate_request === null) {
        throw new Error("Missing the required parameter 'ruler_validate_request' when calling validateRuler");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ultraCartBrowserApiKey', 'ultraCartOauth', 'ultraCartSimpleApiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RulerValidationResponse;
      return this.apiClient.callApi(
        '/storefront/ruler/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
